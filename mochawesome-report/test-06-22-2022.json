{
  "stats": {
    "suites": 56,
    "tests": 130,
    "passes": 1,
    "pending": 21,
    "failures": 108,
    "start": "2022-06-22T13:53:15.508Z",
    "end": "2022-06-22T13:54:23.571Z",
    "duration": 68063,
    "testsRegistered": 133,
    "passPercent": 0.8928571428571428,
    "pendingPercent": 15.789473684210526,
    "other": 2,
    "hasOther": true,
    "skipped": 3,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "ec478bd3-985a-491e-b4d6-9127ba0081c1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after all\" hook: checkouts in \"{root}\"",
          "fullTitle": "\"after all\" hook: checkouts in \"{root}\"",
          "timedOut": false,
          "duration": 639,
          "state": "failed",
          "speed": null,
          "pass": false,
          "fail": true,
          "pending": false,
          "context": null,
          "code": "this.timeout(5000); \nconst res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi1, global.idpaoption1, global.idpoc1, global.idpurcahse1, global.serviceids1)\n            if(res.status !== 200){\nconsole.log(\"failed : \"+res.text);\n            }\n            assert(res.status).to.equal(200)\n            console.log(res.text);\n            assert(res.body.data[0]).to.have.property(\"id\").exist\n            assert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi1)\n            assert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids1)\n            assert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption1)\n            assert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse1)\n            assert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc1)\n            assert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(datas.paymentOption.persenfee)\n            assert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(0)\n            assert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\n            assert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru1)\n            assert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah1)\n            assert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(persen_total_fee)\n            assert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(P_total_payment)\n            assert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\n            assert(res.body.data[0]).to.have.property(\"status\").exist\n            assert(res.body.data[0]).to.have.property(\"paid_at\")\n            assert(res.body.data[0]).to.have.property(\"actions\")\n            assert(res.body.data[0].va_numbers[0]).to.have.property(\"bank\").to.equal(global.bankname)\n            assert(res.body.data[0].va_numbers[0]).to.have.property(\"va_number\").exist\n            assert(res.body.data[0]).to.have.property(\"expired_at\").exist",
          "err": {
            "message": "AssertionError: expected 401 to equal 200",
            "estack": "AssertionError: expected 401 to equal 200\n    at Context.checkouts (test/suite6_checkout.js:66:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
            "diff": "- 401\n+ 200\n"
          },
          "uuid": "b4afc9a5-fcf3-4fd2-b42a-c3a2cab5b4e1",
          "parentUUID": "ec478bd3-985a-491e-b4d6-9127ba0081c1",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "98cc80b3-8a40-4e2d-b6f7-538935984cf0",
          "title": "Exchange Token API",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: pre_request for \"when user input valid token then user got response 200\"",
              "fullTitle": "Exchange Token API \"before all\" hook: pre_request for \"when user input valid token then user got response 200\"",
              "timedOut": false,
              "duration": 2003,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "username = ['ario16@gmail.com', 'ario10@gmail.com']\ntoken1 = []\ntoken2 = []\nfor (const user in username) {\n    const rd = await wong.wongAccount(username[user])\n    console.log('Status Code wong :', rd.status);\n    if (username[user] == `ario16@gmail.com`) {\n        const res = rd.body.data[0].token\n        token1.push(res)\n        global.token1 = token1\n    } else {\n        const res = rd.body.data[0].token\n        token2.push(res)\n        global.token2 = token2\n    }\n}\nconsole.log(rd.text);",
              "err": {
                "message": "ReferenceError: rd is not defined",
                "estack": "ReferenceError: rd is not defined\n    at Context.pre_request (test/suite1_accountService.js:24:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "1e932fb7-b83f-4827-8a01-2bd0f9c98f31",
              "parentUUID": "98cc80b3-8a40-4e2d-b6f7-538935984cf0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "when user input valid token then user got response 200",
              "fullTitle": "Exchange Token API when user input valid token then user got response 200",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "tokens = [global.token1, global.token2]\ntokens1 = []\ntokens2 = []\nfor (const x in tokens) {\n    res = await exchange_token.exchangeTokenAccount(tokens[x]);\n    if (tokens[x] == global.token1) {\n        const res1 = res.body.data[0].access_token\n        tokens1.push(res1)\n        global.access_Tokens1 = tokens1\n    } else {\n        const res2 = res.body.data[0].access_token\n        tokens2.push(res2)\n        global.access_Tokens2 = tokens2\n    }\n    assert(res.status).to.equal(200);\n    assert(res.body.data[0]).to.have.property('access_token')\n    assert(res.body.data[0]).to.have.property('refresh_token')\n    assert(res.body.data[0]).to.have.property('expires_in')\n    \n}\nconsole.log(global.access_Tokens1);\nconsole.log(\"failed : \"+res1.text);",
              "err": {},
              "uuid": "a039b3f7-e787-46e0-b48e-9d2e0c8594d2",
              "parentUUID": "98cc80b3-8a40-4e2d-b6f7-538935984cf0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "when user input wrong token, then user got response error",
              "fullTitle": "Exchange Token API when user input wrong token, then user got response error",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1bXhfUFZiQ3lTV2o5SG5MRHJ0bEJ3X1BLTnlFcVJtWTNpQ3BSMTBlMFpvIn0.eyJleHAiOjE2NTI4OTEwNTEsImlhdCI6MTY1Mjg1NTA1MSwianRpIjoiYmMwMzhiZWUtYzNhNi00YjYxLTlkZjMtYmQ3NjExZWQwMTI0IiwiaXNzIjoiaHR0cDovL2tleWNsb2FrLnN0Zy5rdC5qZy9hdXRoL3JlYWxtcy9raXRhamFnYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNTY5ZjM5NS1iZWUxLTQxMzItOWYzZS1lZDM3ODAyMzY2ODMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrb25nIiwic2Vzc2lvbl9zdGF0ZSI6ImYwZWU1YzI3LTliODYtNDg1Mi1iYmE2LTI1M2ZkN2RlZDFkMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1raXRhamFnYSIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiJmMGVlNWMyNy05Yjg2LTQ4NTItYmJhNi0yNTNmZDdkZWQxZDAiLCJraXRhYmlzYV91c2VyX2lkIjoiNSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiS2l0YWphZ2EgVGVzdCBBamEiLCJraXRhYmlzYV9zZWNvbmRhcnlfaWQiOiI1NDk0ZTg3ODQ2MTJjMWY1ZDNhODI4ZjAyYWNkNzRmNSIsInBob25lX251bWJlciI6IjYyODEyMzQ1Njc4OTAiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJraXRhamFnYS10ZXN0QGtpdGFqYWdhLmlkIiwiZ2l2ZW5fbmFtZSI6IktpdGFqYWdhIiwiZmFtaWx5X')\nassert(res.status).to.equal(502)",
              "err": {},
              "uuid": "e2de2ba4-6cd7-4729-ac56-7b09420c8235",
              "parentUUID": "98cc80b3-8a40-4e2d-b6f7-538935984cf0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "when user input empty token, then user got response error",
              "fullTitle": "Exchange Token API when user input empty token, then user got response error",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('')\nassert(res.status).to.equal(401)",
              "err": {},
              "uuid": "d279b284-c361-427e-b6bf-02021492d584",
              "parentUUID": "98cc80b3-8a40-4e2d-b6f7-538935984cf0",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "a039b3f7-e787-46e0-b48e-9d2e0c8594d2",
            "e2de2ba4-6cd7-4729-ac56-7b09420c8235",
            "d279b284-c361-427e-b6bf-02021492d584"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "3cb27e44-b33a-4256-a17d-b773e75b8a54",
          "title": "Get user info",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": false,
              "duration": 938,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)",
              "err": {
                "message": "AssertionError: expected 401 to equal 200",
                "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite1_accountService.js:69:31)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 401\n+ 200\n"
              },
              "uuid": "7c519d48-837f-46d7-bbc8-c34a54ba9e39",
              "parentUUID": "3cb27e44-b33a-4256-a17d-b773e75b8a54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": false,
              "duration": 710,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens2)\nassert(res.status).to.equal(404)",
              "err": {
                "message": "AssertionError: expected 401 to equal 404",
                "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite1_accountService.js:73:31)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 401\n+ 404\n"
              },
              "uuid": "95b904fb-37aa-4c8b-8212-98d17480ad7a",
              "parentUUID": "3cb27e44-b33a-4256-a17d-b773e75b8a54",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7c519d48-837f-46d7-bbc8-c34a54ba9e39",
            "95b904fb-37aa-4c8b-8212-98d17480ad7a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1648,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "a1cea5f2-f09a-4981-a292-a3ba3aa2aab3",
          "title": "API Service Group",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "21390c63-331f-46ee-b74e-035edb5def7f",
              "title": "Create Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 704,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.serviceids = res.body.data[0].id\nglobal.names = res.body.data[0].name\nglobal.desc = res.body.data[0].description\nglobal.codes = res.body.data[0].code\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\n//console.log(\"ini id sg : \"+global.serviceids);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:61:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "9421b4cb-f5c6-4f2e-b264-c740d29a5537",
                  "parentUUID": "21390c63-331f-46ee-b74e-035edb5def7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 711,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code1, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah1)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.serviceids1 = res.body.data[0].id\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nconsole.log(\"ini id sg : \"+global.serviceids1);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:78:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "b11ff379-d0a8-4444-8d33-2df1ac67eca8",
                  "parentUUID": "21390c63-331f-46ee-b74e-035edb5def7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input existing data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input existing data, then user got response error",
                  "timedOut": false,
                  "duration": 699,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', 'Alda', 'this is triger from automation tools', datas.service_Group.ujrah)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:89:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "bae6ddf1-0240-4804-9cd7-02fe810b6448",
                  "parentUUID": "21390c63-331f-46ee-b74e-035edb5def7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 711,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:94:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "c515174d-29f1-4b26-8190-399a9f6c5a10",
                  "parentUUID": "21390c63-331f-46ee-b74e-035edb5def7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9421b4cb-f5c6-4f2e-b264-c740d29a5537",
                "b11ff379-d0a8-4444-8d33-2df1ac67eca8",
                "bae6ddf1-0240-4804-9cd7-02fe810b6448",
                "c515174d-29f1-4b26-8190-399a9f6c5a10"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2825,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5a8b5217-c39e-49c5-b71a-6b99905c715c",
              "title": "Get All Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Service Group when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 813,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll.getallServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ids1 = res.body.data[1].id\nids2 = res.body.data[2].id\nglobal.idsgforppo = res.body.data[3].id\nglobal.idsgpuchase = res.body.data[4].id\nglobal.names1 = res.body.data[1].name\nglobal.desc1 = res.body.data[1].description\nglobal.codes1 = res.body.data[1].code",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:103:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "f0d29422-1dcf-42c0-b409-37ea421ee996",
                  "parentUUID": "5a8b5217-c39e-49c5-b71a-6b99905c715c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f0d29422-1dcf-42c0-b409-37ea421ee996"
              ],
              "pending": [],
              "skipped": [],
              "duration": 813,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "18e6e746-8cc2-40de-af70-1c7f8d425b92",
              "title": "Get All Public Service Group ",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Public Service Group  when user hit api get all public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 648,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAllpublic.getallpublicServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:125:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "f12b594d-71b3-4a0c-a917-c5a68203716d",
                  "parentUUID": "18e6e746-8cc2-40de-af70-1c7f8d425b92",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f12b594d-71b3-4a0c-a917-c5a68203716d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 648,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "78540c0a-ef51-43b6-9923-a1a3090d05ad",
              "title": "Get Detail Public Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 734,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, global.serviceids)\nif(res.status !==200){\n    console.log(\"getdetailpublic data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:139:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "3988b46b-600f-40b9-8b75-16a5ed7f6936",
                  "parentUUID": "78540c0a-ef51-43b6-9923-a1a3090d05ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail public with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 658,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite2_productService.js:148:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "ed373c12-0543-44d9-8746-d34d1379fde1",
                  "parentUUID": "78540c0a-ef51-43b6-9923-a1a3090d05ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3988b46b-600f-40b9-8b75-16a5ed7f6936",
                "ed373c12-0543-44d9-8746-d34d1379fde1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1392,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0cff1383-9ca9-42c6-a560-ed4c9e36f7b4",
              "title": "Get Detail Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 656,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, global.serviceids)\nif(res.status !==200){\n    console.log(\"getdetail data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:159:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "6d475dd1-c5c1-491b-a22d-10d25a4aeecf",
                  "parentUUID": "0cff1383-9ca9-42c6-a560-ed4c9e36f7b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 705,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite2_productService.js:168:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "3c6b4670-810e-4dfd-9b26-e6213300a04c",
                  "parentUUID": "0cff1383-9ca9-42c6-a560-ed4c9e36f7b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6d475dd1-c5c1-491b-a22d-10d25a4aeecf",
                "3c6b4670-810e-4dfd-9b26-e6213300a04c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1361,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ca961a38-2a6e-43e6-8f88-608fffbf5ca0",
              "title": "Update Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 674,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:179:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "154de42f-bb87-4b70-9862-c8b4b8c08eba",
                  "parentUUID": "ca961a38-2a6e-43e6-8f88-608fffbf5ca0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different code and same description and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different code and same description and same name then user got response 200",
                  "timedOut": false,
                  "duration": 656,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, datas.service_Group.code, global.names, global.desc, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:191:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "4400ed27-d009-459b-9b6f-a4edda022322",
                  "parentUUID": "ca961a38-2a6e-43e6-8f88-608fffbf5ca0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different name and same code then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different name and same code then user got response 200",
                  "timedOut": false,
                  "duration": 663,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes, datas.service_Group.name, global.desc, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:203:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "2d4e973a-fc8b-43ad-bac5-5b588fbc6b84",
                  "parentUUID": "ca961a38-2a6e-43e6-8f88-608fffbf5ca0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different description and same code and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different description and same code and same name then user got response 200",
                  "timedOut": false,
                  "duration": 682,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes, global.names, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:215:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "e4be1882-0958-4cac-8574-9dc60c65e961",
                  "parentUUID": "ca961a38-2a6e-43e6-8f88-608fffbf5ca0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input same data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input same data, then user got response error",
                  "timedOut": false,
                  "duration": 805,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes1, global.names1, global.desc1, datas.service_Group.ujrah)   \nassert(res.status).to.equal(500)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 500",
                    "estack": "AssertionError: expected 401 to equal 500\n    at Context.<anonymous> (test/suite2_productService.js:224:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 500\n"
                  },
                  "uuid": "4586d9ec-96f1-46e1-a759-f04e06ba031d",
                  "parentUUID": "ca961a38-2a6e-43e6-8f88-608fffbf5ca0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 720,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.ids1, global.codes, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nassert(res.status).to.equal(500)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 500",
                    "estack": "AssertionError: expected 401 to equal 500\n    at Context.<anonymous> (test/suite2_productService.js:228:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 500\n"
                  },
                  "uuid": "17fff67b-d20a-44f2-9a30-43737d1b04f9",
                  "parentUUID": "ca961a38-2a6e-43e6-8f88-608fffbf5ca0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "154de42f-bb87-4b70-9862-c8b4b8c08eba",
                "4400ed27-d009-459b-9b6f-a4edda022322",
                "2d4e973a-fc8b-43ad-bac5-5b588fbc6b84",
                "e4be1882-0958-4cac-8574-9dc60c65e961",
                "4586d9ec-96f1-46e1-a759-f04e06ba031d",
                "17fff67b-d20a-44f2-9a30-43737d1b04f9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4200,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5588f9a7-4a30-4ea8-b92b-0f8c12d727ab",
              "title": "Delete data Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7e5f0fd7-4b15-4fe8-bfa6-f9bf6df80f1f",
                  "parentUUID": "5588f9a7-4a30-4ea8-b92b-0f8c12d727ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "1f48a528-1b78-43f1-bd72-58323deb8d29",
                  "parentUUID": "5588f9a7-4a30-4ea8-b92b-0f8c12d727ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "7e5f0fd7-4b15-4fe8-bfa6-f9bf6df80f1f",
                "1f48a528-1b78-43f1-bd72-58323deb8d29"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "3968e97d-bec2-4a1e-a95d-9aeb8ad9a7e3",
          "title": "API Extension Clause",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8e85f265-23bf-4edb-af4d-5e76865412db",
              "title": "Create ExtensionClause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Create ExtensionClause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 714,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_create.createExtensionClause(global.access_Tokens1, datas.Extension_clause.code, datas.service_Group.name, datas.service_Group.description, global.codes)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(true)\nglobal.ECids = res.body.data[0].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:251:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "71496c68-e424-42a3-b439-eca2adc64652",
                  "parentUUID": "8e85f265-23bf-4edb-af4d-5e76865412db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "71496c68-e424-42a3-b439-eca2adc64652"
              ],
              "pending": [],
              "skipped": [],
              "duration": 714,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c84bd22a-3b1c-4327-b752-9c076616fa89",
              "title": "Get all data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Extension Clause when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 750,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getall.getallExtensionClause(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ECids1 = res.body.data[1].id\nglobal.ECserviceCode1 = res.body.data[1].service_group_code\nglobal.code1 = res.body.data[1].code\nglobal.name1 = res.body.data[1].name\nglobal.code2 = res.body.data[0].code\nglobal.name2 = res.body.data[0].name\nglobal.ECserviceCode2 = res.body.data[0].service_group_code\nglobal.desc2 = res.body.data[0].description",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:265:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "e3d2a79d-3c82-468c-b745-cfb053163e39",
                  "parentUUID": "c84bd22a-3b1c-4327-b752-9c076616fa89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e3d2a79d-3c82-468c-b745-cfb053163e39"
              ],
              "pending": [],
              "skipped": [],
              "duration": 750,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "68657822-11e7-49a0-8ed1-8f9b7d21fc2b",
              "title": "Delete data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "810b1bcc-f236-46e0-93ed-10c881cffb39",
                  "parentUUID": "68657822-11e7-49a0-8ed1-8f9b7d21fc2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "8246e735-addf-4963-b968-6f66180bf6f3",
                  "parentUUID": "68657822-11e7-49a0-8ed1-8f9b7d21fc2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "810b1bcc-f236-46e0-93ed-10c881cffb39",
                "8246e735-addf-4963-b968-6f66180bf6f3"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "9b138b02-8e0d-4e0b-bc82-1c65a4b410dd",
              "title": "Get Detail Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 888,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, global.ECids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").to.equal(global.ECids)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(false)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:297:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "2dd19cf3-8397-42c5-93b9-18e6c45e33d2",
                  "parentUUID": "9b138b02-8e0d-4e0b-bc82-1c65a4b410dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 652,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, datas.Extension_clause.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc.id).to.equal('error data tidak ditemukan')",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite2_productService.js:308:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "3fb4e080-812d-4aeb-bfab-0fa7068ed43a",
                  "parentUUID": "9b138b02-8e0d-4e0b-bc82-1c65a4b410dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2dd19cf3-8397-42c5-93b9-18e6c45e33d2",
                "3fb4e080-812d-4aeb-bfab-0fa7068ed43a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1540,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0e4fe0fb-dde2-4b7b-8bfa-e1cf7348ec1c",
              "title": "update data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause update data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 634,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Update.updateExtensionClause(global.access_Tokens1, global.ECids, global.code1, global.name1, datas.Extension_clause.description, global.ECserviceCode1)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:315:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "e38daa2c-9018-4001-9387-30c1c727c48a",
                  "parentUUID": "0e4fe0fb-dde2-4b7b-8bfa-e1cf7348ec1c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e38daa2c-9018-4001-9387-30c1c727c48a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 634,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5072b39e-8920-4c39-bd7c-9af59a8384e9",
              "title": "Search data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 637,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name1)\nif(res.status !== 200){\n    console.log(\"error search EC\" +res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:326:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "3a5822f7-18ee-4592-a73c-1dcecd17a35b",
                  "parentUUID": "5072b39e-8920-4c39-bd7c-9af59a8384e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid service group, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using invalid service group, then user got response error",
                  "timedOut": false,
                  "duration": 635,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, datas.Extension_clause.invalid_service_group_code, global.code1, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Product Search Extension Clause Data Tidak Ditemukan')",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:337:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "5c73138d-e958-4f68-b051-e7b0843c53c7",
                  "parentUUID": "5072b39e-8920-4c39-bd7c-9af59a8384e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_code and with same service group and same name, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_code and with same service group and same name, then user got response error",
                  "timedOut": false,
                  "duration": 635,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code2, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Product Search Extension Clause Data Tidak Ditemukan')",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:342:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "5c50c2ae-5563-4d23-98b1-e061632432ad",
                  "parentUUID": "5072b39e-8920-4c39-bd7c-9af59a8384e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_name and with same service group and same code, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_name and with same service group and same code, then user got response error",
                  "timedOut": false,
                  "duration": 665,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name2)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Product Search Extension Clause Data Tidak Ditemukan')",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:347:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "5924332d-73d7-4570-bbbc-c0f8684343dd",
                  "parentUUID": "5072b39e-8920-4c39-bd7c-9af59a8384e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3a5822f7-18ee-4592-a73c-1dcecd17a35b",
                "5c73138d-e958-4f68-b051-e7b0843c53c7",
                "5c50c2ae-5563-4d23-98b1-e061632432ad",
                "5924332d-73d7-4570-bbbc-c0f8684343dd"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2572,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0d3a3ff6-5fc9-4d4c-b256-7d8361609a01",
              "title": "Create Deductible API",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Deductible API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 723,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.deducids = res.body.data[0].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:357:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "7ec75bf1-1ece-4f9d-a628-ed645332bba1",
                  "parentUUID": "0d3a3ff6-5fc9-4d4c-b256-7d8361609a01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong service group, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong service group, then user got response error",
                  "timedOut": false,
                  "duration": 653,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, datas.Deductible.service_code, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Service Group Code Tidak Ditemukan\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:370:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "d3c75125-d609-4bc7-8be2-d0801889b2b0",
                  "parentUUID": "0d3a3ff6-5fc9-4d4c-b256-7d8361609a01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong calculate method, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong calculate method, then user got response error",
                  "timedOut": false,
                  "duration": 748,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:375:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "ebe8a774-1758-49d2-a5e7-99865f573147",
                  "parentUUID": "0d3a3ff6-5fc9-4d4c-b256-7d8361609a01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input deduction value with string, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input deduction value with string, then user got response error",
                  "timedOut": false,
                  "duration": 658,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {
                    "message": "AssertionError: Target cannot be null or undefined.",
                    "estack": "AssertionError: Target cannot be null or undefined.\n    at Context.<anonymous> (test/suite2_productService.js:380:52)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": null
                  },
                  "uuid": "8477a041-ef93-4e84-a8e8-8d96b3f6e917",
                  "parentUUID": "0d3a3ff6-5fc9-4d4c-b256-7d8361609a01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7ec75bf1-1ece-4f9d-a628-ed645332bba1",
                "d3c75125-d609-4bc7-8be2-d0801889b2b0",
                "ebe8a774-1758-49d2-a5e7-99865f573147",
                "8477a041-ef93-4e84-a8e8-8d96b3f6e917"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2782,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d437a59c-f81e-4bdb-afce-0d5c479a0681",
              "title": "Get all Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all Deduction when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 647,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getall.getDeductible(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:389:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "c98ef33d-5c0d-4f85-9595-8e3f354772c5",
                  "parentUUID": "d437a59c-f81e-4bdb-afce-0d5c479a0681",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c98ef33d-5c0d-4f85-9595-8e3f354772c5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 647,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c8dc6679-82bb-4bcc-b27c-888f7fd31fd3",
              "title": "Get Detail Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 649,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(global.deducids, global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:406:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "54eba60b-7f13-429e-bd80-3a5dab73ec16",
                  "parentUUID": "c8dc6679-82bb-4bcc-b27c-888f7fd31fd3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 737,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(datas.Deductible.wrong_idDeduc, global.access_Tokens1)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite2_productService.js:418:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "f8c440ee-0a49-4f01-a02f-158abfef6115",
                  "parentUUID": "c8dc6679-82bb-4bcc-b27c-888f7fd31fd3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "54eba60b-7f13-429e-bd80-3a5dab73ec16",
                "f8c440ee-0a49-4f01-a02f-158abfef6115"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1386,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "689e9d05-0d85-4c57-ac0b-c6a5dbb172fe",
              "title": "Update Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 651,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method1, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:428:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "cafb3082-7f84-4926-977b-6ab398798107",
                  "parentUUID": "689e9d05-0d85-4c57-ac0b-c6a5dbb172fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid Deduction id, then user got response error",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input data using invalid Deduction id, then user got response error",
                  "timedOut": false,
                  "duration": 774,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, datas.Deductible.wrong_idDeduc, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Deductible ID Tidak Ditemukan\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:440:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "d4a75932-ccec-46dd-b666-16665628eb9c",
                  "parentUUID": "689e9d05-0d85-4c57-ac0b-c6a5dbb172fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu Method then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu Method then user got response 200",
                  "timedOut": false,
                  "duration": 645,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:446:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "9521d7fa-1e31-4dce-a883-35ef5d605e45",
                  "parentUUID": "689e9d05-0d85-4c57-ac0b-c6a5dbb172fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu value with string, then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu value with string, then user got response 200",
                  "timedOut": false,
                  "duration": 5651,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:452:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "fe3bfcd6-f41c-4dd7-b681-e8792ba10bf7",
                  "parentUUID": "689e9d05-0d85-4c57-ac0b-c6a5dbb172fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "cafb3082-7f84-4926-977b-6ab398798107",
                "d4a75932-ccec-46dd-b666-16665628eb9c",
                "9521d7fa-1e31-4dce-a883-35ef5d605e45",
                "fe3bfcd6-f41c-4dd7-b681-e8792ba10bf7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7721,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "995832c1-6ae3-4630-8352-3351bc63611c",
              "title": "Search Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 649,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Search.searchDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:463:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "7cbf03be-b103-4f3e-b3fe-bc0be4e107a4",
                  "parentUUID": "995832c1-6ae3-4630-8352-3351bc63611c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7cbf03be-b103-4f3e-b3fe-bc0be4e107a4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 649,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "6e57ad67-a64b-4e33-b671-ee0eb5ad13ad",
              "title": "Deleted Deduction APi",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "78a7dac0-a321-49e7-b402-09c758319364",
                  "parentUUID": "6e57ad67-a64b-4e33-b671-ee0eb5ad13ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "54975287-ef99-44f6-a493-d4d3a2fb74ca",
                  "parentUUID": "6e57ad67-a64b-4e33-b671-ee0eb5ad13ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "78a7dac0-a321-49e7-b402-09c758319364",
                "54975287-ef99-44f6-a493-d4d3a2fb74ca"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "51ae3cbe-e8ee-479c-bbf8-c0221c15acef",
              "title": "Create Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 686,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\nglobal.idpoc = res.body.data[0].id\n//console.log(\"ini poc : \"+global.idpoc);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:496:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "6438ed13-49c3-45a1-89b4-15cbba08c4c0",
                  "parentUUID": "51ae3cbe-e8ee-479c-bbf8-c0221c15acef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 659,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids1, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\nglobal.idpoc1 = res.body.data[0].id\n//console.log(\"ini poc : \"+global.idpoc);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:515:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "34af9dbe-8444-44cc-831c-e55f9601de79",
                  "parentUUID": "51ae3cbe-e8ee-479c-bbf8-c0221c15acef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 906,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:531:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "e9a387f6-0b83-491f-93a4-dc07b7d376d3",
                  "parentUUID": "51ae3cbe-e8ee-479c-bbf8-c0221c15acef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": false,
                  "duration": 785,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:535:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "f287d090-5d48-4c47-8ab9-9508c9f96c3d",
                  "parentUUID": "51ae3cbe-e8ee-479c-bbf8-c0221c15acef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 652,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:539:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "1bf38f4a-844e-459e-8868-c78c580cd7b1",
                  "parentUUID": "51ae3cbe-e8ee-479c-bbf8-c0221c15acef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6438ed13-49c3-45a1-89b4-15cbba08c4c0",
                "34af9dbe-8444-44cc-831c-e55f9601de79",
                "e9a387f6-0b83-491f-93a4-dc07b7d376d3",
                "f287d090-5d48-4c47-8ab9-9508c9f96c3d",
                "1bf38f4a-844e-459e-8868-c78c580cd7b1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3688,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ae12bab1-41b9-4351-a92d-f415663ba64b",
              "title": "Get all data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Product Contribution when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 657,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getall.getContribution(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\ncontriId = res.body.data[0].id\nglobal.contripurchase = res.body.data[1].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:548:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "93680805-e110-46be-8fde-79b9563797e3",
                  "parentUUID": "ae12bab1-41b9-4351-a92d-f415663ba64b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "93680805-e110-46be-8fde-79b9563797e3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 657,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "f62cec3d-85d7-4896-ac92-fe225c6f97b2",
              "title": "Get detail Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 642,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, global.serviceids)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:569:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "b3e4d358-642f-440f-8b2a-ec7c284af386",
                  "parentUUID": "f62cec3d-85d7-4896-ac92-fe225c6f97b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 637,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite2_productService.js:583:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "4040c275-9583-4c27-ba29-721f3a05adc3",
                  "parentUUID": "f62cec3d-85d7-4896-ac92-fe225c6f97b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b3e4d358-642f-440f-8b2a-ec7c284af386",
                "4040c275-9583-4c27-ba29-721f3a05adc3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1279,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a999ad46-5d40-4f82-b6ce-d09eeca2d084",
              "title": "Update data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Update.updateContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.contribution.isPopular.false, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee, contriId)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {
                    "message": "ReferenceError: contriId is not defined",
                    "estack": "ReferenceError: contriId is not defined\n    at Context.<anonymous> (test/suite2_productService.js:589:379)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "c0ab4433-38a2-4241-805f-def802b2af5b",
                  "parentUUID": "a999ad46-5d40-4f82-b6ce-d09eeca2d084",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 660,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:608:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "494d691f-9b43-4c94-8a26-79ce949daf4f",
                  "parentUUID": "a999ad46-5d40-4f82-b6ce-d09eeca2d084",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": false,
                  "duration": 657,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:612:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "1919d90a-50f9-40fd-a804-2b2a3b759544",
                  "parentUUID": "a999ad46-5d40-4f82-b6ce-d09eeca2d084",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 664,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:616:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "b7b0ae9f-6ed8-484b-ab0c-be8a93d2b880",
                  "parentUUID": "a999ad46-5d40-4f82-b6ce-d09eeca2d084",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c0ab4433-38a2-4241-805f-def802b2af5b",
                "494d691f-9b43-4c94-8a26-79ce949daf4f",
                "1919d90a-50f9-40fd-a804-2b2a3b759544",
                "b7b0ae9f-6ed8-484b-ab0c-be8a93d2b880"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1982,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "78236b77-b40f-4149-be49-a01a0f44bf9c",
              "title": "Delete Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "faa12c07-f45a-4492-8ec1-57f860476584",
                  "parentUUID": "78236b77-b40f-4149-be49-a01a0f44bf9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4e031c43-e9cc-49ab-9037-d2942b9853fd",
                  "parentUUID": "78236b77-b40f-4149-be49-a01a0f44bf9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "faa12c07-f45a-4492-8ec1-57f860476584",
                "4e031c43-e9cc-49ab-9037-d2942b9853fd"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "58b9713f-114e-44f8-b155-170780f10dd9",
          "title": "Payment Api Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
          "file": "/test/suite3_paymentService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c8682173-7720-469c-934e-29e7adb809a1",
              "title": "Create Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Provider when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 667,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Provider.createPaymentProvider(global.access_Tokens1, datas.paymentProvider.callback_url, datas.paymentProvider.code, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"code\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"callback_url\").to.equal(datas.paymentProvider.callback_url)\nproviderids = res.body.data[0].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:44:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "7f524ec2-fd8d-4d15-84f9-c8ce9786e330",
                  "parentUUID": "c8682173-7720-469c-934e-29e7adb809a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7f524ec2-fd8d-4d15-84f9-c8ce9786e330"
              ],
              "pending": [],
              "skipped": [],
              "duration": 667,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ccb2eb6f-accb-42b9-bd86-500ad3e09ff8",
              "title": "Get all Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Payment Provider when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 703,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Provider.getPaymentProvider(global.access_Tokens1)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"code\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"callback_url\").exist\nid1 = res.body.data[1].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:59:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "2ae30a09-d6e2-4118-959a-38fc7c7ee349",
                  "parentUUID": "ccb2eb6f-accb-42b9-bd86-500ad3e09ff8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2ae30a09-d6e2-4118-959a-38fc7c7ee349"
              ],
              "pending": [],
              "skipped": [],
              "duration": 703,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0ee78a0f-24fb-4bf1-a3db-b72cde92901a",
              "title": "Get detail payment provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, providerids)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "ReferenceError: providerids is not defined",
                    "estack": "ReferenceError: providerids is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:71:98)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "f9bb5918-572a-4757-9087-b9aae612e031",
                  "parentUUID": "0ee78a0f-24fb-4bf1-a3db-b72cde92901a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 647,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID)\nassert(res.status).to.equal(500)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 500",
                    "estack": "AssertionError: expected 401 to equal 500\n    at Context.<anonymous> (test/suite3_paymentService.js:79:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 500\n"
                  },
                  "uuid": "88f2dc98-d6f1-447d-b59c-e8d78eeae154",
                  "parentUUID": "0ee78a0f-24fb-4bf1-a3db-b72cde92901a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f9bb5918-572a-4757-9087-b9aae612e031",
                "88f2dc98-d6f1-447d-b59c-e8d78eeae154"
              ],
              "pending": [],
              "skipped": [],
              "duration": 648,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a8f687ab-aecd-424a-a77f-93e468ecb107",
              "title": "Update Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, providerids, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"Failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "ReferenceError: providerids is not defined",
                    "estack": "ReferenceError: providerids is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:84:92)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "9a51428b-5256-4e2f-8b02-674678e71ace",
                  "parentUUID": "a8f687ab-aecd-424a-a77f-93e468ecb107",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 704,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID, datas.paymentProvider.callback_url, datas.paymentProvider.wrongCode, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite3_paymentService.js:92:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "3135581a-9635-41a5-8019-b6900f46ead3",
                  "parentUUID": "a8f687ab-aecd-424a-a77f-93e468ecb107",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using existing code, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:95:92)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "31906c80-f302-462c-a0b4-8a67af9c6619",
                  "parentUUID": "a8f687ab-aecd-424a-a77f-93e468ecb107",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid authorization, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid authorization, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(datas.paymentProvider.invalid_auth, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(401)",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:99:105)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "9811b4b9-3dbc-4895-92e0-437232d2438b",
                  "parentUUID": "a8f687ab-aecd-424a-a77f-93e468ecb107",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9a51428b-5256-4e2f-8b02-674678e71ace",
                "3135581a-9635-41a5-8019-b6900f46ead3",
                "31906c80-f302-462c-a0b4-8a67af9c6619",
                "9811b4b9-3dbc-4895-92e0-437232d2438b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 704,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "961c1150-9fc9-4e14-a5fc-aa1b219cf6b0",
              "title": "Delete payment Provider API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f7c06698-9c5e-41ba-89ae-2770aef05c58",
                  "parentUUID": "961c1150-9fc9-4e14-a5fc-aa1b219cf6b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7649ef03-0808-4a0c-85db-ff997b33a04b",
                  "parentUUID": "961c1150-9fc9-4e14-a5fc-aa1b219cf6b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "857e059d-5c26-496f-a59a-b395867e94c6",
                  "parentUUID": "961c1150-9fc9-4e14-a5fc-aa1b219cf6b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "f7c06698-9c5e-41ba-89ae-2770aef05c58",
                "7649ef03-0808-4a0c-85db-ff997b33a04b",
                "857e059d-5c26-496f-a59a-b395867e94c6"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "b4598a77-963f-486f-8a08-3327ba936352",
              "title": "Create Payment Option API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const bankName =  [\"shopeepay\", \"qris\", \"gopay\"]\nfor (let x in bankName) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, 'EWALLET', datas.Deductible.description, datas.paymentOption.fixfee, bankName[x], 0, providerids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(bankName[x])\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nglobal.idpaoption = res.body.data[0].id\nidpaoption3 = res.body.data[0].name\n\n}",
                  "err": {
                    "message": "ReferenceError: providerids is not defined",
                    "estack": "ReferenceError: providerids is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:127:173)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "15efc228-6089-43b7-ae97-6c1f1be1eddf",
                  "parentUUID": "b4598a77-963f-486f-8a08-3327ba936352",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const bankName =  [\"mandiri\", \"cimb\", \"mega\", \"bni\", \"bca\", \"permata\", \"bri\", \"maybank\"]\nfor (let x in bankName) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, \"BANK_TRANSFER\", datas.Deductible.description, 0 , bankName[x] , datas.paymentOption.persenfee , id1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(bankName[x])\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nglobal.idpaoption1 = res.body.data[0].id\nglobal.bankname = res.body.data[0].name\n}",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:146:185)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "0dea9ec0-2b23-41e4-bea3-080fdeaa56d0",
                  "parentUUID": "b4598a77-963f-486f-8a08-3327ba936352",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong category, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input wrong category, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, datas.paymentOption.wrong_category, datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,0 , id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"kategori tidak valid\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:160:212)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "bf2ae748-0c93-4d44-9d60-1e8347e2ac80",
                  "parentUUID": "b4598a77-963f-486f-8a08-3327ba936352",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input provider id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input provider id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 650,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite3_paymentService.js:166:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "6a5dd2e7-db75-4698-809f-15ec290a77e8",
                  "parentUUID": "b4598a77-963f-486f-8a08-3327ba936352",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input persen fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:170:214)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "4e791a69-b20d-43c7-9bea-18ddad1a4a2f",
                  "parentUUID": "b4598a77-963f-486f-8a08-3327ba936352",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input fix fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:175:214)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "cd75bb6e-48b0-4cc9-bf8b-38134d4fb5b1",
                  "parentUUID": "b4598a77-963f-486f-8a08-3327ba936352",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "15efc228-6089-43b7-ae97-6c1f1be1eddf",
                "0dea9ec0-2b23-41e4-bea3-080fdeaa56d0",
                "bf2ae748-0c93-4d44-9d60-1e8347e2ac80",
                "6a5dd2e7-db75-4698-809f-15ec290a77e8",
                "4e791a69-b20d-43c7-9bea-18ddad1a4a2f",
                "cd75bb6e-48b0-4cc9-bf8b-38134d4fb5b1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 650,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "66232d86-1ffd-4ebc-91ba-e53f30a9bd5e",
              "title": "Get all payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all payment option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 653,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Option.getPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nidpo = res.body.data[0].id\nidpo1 = res.body.data[1].id\nidpo2 = res.body.data[2].id\nidpo3 = res.body.data[3].id\n//console.log(idpo);\n//console.log(idpo1);\n//console.log(idpo2);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:183:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "2c00dc67-93e0-4d58-8a3a-4ecef810ce6e",
                  "parentUUID": "66232d86-1ffd-4ebc-91ba-e53f30a9bd5e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2c00dc67-93e0-4d58-8a3a-4ecef810ce6e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 653,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "78e2cbb4-8e76-4b66-b610-36196c796b55",
              "title": "Get Payment Option Page",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "",
                  "fullTitle": "Payment Api Service Get Payment Option Page ",
                  "timedOut": false,
                  "duration": 674,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getaPage.getPaymentOptionPage(global.access_Tokens1, global.idsgforppo)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:204:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "f58ca329-f645-48f8-a2ff-a1975c2f2c1a",
                  "parentUUID": "78e2cbb4-8e76-4b66-b610-36196c796b55",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f58ca329-f645-48f8-a2ff-a1975c2f2c1a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 674,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "90cef57e-948e-4886-a3cf-cb0113ab0dcb",
              "title": "Get Detail payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, idpo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist",
                  "err": {
                    "message": "ReferenceError: idpo is not defined",
                    "estack": "ReferenceError: idpo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:210:94)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "dac8b5b5-620c-488c-b384-2f681978e41d",
                  "parentUUID": "90cef57e-948e-4886-a3cf-cb0113ab0dcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 747,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite3_paymentService.js:222:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "2258d116-9f34-4003-b453-81ca78b1c402",
                  "parentUUID": "90cef57e-948e-4886-a3cf-cb0113ab0dcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "dac8b5b5-620c-488c-b384-2f681978e41d",
                "2258d116-9f34-4003-b453-81ca78b1c402"
              ],
              "pending": [],
              "skipped": [],
              "duration": 747,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "89644c2d-37f9-49a5-b2e5-b9cc5ce8a260",
              "title": "Update Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"EWALLET\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:227:190)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "4254aa87-ecdb-450c-aad6-0272f39949b2",
                  "parentUUID": "89644c2d-37f9-49a5-b2e5-b9cc5ce8a260",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"BANK_TRANSFER\", datas.Deductible.description, datas.paymentOption.fixfee , datas.paymentOption.name , 0 , id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:231:195)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "442f0a17-1553-4101-ac22-e27c6a4cc3b0",
                  "parentUUID": "89644c2d-37f9-49a5-b2e5-b9cc5ce8a260",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {
                    "message": "ReferenceError: idpo is not defined",
                    "estack": "ReferenceError: idpo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:235:214)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "33a6eeb3-ee16-4fd4-8154-e5f087772c67",
                  "parentUUID": "89644c2d-37f9-49a5-b2e5-b9cc5ce8a260",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input persen fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {
                    "message": "ReferenceError: idpo is not defined",
                    "estack": "ReferenceError: idpo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:240:243)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "d1dac767-b450-43af-aeb3-07a8ce6cab25",
                  "parentUUID": "89644c2d-37f9-49a5-b2e5-b9cc5ce8a260",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input fix fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:245:214)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "323994db-748c-4f63-97a3-219a7eaa7195",
                  "parentUUID": "89644c2d-37f9-49a5-b2e5-b9cc5ce8a260",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name , 0 , id1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:250:183)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "57b61ff0-95ed-4bd5-b269-4a5cf9354580",
                  "parentUUID": "89644c2d-37f9-49a5-b2e5-b9cc5ce8a260",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4254aa87-ecdb-450c-aad6-0272f39949b2",
                "442f0a17-1553-4101-ac22-e27c6a4cc3b0",
                "33a6eeb3-ee16-4fd4-8154-e5f087772c67",
                "d1dac767-b450-43af-aeb3-07a8ce6cab25",
                "323994db-748c-4f63-97a3-219a7eaa7195",
                "57b61ff0-95ed-4bd5-b269-4a5cf9354580"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "58d9f957-e14c-4b4e-9395-f7a17848f88c",
              "title": "Delete Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a68a4b17-3b4a-406c-96b9-aab3409a4469",
                  "parentUUID": "58d9f957-e14c-4b4e-9395-f7a17848f88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "47e941fa-81b5-4997-aa6d-71f7d7f227fa",
                  "parentUUID": "58d9f957-e14c-4b4e-9395-f7a17848f88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "064fa6e0-b50a-4fec-988d-1edbe038ce41",
                  "parentUUID": "58d9f957-e14c-4b4e-9395-f7a17848f88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "19b7316a-ffcc-4a5f-8112-0b77f1894d5f",
                  "parentUUID": "58d9f957-e14c-4b4e-9395-f7a17848f88c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "a68a4b17-3b4a-406c-96b9-aab3409a4469",
                "47e941fa-81b5-4997-aa6d-71f7d7f227fa",
                "064fa6e0-b50a-4fec-988d-1edbe038ce41",
                "19b7316a-ffcc-4a5f-8112-0b77f1894d5f"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "53ad03c7-993a-41df-936c-8ccc194a260b",
              "title": "Create Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 650,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.idpaoption, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nglobal.ppoid = res.body.data[0].id\nglobal.payment_option_id = res.body.data[0].payment_option_id\nglobal.service_group_id = res.body.data[0].service_group_id\n//console.log(\"ini ppoids : \"+global.ppoid);\n//console.log(\"ini payment_option_id : \"+global.payment_option_id);\n//console.log(\"ini service_group_id : \"+global.service_group_id);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:277:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "3e7c851e-e74c-4ad6-89af-cb9d40435451",
                  "parentUUID": "53ad03c7-993a-41df-936c-8ccc194a260b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 647,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.idpaoption1, global.serviceids1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nglobal.ppoid1 = res.body.data[0].id\nglobal.payment_option_id1 = res.body.data[0].payment_option_id\nglobal.service_group_id1 = res.body.data[0].service_group_id\n//console.log(\"ini ppoids : \"+global.ppoid);\n//console.log(\"ini payment_option_id : \"+global.payment_option_id);\n//console.log(\"ini service_group_id : \"+global.service_group_id);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:294:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "51d20edb-f4c6-40f2-8893-c0b3fa977a8b",
                  "parentUUID": "53ad03c7-993a-41df-936c-8ccc194a260b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input service group id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input service group id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "1dc2bdad-8ee1-4efe-822d-28ea96015e5e",
                  "parentUUID": "53ad03c7-993a-41df-936c-8ccc194a260b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 653,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, global.idsgforppo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite3_paymentService.js:317:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "2ae07c41-4449-4598-a50e-9027d47a4b5a",
                  "parentUUID": "53ad03c7-993a-41df-936c-8ccc194a260b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3e7c851e-e74c-4ad6-89af-cb9d40435451",
                "51d20edb-f4c6-40f2-8893-c0b3fa977a8b",
                "2ae07c41-4449-4598-a50e-9027d47a4b5a"
              ],
              "pending": [
                "1dc2bdad-8ee1-4efe-822d-28ea96015e5e"
              ],
              "skipped": [],
              "duration": 1950,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "86b3d865-35b8-4135-8521-c82cb23c7453",
              "title": "Get all Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 659,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPO.getProductPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nidppo0 = res.body.data[0].id\nidppo1 = res.body.data[1].id\nidppo2 = res.body.data[2].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:325:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "3b4b4a77-fa45-40c6-adbd-2ac14b017f2c",
                  "parentUUID": "86b3d865-35b8-4135-8521-c82cb23c7453",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3b4b4a77-fa45-40c6-adbd-2ac14b017f2c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 659,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a85b7dd7-dc0e-4edb-86e9-529117d8c42d",
              "title": "Get all Product Payment Option with Service Group Id",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 641,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nidppo = res.body.data[0].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:341:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "e5114d97-efc6-45d3-b62a-b25627df7c54",
                  "parentUUID": "a85b7dd7-dc0e-4edb-86e9-529117d8c42d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid sg id, then user got response error",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user input invalid sg id, then user got response error",
                  "timedOut": false,
                  "duration": 635,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:353:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "29cc6e0f-6338-43b1-8f56-773c9a79c1be",
                  "parentUUID": "a85b7dd7-dc0e-4edb-86e9-529117d8c42d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e5114d97-efc6-45d3-b62a-b25627df7c54",
                "29cc6e0f-6338-43b1-8f56-773c9a79c1be"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1276,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "044d7892-63ad-4565-820a-2bcdff564196",
              "title": "Get detail Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, idppo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {
                    "message": "ReferenceError: idppo is not defined",
                    "estack": "ReferenceError: idppo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:358:98)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "e0d07bbf-82ac-4926-8b77-be12408459a1",
                  "parentUUID": "044d7892-63ad-4565-820a-2bcdff564196",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 833,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite3_paymentService.js:370:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "a466b0ad-598d-402a-8e3f-abdab45ef5b5",
                  "parentUUID": "044d7892-63ad-4565-820a-2bcdff564196",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e0d07bbf-82ac-4926-8b77-be12408459a1",
                "a466b0ad-598d-402a-8e3f-abdab45ef5b5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 833,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "33e7c03e-ada1-4b2b-bee0-41d0f2e10341",
              "title": "Update Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 682,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, global.payment_option_id, global.service_group_id, global.ppoid)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:382:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "7374c76c-67bf-4b3c-89d3-d552ae1edb03",
                  "parentUUID": "33e7c03e-ada1-4b2b-bee0-41d0f2e10341",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 662,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.payment_option_id, global.service_group_id, global.ppoid)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:396:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "f5ebcab2-8743-4dd1-91d0-623989c4decd",
                  "parentUUID": "33e7c03e-ada1-4b2b-bee0-41d0f2e10341",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PPO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PPO id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, idpo, idsgforppo, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {
                    "message": "ReferenceError: idpo is not defined",
                    "estack": "ReferenceError: idpo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:406:243)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "44116146-8a4e-4de6-9e30-c8e4ec4bacce",
                  "parentUUID": "33e7c03e-ada1-4b2b-bee0-41d0f2e10341",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid SG id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid SG id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "95aabdd5-f484-4475-b065-2e42a9878d98",
                  "parentUUID": "33e7c03e-ada1-4b2b-bee0-41d0f2e10341",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PO id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, idsgforppo, idppo)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "ReferenceError: idsgforppo is not defined",
                    "estack": "ReferenceError: idsgforppo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:416:272)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "00de4087-a124-442c-8d72-8291dfe5da9b",
                  "parentUUID": "33e7c03e-ada1-4b2b-bee0-41d0f2e10341",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7374c76c-67bf-4b3c-89d3-d552ae1edb03",
                "f5ebcab2-8743-4dd1-91d0-623989c4decd",
                "44116146-8a4e-4de6-9e30-c8e4ec4bacce",
                "00de4087-a124-442c-8d72-8291dfe5da9b"
              ],
              "pending": [
                "95aabdd5-f484-4475-b065-2e42a9878d98"
              ],
              "skipped": [],
              "duration": 1344,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "b6a06652-c183-452f-b3ce-14e22a767fea",
              "title": "Delete Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9351f534-b0af-42e9-90e8-e42e095363b6",
                  "parentUUID": "b6a06652-c183-452f-b3ce-14e22a767fea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c6bfa3dd-6e81-43a2-aa9b-688ec9d91847",
                  "parentUUID": "b6a06652-c183-452f-b3ce-14e22a767fea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "555d9932-e8a3-444e-8b48-9b68b76a7a68",
                  "parentUUID": "b6a06652-c183-452f-b3ce-14e22a767fea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ae5dd825-016e-4a1a-8fc0-9c9ba7514198",
                  "parentUUID": "b6a06652-c183-452f-b3ce-14e22a767fea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "9351f534-b0af-42e9-90e8-e42e095363b6",
                "c6bfa3dd-6e81-43a2-aa9b-688ec9d91847",
                "555d9932-e8a3-444e-8b48-9b68b76a7a68",
                "ae5dd825-016e-4a1a-8fc0-9c9ba7514198"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "692429eb-ba42-4080-9683-7d691a9fd9f1",
          "title": "Purchase Service API",
          "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
          "file": "/test/suite4_purchase.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3f1bccc8-80f9-49ed-a9d7-9a2156ea9d56",
              "title": "Create Health Declaration",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create HD using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 651,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.true, global.serviceids, datas.purchase.type)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('type').to.equal('FIRST_TIME')\nassert(res.body.data[0]).to.have.property('status').to.equal('DRAFT_HEALTH_DECLARATION')\nassert(res.body.data[0].health_declaration_json).to.have.property('age').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('medical').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('job').exist\nglobal.idpurcahse = res.body.data[0].purchase_id\n//console.log(\"ini purchase id : \"+global.idpurcahse",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:21:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "45ba5ed6-5023-418c-9fc8-658b768ac044",
                  "parentUUID": "3f1bccc8-80f9-49ed-a9d7-9a2156ea9d56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 644,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.true, global.serviceids1, datas.purchase.type)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('type').to.equal('FIRST_TIME')\nassert(res.body.data[0]).to.have.property('status').to.equal('DRAFT_HEALTH_DECLARATION')\nassert(res.body.data[0].health_declaration_json).to.have.property('age').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('medical').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('job').exist\nglobal.idpurcahse1 = res.body.data[0].purchase_id\n//console.log(\"ini purchase id : \"+global.idpurcahse",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:41:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "310cfda8-c57b-4e09-9ae9-c44976ff3314",
                  "parentUUID": "3f1bccc8-80f9-49ed-a9d7-9a2156ea9d56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD with value age = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD with value age = false, then user got response error",
                  "timedOut": false,
                  "duration": 648,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.false, datas.purchase.job.true, datas.purchase.medical.true, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:58:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "8c660be9-bfec-4f00-a029-615934e3b203",
                  "parentUUID": "3f1bccc8-80f9-49ed-a9d7-9a2156ea9d56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD  with value job = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD  with value job = false, then user got response error",
                  "timedOut": false,
                  "duration": 662,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.false, datas.purchase.medical.true, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:62:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "43211972-0bf7-4942-805a-e2aeb18e7617",
                  "parentUUID": "3f1bccc8-80f9-49ed-a9d7-9a2156ea9d56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD  with value medical = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD  with value medical = false, then user got response error",
                  "timedOut": false,
                  "duration": 646,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.false, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:66:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "f4ef16a5-e7d8-463c-96cf-034beb8edb40",
                  "parentUUID": "3f1bccc8-80f9-49ed-a9d7-9a2156ea9d56",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "45ba5ed6-5023-418c-9fc8-658b768ac044",
                "310cfda8-c57b-4e09-9ae9-c44976ff3314",
                "8c660be9-bfec-4f00-a029-615934e3b203",
                "43211972-0bf7-4942-805a-e2aeb18e7617",
                "f4ef16a5-e7d8-463c-96cf-034beb8edb40"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3251,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "27ce6d4a-e263-4318-bbf7-b011fe2733bd",
              "title": "Create KYC",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create kyc using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 651,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:75:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "fdabd444-8393-4a5b-a07a-6c473421fe76",
                  "parentUUID": "27ce6d4a-e263-4318-bbf7-b011fe2733bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 652,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:89:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "a15efad8-3a5f-42ca-a148-356cf89647d7",
                  "parentUUID": "27ce6d4a-e263-4318-bbf7-b011fe2733bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using min dob(17th 180hr), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using min dob(17th 180hr), then user got response error",
                  "timedOut": false,
                  "duration": 634,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.minDobs, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Kamu harus berusia 18 - 55 tahun untuk jadi anggota\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:100:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "20609f0a-8baf-445b-aa33-5b3eba858c9e",
                  "parentUUID": "27ce6d4a-e263-4318-bbf7-b011fe2733bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using max dob(55th 181hr), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using max dob(55th 181hr), then user got response error",
                  "timedOut": false,
                  "duration": 644,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.maxDobs, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Kamu harus berusia 18 - 55 tahun untuk jadi anggota\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:105:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "5246a8dd-b8df-4788-97c6-cc710cdb9b56",
                  "parentUUID": "27ce6d4a-e263-4318-bbf7-b011fe2733bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using max dob(more than 16 digit), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using max dob(more than 16 digit), then user got response error",
                  "timedOut": false,
                  "duration": 667,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.valid_dob, datas.KYC.fullname, datas.KYC.max_ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:111:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "59c57fea-d470-459f-8334-d1ad5f7c488a",
                  "parentUUID": "27ce6d4a-e263-4318-bbf7-b011fe2733bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using min dob(less than 16 digit), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using min dob(less than 16 digit), then user got response error",
                  "timedOut": false,
                  "duration": 645,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.valid_dob, datas.KYC.fullname, datas.KYC.min_ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:116:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "efa2cf2e-a1b5-4fac-8a04-ceb67a1c5df1",
                  "parentUUID": "27ce6d4a-e263-4318-bbf7-b011fe2733bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "fdabd444-8393-4a5b-a07a-6c473421fe76",
                "a15efad8-3a5f-42ca-a148-356cf89647d7",
                "20609f0a-8baf-445b-aa33-5b3eba858c9e",
                "5246a8dd-b8df-4788-97c6-cc710cdb9b56",
                "59c57fea-d470-459f-8334-d1ad5f7c488a",
                "efa2cf2e-a1b5-4fac-8a04-ceb67a1c5df1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3893,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "93694dd1-1cf3-404e-9737-13c569f194f4",
              "title": "Create Beneficiary",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Beneficiary when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 674,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createbenef.createBeneficiary(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.benef.inform.true, datas.KYC.ktp, datas.KYC.phone, datas.benef.relation, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:126:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "c73b4ec1-bc4e-4a78-afe9-8a9d6c4385c1",
                  "parentUUID": "93694dd1-1cf3-404e-9737-13c569f194f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Beneficiary when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 765,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createbenef.createBeneficiary(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.benef.inform.true, datas.KYC.ktp, datas.KYC.phone, datas.benef.relation, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:140:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "efe5bc75-fb04-485f-8904-663f2f1fd502",
                  "parentUUID": "93694dd1-1cf3-404e-9737-13c569f194f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c73b4ec1-bc4e-4a78-afe9-8a9d6c4385c1",
                "efe5bc75-fb04-485f-8904-663f2f1fd502"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1439,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0bb11072-e9b4-4fbb-b51a-132b4bd3f171",
              "title": "Create Payment",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create payment using donation true, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation true, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 663,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, true, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('status').to.equal('PURCHASED')\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:156:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "13b94fe8-63ad-4aa7-9159-3e7c58733357",
                  "parentUUID": "0bb11072-e9b4-4fbb-b51a-132b4bd3f171",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create payment using donation true, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation true, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 664,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, true, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('status').to.equal('PURCHASED')\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:166:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "0fd455a5-dea0-4af1-ae74-97ccf19bb542",
                  "parentUUID": "0bb11072-e9b4-4fbb-b51a-132b4bd3f171",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create payment using donation False, then user got response error",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation False, then user got response error",
                  "timedOut": false,
                  "duration": 657,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, false, global.idpurcahse)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:173:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "9e9aa670-7b8f-4ef6-9cd1-fd6352603b50",
                  "parentUUID": "0bb11072-e9b4-4fbb-b51a-132b4bd3f171",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "13b94fe8-63ad-4aa7-9159-3e7c58733357",
                "0fd455a5-dea0-4af1-ae74-97ccf19bb542",
                "9e9aa670-7b8f-4ef6-9cd1-fd6352603b50"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1984,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "11a43c9d-6b6b-426f-a6f5-a309baf91d1c",
              "title": "Get Data Summary",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user get data api get summary using valid purchase id, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Get Data Summary when user get data api get summary using valid purchase id, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 642,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getSummary.getSummary(global.access_Tokens1, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('status').exist\nassert(res.body.data[0]).to.have.property('type').exist\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:182:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "891736c3-85d6-4f3c-9ce8-05ea5be0f1ce",
                  "parentUUID": "11a43c9d-6b6b-426f-a6f5-a309baf91d1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user get data api get summary using invalid purchase id, then user got response error",
                  "fullTitle": "Purchase Service API Get Data Summary when user get data api get summary using invalid purchase id, then user got response error",
                  "timedOut": false,
                  "duration": 652,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getSummary.getSummary(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:195:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "2f05f417-72f2-47e5-8bf4-876faf13b743",
                  "parentUUID": "11a43c9d-6b6b-426f-a6f5-a309baf91d1c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "891736c3-85d6-4f3c-9ce8-05ea5be0f1ce",
                "2f05f417-72f2-47e5-8bf4-876faf13b743"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1294,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "3ba76600-b76b-42e1-a016-402cfd9de108",
          "title": "API Calculation Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite5_calculation.js",
          "file": "/test/suite5_calculation.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5d1f9a83-4bfd-4b6c-8762-262111501647",
              "title": "Get Calculate Payment",
              "fullFile": "/home/runner/work/flash/flash/test/suite5_calculation.js",
              "file": "/test/suite5_calculation.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: calucated in \"Get Calculate Payment\"",
                  "fullTitle": "API Calculation Service Get Calculate Payment \"before all\" hook: calucated in \"Get Calculate Payment\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "persenfee = datas.paymentOption.persenfee / 100\nconsole.log(\"persenfee :\"+persenfee);\nfixfee = datas.paymentOption.fixfee\ntotalFeepersen = datas.calcu.contributeFee  * persenfee\ntotalFeefixfee = fixfee\ntotalpayment = datas.calcu.contributeFee + totalFeepersen\ntotalpayment1 = datas.calcu.contributeFee + totalFeefixfee",
                  "err": {},
                  "uuid": "015a0cb5-be0f-4953-a494-f93beebfc226",
                  "parentUUID": "5d1f9a83-4bfd-4b6c-8762-262111501647",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "fullTitle": "API Calculation Service Get Calculate Payment when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 722,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await calcu.calcu(global.access_Tokens1, datas.calcu.contributeFee, global.ppoid)\nif(res.status !== 200) {\n    console.log(\"failed  : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(totalFeefixfee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(totalpayment1)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.calcu.contributeFee)\n//console.log(res.text);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite5_calculation.js:25:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "2d890f26-1696-4be9-a326-16e987a45a6c",
                  "parentUUID": "5d1f9a83-4bfd-4b6c-8762-262111501647",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "fullTitle": "API Calculation Service Get Calculate Payment when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 644,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await calcu.calcu(global.access_Tokens1, datas.calcu.contributeFee, datas.calcu.ppoidpersen)\nif(res.status !== 200) {\n    console.log(\"failed  : \"+res.text);\n}\n//console.log(res.text);\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(totalFeepersen)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(totalpayment)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.calcu.contributeFee)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite5_calculation.js:42:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "8a558e18-69cb-4c2b-99b8-5effb4a570db",
                  "parentUUID": "5d1f9a83-4bfd-4b6c-8762-262111501647",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2d890f26-1696-4be9-a326-16e987a45a6c",
                "8a558e18-69cb-4c2b-99b8-5effb4a570db"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1366,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "dddf8d71-dead-4854-9497-7670781e8fb3",
          "title": "API Checkout Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite6_checkout.js",
          "file": "/test/suite6_checkout.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0868ea76-c3ae-4094-8fc3-fbf2f7c963d9",
              "title": "Checkout/Capture Purchase",
              "fullFile": "/home/runner/work/flash/flash/test/suite6_checkout.js",
              "file": "/test/suite6_checkout.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: calucated in \"Checkout/Capture Purchase\"",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase \"before all\" hook: calucated in \"Checkout/Capture Purchase\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "ujrah = datas.service_Group.ujrah / 100\nujrah1 = datas.service_Group.ujrah1 / 100\npersenfee = datas.paymentOption.persenfee / 100\npersen_total_fee = datas.contribution.contriFee * persenfee\nfixfee_total_fee = datas.paymentOption.fixfee\ntotal_ujrah = ujrah * datas.contribution.contriFee\ntotal_ujrah1 = ujrah1 * datas.contribution.contriFee\ntotal_tabaru = datas.contribution.contriFee - total_ujrah\ntotal_tabaru1 = datas.contribution.contriFee - total_ujrah1\nP_total_payment = datas.contribution.contriFee + persen_total_fee\nF_total_payment = datas.contribution.contriFee + fixfee_total_fee",
                  "err": {},
                  "uuid": "72369e84-48e5-4138-bb5f-22fec84f2030",
                  "parentUUID": "0868ea76-c3ae-4094-8fc3-fbf2f7c963d9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 684,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi, global.idpaoption, global.idpoc, global.idpurcahse, global.serviceids)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nconsole.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(datas.paymentOption.fixfee)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(fixfee_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(F_total_payment)\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"paid_at\")\nassert(res.body.data[0].actions[0]).to.have.property(\"name\").exist\nassert(res.body.data[0].actions[0]).to.have.property(\"method\").exist\nassert(res.body.data[0].actions[0]).to.have.property(\"url\").exist\nassert(res.body.data[0]).to.have.property(\"va_numbers\")\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite6_checkout.js:33:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "fa540753-599e-40cb-ae94-f596512d6fa2",
                  "parentUUID": "0868ea76-c3ae-4094-8fc3-fbf2f7c963d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "after(async function checkouts() {\n    this.timeout(5000); \n    const res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi1, global.idpaoption1, global.idpoc1, global.idpurcahse1, global.serviceids1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nconsole.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi1)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids1)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption1)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse1)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc1)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(datas.paymentOption.persenfee)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru1)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah1)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(persen_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(P_total_payment)\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"paid_at\")\nassert(res.body.data[0]).to.have.property(\"actions\")\nassert(res.body.data[0].va_numbers[0]).to.have.property(\"bank\").to.equal(global.bankname)\nassert(res.body.data[0].va_numbers[0]).to.have.property(\"va_number\").exist\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist\n\n\n\n\n});",
                  "err": {},
                  "uuid": "26fc911a-5321-4f3e-8ab8-e74c46e5feec",
                  "parentUUID": "0868ea76-c3ae-4094-8fc3-fbf2f7c963d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26fc911a-5321-4f3e-8ab8-e74c46e5feec"
              ],
              "failures": [
                "fa540753-599e-40cb-ae94-f596512d6fa2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 685,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-06-22-2022",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "test-06-22-2022"
      },
      "version": "6.2.0"
    }
  }
}