{
  "stats": {
    "suites": 45,
    "tests": 104,
    "passes": 103,
    "pending": 1,
    "failures": 0,
    "start": "2022-06-01T08:30:43.074Z",
    "end": "2022-06-01T08:32:08.151Z",
    "duration": 85077,
    "testsRegistered": 104,
    "passPercent": 100,
    "pendingPercent": 0.9615384615384616,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8180167c-1d4d-4e8f-9b4b-408b8c6b457a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1246c3a7-7685-4003-b293-5f5cbd3ea1b3",
          "title": "Exchange Token API",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: pre_request in \"Exchange Token API\"",
              "fullTitle": "Exchange Token API \"before all\" hook: pre_request in \"Exchange Token API\"",
              "timedOut": false,
              "duration": 2215,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "username = ['ario16@gmail.com', 'ario10@gmail.com']\ntoken1 = []\ntoken2 = []\nfor (const user in username) {\n    const rd = await wong.wongAccount(username[user])\n    console.log('Status Code wong :', rd.status);\n    if (username[user] == `ario16@gmail.com`) {\n        const res = rd.body.data[0].token\n        token1.push(res)\n        global.token1 = token1\n    } else {\n        const res = rd.body.data[0].token\n        token2.push(res)\n        global.token2 = token2\n    }\n}",
              "err": {},
              "uuid": "31103e0a-fdb1-40dd-b234-a1ec250b092d",
              "parentUUID": "1246c3a7-7685-4003-b293-5f5cbd3ea1b3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "when user input valid token then user got response 200",
              "fullTitle": "Exchange Token API when user input valid token then user got response 200",
              "timedOut": false,
              "duration": 1652,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "tokens = [global.token1, global.token2]\ntokens1 = []\ntokens2 = []\nfor (const x in tokens) {\n    const res = await exchange_token.exchangeTokenAccount(tokens[x]);\n    if (tokens[x] == global.token1) {\n        const res1 = res.body.data[0].access_token\n        tokens1.push(res1)\n        global.access_Tokens1 = tokens1\n    } else {\n        const res2 = res.body.data[0].access_token\n        tokens2.push(res2)\n        global.access_Tokens2 = tokens2\n    }\n    assert(res.status).to.equal(200);\n    assert(res.body.data[0]).to.have.property('access_token')\n    assert(res.body.data[0]).to.have.property('refresh_token')\n    assert(res.body.data[0]).to.have.property('expires_in')\n    \n}",
              "err": {},
              "uuid": "6ff3a6da-89fc-46fc-9f01-9e5bdb232990",
              "parentUUID": "1246c3a7-7685-4003-b293-5f5cbd3ea1b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when user input wrong token, then user got response error",
              "fullTitle": "Exchange Token API when user input wrong token, then user got response error",
              "timedOut": false,
              "duration": 1093,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1bXhfUFZiQ3lTV2o5SG5MRHJ0bEJ3X1BLTnlFcVJtWTNpQ3BSMTBlMFpvIn0.eyJleHAiOjE2NTI4OTEwNTEsImlhdCI6MTY1Mjg1NTA1MSwianRpIjoiYmMwMzhiZWUtYzNhNi00YjYxLTlkZjMtYmQ3NjExZWQwMTI0IiwiaXNzIjoiaHR0cDovL2tleWNsb2FrLnN0Zy5rdC5qZy9hdXRoL3JlYWxtcy9raXRhamFnYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNTY5ZjM5NS1iZWUxLTQxMzItOWYzZS1lZDM3ODAyMzY2ODMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrb25nIiwic2Vzc2lvbl9zdGF0ZSI6ImYwZWU1YzI3LTliODYtNDg1Mi1iYmE2LTI1M2ZkN2RlZDFkMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1raXRhamFnYSIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiJmMGVlNWMyNy05Yjg2LTQ4NTItYmJhNi0yNTNmZDdkZWQxZDAiLCJraXRhYmlzYV91c2VyX2lkIjoiNSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiS2l0YWphZ2EgVGVzdCBBamEiLCJraXRhYmlzYV9zZWNvbmRhcnlfaWQiOiI1NDk0ZTg3ODQ2MTJjMWY1ZDNhODI4ZjAyYWNkNzRmNSIsInBob25lX251bWJlciI6IjYyODEyMzQ1Njc4OTAiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJraXRhamFnYS10ZXN0QGtpdGFqYWdhLmlkIiwiZ2l2ZW5fbmFtZSI6IktpdGFqYWdhIiwiZmFtaWx5X')\nassert(res.status).to.equal(502)",
              "err": {},
              "uuid": "c4b944b9-2697-4f79-8680-3e92fb9156cb",
              "parentUUID": "1246c3a7-7685-4003-b293-5f5cbd3ea1b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when user input empty token, then user got response error",
              "fullTitle": "Exchange Token API when user input empty token, then user got response error",
              "timedOut": false,
              "duration": 744,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('')\nassert(res.status).to.equal(401)",
              "err": {},
              "uuid": "7713e2d1-4701-4d03-be1c-1678dbad562b",
              "parentUUID": "1246c3a7-7685-4003-b293-5f5cbd3ea1b3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6ff3a6da-89fc-46fc-9f01-9e5bdb232990",
            "c4b944b9-2697-4f79-8680-3e92fb9156cb",
            "7713e2d1-4701-4d03-be1c-1678dbad562b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3489,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "7b8cf503-9a9e-4e6d-a235-08d79c137a5e",
          "title": "Get user info",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": false,
              "duration": 753,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)",
              "err": {},
              "uuid": "5dbf5af0-efa9-4e77-8524-a46048e51bc8",
              "parentUUID": "7b8cf503-9a9e-4e6d-a235-08d79c137a5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": false,
              "duration": 750,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens2)\nassert(res.status).to.equal(404)",
              "err": {},
              "uuid": "7bc1c9c0-2310-4aca-a9e1-2431cce816df",
              "parentUUID": "7b8cf503-9a9e-4e6d-a235-08d79c137a5e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5dbf5af0-efa9-4e77-8524-a46048e51bc8",
            "7bc1c9c0-2310-4aca-a9e1-2431cce816df"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1503,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "742d1e17-9f92-4959-a71c-14f2cedd1f74",
          "title": "API Service Group",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b2f3e82e-313b-4477-b470-e6a41e2a7319",
              "title": "Create Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 726,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.ids = res.body.data[0].id\nglobal.names = res.body.data[0].name\nglobal.desc = res.body.data[0].description\nglobal.codes = res.body.data[0].code\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "8612b6df-3384-4d93-9a40-cdb28b9d51ce",
                  "parentUUID": "b2f3e82e-313b-4477-b470-e6a41e2a7319",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input existing data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input existing data, then user got response error",
                  "timedOut": false,
                  "duration": 738,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', 'Alda', 'this is triger from automation tools')\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "7ddbceff-2df3-4982-b6d6-c39465cf27aa",
                  "parentUUID": "b2f3e82e-313b-4477-b470-e6a41e2a7319",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 741,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', datas.service_Group.name, datas.service_Group.description)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "354d3667-1036-4255-be21-a7abf80c9bf1",
                  "parentUUID": "b2f3e82e-313b-4477-b470-e6a41e2a7319",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8612b6df-3384-4d93-9a40-cdb28b9d51ce",
                "7ddbceff-2df3-4982-b6d6-c39465cf27aa",
                "354d3667-1036-4255-be21-a7abf80c9bf1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2205,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "6b415cd6-561f-4762-b5b1-6d98940711a4",
              "title": "Get All Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Service Group when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1489,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll.getallServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ids1 = res.body.data[1].id\nids2 = res.body.data[2].id\nglobal.idsgforppo = res.body.data[3].id\nglobal.names1 = res.body.data[1].name\nglobal.desc1 = res.body.data[1].description\nglobal.codes1 = res.body.data[1].code",
                  "err": {},
                  "uuid": "c290b94e-c689-45c9-966a-dbe3c8325462",
                  "parentUUID": "6b415cd6-561f-4762-b5b1-6d98940711a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c290b94e-c689-45c9-966a-dbe3c8325462"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1489,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "49257020-4d5e-4b77-b3af-2d873b88da16",
              "title": "Get All Public Service Group ",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Public Service Group  when user hit api get all public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 709,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAllpublic.getallpublicServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "b5fbd2af-52c4-4bb7-ae8b-f482a640eacd",
                  "parentUUID": "49257020-4d5e-4b77-b3af-2d873b88da16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5fbd2af-52c4-4bb7-ae8b-f482a640eacd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 709,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "f4817327-73a6-4df3-aabd-1fa748e78316",
              "title": "Get Detail Public Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 706,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, global.ids)\nif(res.status !==200){\n    console.log(\"getdetailpublic data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "e86953d7-a73e-4777-99af-af122299d529",
                  "parentUUID": "f4817327-73a6-4df3-aabd-1fa748e78316",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail public with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 762,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {},
                  "uuid": "cbb578e2-1f2c-477c-97a8-85190d95fc7b",
                  "parentUUID": "f4817327-73a6-4df3-aabd-1fa748e78316",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e86953d7-a73e-4777-99af-af122299d529",
                "cbb578e2-1f2c-477c-97a8-85190d95fc7b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1468,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "22e19256-f0d6-46e1-bd5c-c7e1915e5f32",
              "title": "Get Detail Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 710,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, global.ids)\nif(res.status !==200){\n    console.log(\"getdetail data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "324d0f75-0b2f-43a2-8f43-201591905f29",
                  "parentUUID": "22e19256-f0d6-46e1-bd5c-c7e1915e5f32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 721,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {},
                  "uuid": "3819d785-a922-49b5-9a36-74d69a23ff54",
                  "parentUUID": "22e19256-f0d6-46e1-bd5c-c7e1915e5f32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "324d0f75-0b2f-43a2-8f43-201591905f29",
                "3819d785-a922-49b5-9a36-74d69a23ff54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1431,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ad6c9215-1384-42b4-8252-5590f4bc7bd0",
              "title": "Update Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 723,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.ids, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "2fe35f49-b09d-48e6-9338-fd50c49d1e8a",
                  "parentUUID": "ad6c9215-1384-42b4-8252-5590f4bc7bd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different code and same description and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different code and same description and same name then user got response 200",
                  "timedOut": false,
                  "duration": 738,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.ids, datas.service_Group.code, global.names, global.desc)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "3bac0547-67f9-4d7f-aea1-34fd523732e7",
                  "parentUUID": "ad6c9215-1384-42b4-8252-5590f4bc7bd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different name and same code then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different name and same code then user got response 200",
                  "timedOut": false,
                  "duration": 748,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.ids, global.codes, datas.service_Group.name, global.desc)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "29b4f3db-37d0-4f86-9dc8-40a6ee35a965",
                  "parentUUID": "ad6c9215-1384-42b4-8252-5590f4bc7bd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different description and same code and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different description and same code and same name then user got response 200",
                  "timedOut": false,
                  "duration": 726,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.ids, global.codes, global.names, datas.service_Group.description)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "ae27db73-8ee3-4700-84ad-5dfeb9f314c1",
                  "parentUUID": "ad6c9215-1384-42b4-8252-5590f4bc7bd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input same data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input same data, then user got response error",
                  "timedOut": false,
                  "duration": 709,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.ids, global.codes1, global.names1, global.desc1)   \nassert(res.status).to.equal(500)",
                  "err": {},
                  "uuid": "61519aee-8b0d-4419-a946-5dfd4dd3c4a4",
                  "parentUUID": "ad6c9215-1384-42b4-8252-5590f4bc7bd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 720,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.ids1, global.codes, datas.service_Group.name, datas.service_Group.description)   \nassert(res.status).to.equal(500)",
                  "err": {},
                  "uuid": "528d55da-6e26-40c5-a149-5ef6eb403703",
                  "parentUUID": "ad6c9215-1384-42b4-8252-5590f4bc7bd0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fe35f49-b09d-48e6-9338-fd50c49d1e8a",
                "3bac0547-67f9-4d7f-aea1-34fd523732e7",
                "29b4f3db-37d0-4f86-9dc8-40a6ee35a965",
                "ae27db73-8ee3-4700-84ad-5dfeb9f314c1",
                "61519aee-8b0d-4419-a946-5dfd4dd3c4a4",
                "528d55da-6e26-40c5-a149-5ef6eb403703"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4364,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d2dc7834-b0a1-4b0f-a8de-aaec2793a479",
              "title": "Delete data Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 729,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await deleted.deleteServiceGroup(global.access_Tokens1, global.ids)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "a80f4f3a-5d11-4af2-87c9-619aa3c5e007",
                  "parentUUID": "d2dc7834-b0a1-4b0f-a8de-aaec2793a479",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 712,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await deleted.deleteServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)",
                  "err": {},
                  "uuid": "7fb72c0d-96e5-4089-b46e-192507741f38",
                  "parentUUID": "d2dc7834-b0a1-4b0f-a8de-aaec2793a479",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a80f4f3a-5d11-4af2-87c9-619aa3c5e007",
                "7fb72c0d-96e5-4089-b46e-192507741f38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1441,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "d8775d86-30cd-4cd4-8f33-d473d9ac9945",
          "title": "API Extension Clause",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "94747349-eba8-4f52-ac4c-e6c62257d660",
              "title": "Create ExtensionClause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Create ExtensionClause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 707,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_create.createExtensionClause(global.access_Tokens1, datas.Extension_clause.code, datas.service_Group.name, datas.service_Group.description, global.codes)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.ids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(true)\nglobal.ECids = res.body.data[0].id",
                  "err": {},
                  "uuid": "f82aac29-89d9-4e44-807e-85c225c45dd8",
                  "parentUUID": "94747349-eba8-4f52-ac4c-e6c62257d660",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f82aac29-89d9-4e44-807e-85c225c45dd8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 707,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "66963273-09a0-4615-9b1d-2d613b0cfcd1",
              "title": "Get all data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Extension Clause when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 2835,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getall.getallExtensionClause(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ECids1 = res.body.data[1].id\nglobal.ECserviceCode1 = res.body.data[1].service_group_code\nglobal.code1 = res.body.data[1].code\nglobal.name1 = res.body.data[1].name\nglobal.code2 = res.body.data[0].code\nglobal.name2 = res.body.data[0].name\nglobal.ECserviceCode2 = res.body.data[0].service_group_code\nglobal.desc2 = res.body.data[0].description",
                  "err": {},
                  "uuid": "7a85999b-5d40-43b1-960a-1dd5bcc4a02c",
                  "parentUUID": "66963273-09a0-4615-9b1d-2d613b0cfcd1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a85999b-5d40-43b1-960a-1dd5bcc4a02c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2835,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "92a5f0dc-73fb-496f-b651-b83334799ba8",
              "title": "Delete data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 718,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Delete.deleteExtensionClause(global.access_Tokens1, global.ECids)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "1b6fa8b9-3fcf-4702-a8d0-68c1e25c7969",
                  "parentUUID": "92a5f0dc-73fb-496f-b651-b83334799ba8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 715,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Delete.deleteExtensionClause(global.access_Tokens1, datas.Extension_clause.wrongid)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc.id).to.equal('Product Extension Clause ID Tidak Ditemukan')",
                  "err": {},
                  "uuid": "8c709438-f871-4373-ad1e-47d4ef855d35",
                  "parentUUID": "92a5f0dc-73fb-496f-b651-b83334799ba8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b6fa8b9-3fcf-4702-a8d0-68c1e25c7969",
                "8c709438-f871-4373-ad1e-47d4ef855d35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1433,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0c6b305a-0f8b-458c-8f9a-e95235814811",
              "title": "Get Detail Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 748,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, global.ECids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").to.equal(global.ECids)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.ids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(false)",
                  "err": {},
                  "uuid": "2b58a792-c6dd-42a0-81f0-b856c738826e",
                  "parentUUID": "0c6b305a-0f8b-458c-8f9a-e95235814811",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 717,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, datas.Extension_clause.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc.id).to.equal('error data tidak ditemukan')",
                  "err": {},
                  "uuid": "4dd6fb64-bea6-4eaf-b5fc-a4701a71b3bd",
                  "parentUUID": "0c6b305a-0f8b-458c-8f9a-e95235814811",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b58a792-c6dd-42a0-81f0-b856c738826e",
                "4dd6fb64-bea6-4eaf-b5fc-a4701a71b3bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1465,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "3281a7f0-571d-46c6-abed-2f245a2aa9a2",
              "title": "update data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause update data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 745,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Update.updateExtensionClause(global.access_Tokens1, global.ECids, global.code1, global.name1, datas.Extension_clause.description, global.ECserviceCode1)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "dadee6c8-d4cd-422d-8d6c-d9900f1f97ed",
                  "parentUUID": "3281a7f0-571d-46c6-abed-2f245a2aa9a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dadee6c8-d4cd-422d-8d6c-d9900f1f97ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 745,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "6bc6f6af-5cfb-4c50-9acd-8f26cc8381de",
              "title": "Search data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 1169,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name1)\nif(res.status !== 200){\n    console.log(\"error search EC\" +res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "1a123484-b821-47b6-aa4d-ef6a23049601",
                  "parentUUID": "6bc6f6af-5cfb-4c50-9acd-8f26cc8381de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid service group, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using invalid service group, then user got response error",
                  "timedOut": false,
                  "duration": 707,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, datas.Extension_clause.invalid_service_group_code, global.code1, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Product Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "ee91daac-3846-4535-a9a3-fe77d25e7967",
                  "parentUUID": "6bc6f6af-5cfb-4c50-9acd-8f26cc8381de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_code and with same service group and same name, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_code and with same service group and same name, then user got response error",
                  "timedOut": false,
                  "duration": 709,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code2, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Product Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "e418921c-d37c-462e-8bd8-fe0a83900a86",
                  "parentUUID": "6bc6f6af-5cfb-4c50-9acd-8f26cc8381de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_name and with same service group and same code, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_name and with same service group and same code, then user got response error",
                  "timedOut": false,
                  "duration": 715,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name2)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Product Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "51740c57-8e8e-41d2-9e63-53b4021070c1",
                  "parentUUID": "6bc6f6af-5cfb-4c50-9acd-8f26cc8381de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a123484-b821-47b6-aa4d-ef6a23049601",
                "ee91daac-3846-4535-a9a3-fe77d25e7967",
                "e418921c-d37c-462e-8bd8-fe0a83900a86",
                "51740c57-8e8e-41d2-9e63-53b4021070c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3300,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "3a097303-7b83-46ce-affd-ad54793ec39a",
              "title": "Create Deductible API",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Deductible API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 714,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ids = res.body.data[0].id",
                  "err": {},
                  "uuid": "54dd06a5-de56-4677-8812-377a401621c0",
                  "parentUUID": "3a097303-7b83-46ce-affd-ad54793ec39a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong service group, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong service group, then user got response error",
                  "timedOut": false,
                  "duration": 724,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, datas.Deductible.service_code, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Service Group Code Tidak Ditemukan\")",
                  "err": {},
                  "uuid": "850a552e-3b5f-424f-9e9d-c4db17a83061",
                  "parentUUID": "3a097303-7b83-46ce-affd-ad54793ec39a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong calculate method, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong calculate method, then user got response error",
                  "timedOut": false,
                  "duration": 709,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {},
                  "uuid": "dd317fa6-2ffb-4142-a118-6fb24da07aad",
                  "parentUUID": "3a097303-7b83-46ce-affd-ad54793ec39a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input deduction value with string, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input deduction value with string, then user got response error",
                  "timedOut": false,
                  "duration": 708,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {},
                  "uuid": "b1ef0eb7-cab1-408e-9659-8c7249489518",
                  "parentUUID": "3a097303-7b83-46ce-affd-ad54793ec39a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54dd06a5-de56-4677-8812-377a401621c0",
                "850a552e-3b5f-424f-9e9d-c4db17a83061",
                "dd317fa6-2ffb-4142-a118-6fb24da07aad",
                "b1ef0eb7-cab1-408e-9659-8c7249489518"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2855,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "17e7a157-3394-4a4f-8e56-ff58ee01e577",
              "title": "Get all Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all Deduction when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1749,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getall.getDeductible(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "0b76489f-fad3-4b7c-a6a5-1d6db17ae5dd",
                  "parentUUID": "17e7a157-3394-4a4f-8e56-ff58ee01e577",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b76489f-fad3-4b7c-a6a5-1d6db17ae5dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1749,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "437c4e93-29db-403d-8059-570350d4e306",
              "title": "Get Detail Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 724,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(global.ids, global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "922be052-07d6-4fbb-8d8a-04730f38f338",
                  "parentUUID": "437c4e93-29db-403d-8059-570350d4e306",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 718,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(datas.Deductible.wrong_idDeduc, global.access_Tokens1)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {},
                  "uuid": "be73e4c3-4ceb-4ff7-b917-cec0534e0560",
                  "parentUUID": "437c4e93-29db-403d-8059-570350d4e306",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "922be052-07d6-4fbb-8d8a-04730f38f338",
                "be73e4c3-4ceb-4ff7-b917-cec0534e0560"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1442,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1afd9ae1-a347-4bdf-896d-9e015c24451f",
              "title": "Update Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 734,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.ids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method1, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "b0d91b68-4d5a-4ecd-80d9-ec2ed6d42f04",
                  "parentUUID": "1afd9ae1-a347-4bdf-896d-9e015c24451f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid Deduction id, then user got response error",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input data using invalid Deduction id, then user got response error",
                  "timedOut": false,
                  "duration": 703,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, datas.Deductible.wrong_idDeduc, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Deductible ID Tidak Ditemukan\")",
                  "err": {},
                  "uuid": "e82425b2-afe3-4b91-b516-8f85a9e58747",
                  "parentUUID": "1afd9ae1-a347-4bdf-896d-9e015c24451f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu Method then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu Method then user got response 200",
                  "timedOut": false,
                  "duration": 726,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.ids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {},
                  "uuid": "7655c1ed-b825-44b3-9112-7781d2388161",
                  "parentUUID": "1afd9ae1-a347-4bdf-896d-9e015c24451f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu value with string, then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu value with string, then user got response 200",
                  "timedOut": false,
                  "duration": 711,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.ids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {},
                  "uuid": "8c82f2bb-48e7-47b9-9422-591e06ec9ea3",
                  "parentUUID": "1afd9ae1-a347-4bdf-896d-9e015c24451f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0d91b68-4d5a-4ecd-80d9-ec2ed6d42f04",
                "e82425b2-afe3-4b91-b516-8f85a9e58747",
                "7655c1ed-b825-44b3-9112-7781d2388161",
                "8c82f2bb-48e7-47b9-9422-591e06ec9ea3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2874,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e265eb4d-114a-406c-86a0-200a9e22d178",
              "title": "Search Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 716,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Search.searchDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "6ef67c03-aee4-4836-b501-2fb28286c958",
                  "parentUUID": "e265eb4d-114a-406c-86a0-200a9e22d178",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ef67c03-aee4-4836-b501-2fb28286c958"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 716,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e61b3539-a19e-4d23-9e5f-d99988b8eb15",
              "title": "Deleted Deduction APi",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 725,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Delete.deleteDeductible(global.ids, global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "50c3b086-0ce8-4c0a-9527-99ac2ee0e4d5",
                  "parentUUID": "e61b3539-a19e-4d23-9e5f-d99988b8eb15",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 719,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Delete.deleteDeductible(datas.Deductible.wrong_idDeduc, global.access_Tokens1)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "ac25a394-e9ee-4f1b-a4ef-d43fce0df4e7",
                  "parentUUID": "e61b3539-a19e-4d23-9e5f-d99988b8eb15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50c3b086-0ce8-4c0a-9527-99ac2ee0e4d5",
                "ac25a394-e9ee-4f1b-a4ef-d43fce0df4e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1444,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "2366402a-cf63-4552-8d7a-a4bea0526536",
              "title": "Create Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 728,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, ids2, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {},
                  "uuid": "b944dfb5-3571-4bc3-88c0-545c9650ab23",
                  "parentUUID": "2366402a-cf63-4552-8d7a-a4bea0526536",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 713,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, ids2, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "8eabde0e-2030-448d-8157-911098e91de4",
                  "parentUUID": "2366402a-cf63-4552-8d7a-a4bea0526536",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": false,
                  "duration": 714,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, ids2, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "00bca7bb-9320-4e3f-97ef-fd9803647af2",
                  "parentUUID": "2366402a-cf63-4552-8d7a-a4bea0526536",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 708,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, ids2, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "c421c202-7d6f-4106-a335-eb23783eb348",
                  "parentUUID": "2366402a-cf63-4552-8d7a-a4bea0526536",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b944dfb5-3571-4bc3-88c0-545c9650ab23",
                "8eabde0e-2030-448d-8157-911098e91de4",
                "00bca7bb-9320-4e3f-97ef-fd9803647af2",
                "c421c202-7d6f-4106-a335-eb23783eb348"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2863,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e6bb2232-adce-4f8c-a684-a412fb6caa90",
              "title": "Get all data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Product Contribution when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 728,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getall.getContribution(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\ncontriId = res.body.data[0].id",
                  "err": {},
                  "uuid": "1e804f5a-cc77-4160-b094-7a7c5d28adb2",
                  "parentUUID": "e6bb2232-adce-4f8c-a684-a412fb6caa90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e804f5a-cc77-4160-b094-7a7c5d28adb2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 728,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "491a3198-561a-40fd-b325-960277181eb0",
              "title": "Get detail Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 711,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, ids2)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {},
                  "uuid": "d9244d0c-d875-4e94-afe9-94ee0d6873a9",
                  "parentUUID": "491a3198-561a-40fd-b325-960277181eb0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 730,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {},
                  "uuid": "278d2ad5-e1b0-4eb2-9a93-f91c30b54d0d",
                  "parentUUID": "491a3198-561a-40fd-b325-960277181eb0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9244d0c-d875-4e94-afe9-94ee0d6873a9",
                "278d2ad5-e1b0-4eb2-9a93-f91c30b54d0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1441,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "3199149a-1fae-4fdb-bec5-3f91511c9c44",
              "title": "Update data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 724,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Update.updateContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.contribution.isPopular.false, datas.paymentOption.name, datas.productpaymentOption.oder_opt, ids2, datas.contribution.strikeFee, contriId)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {},
                  "uuid": "ab2f7aaa-808e-4487-a9bf-180bc7cf0327",
                  "parentUUID": "3199149a-1fae-4fdb-bec5-3f91511c9c44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 712,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, ids2, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "84dadad7-0689-40c1-a97d-dbaf80f4fc25",
                  "parentUUID": "3199149a-1fae-4fdb-bec5-3f91511c9c44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": false,
                  "duration": 717,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, ids2, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "9e582ce2-9fb2-4f2f-8468-9974a0ac1df3",
                  "parentUUID": "3199149a-1fae-4fdb-bec5-3f91511c9c44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 722,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, ids2, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "e3935882-2f1a-4836-976a-473fc0bbab24",
                  "parentUUID": "3199149a-1fae-4fdb-bec5-3f91511c9c44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab2f7aaa-808e-4487-a9bf-180bc7cf0327",
                "84dadad7-0689-40c1-a97d-dbaf80f4fc25",
                "9e582ce2-9fb2-4f2f-8468-9974a0ac1df3",
                "e3935882-2f1a-4836-976a-473fc0bbab24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2875,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "8added48-3594-4fff-8184-d199ad9198d7",
              "title": "Delete Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 717,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Delete.deleteContribution(global.access_Tokens1, contriId)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "80f20b8e-ff3b-44ef-a2cf-172b9c912830",
                  "parentUUID": "8added48-3594-4fff-8184-d199ad9198d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 715,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Delete.deleteContribution(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "f125db6c-07f3-416c-933c-2dbe7150f70c",
                  "parentUUID": "8added48-3594-4fff-8184-d199ad9198d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80f20b8e-ff3b-44ef-a2cf-172b9c912830",
                "f125db6c-07f3-416c-933c-2dbe7150f70c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1432,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "731d6cfb-cfd1-4d29-88e6-f83058410058",
          "title": "Payment Api Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
          "file": "/test/suite3_paymentService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0017ba52-225a-4bd1-9544-738e497281d4",
              "title": "Create Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Provider when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 730,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Provider.createPaymentProvider(global.access_Tokens1, datas.paymentProvider.callback_url, datas.paymentProvider.code, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"callback_url\").to.equal(datas.paymentProvider.callback_url)",
                  "err": {},
                  "uuid": "d27c8598-61c4-435e-8551-f38096a713ff",
                  "parentUUID": "0017ba52-225a-4bd1-9544-738e497281d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d27c8598-61c4-435e-8551-f38096a713ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 730,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "21e12c0a-f6df-4ac3-b70c-107e13b9c5e4",
              "title": "Get all Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Payment Provider when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 715,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Provider.getPaymentProvider(global.access_Tokens1)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"callback_url\")\nids = res.body.data[0].id\nid1 = res.body.data[1].id\nconsole.log(ids);",
                  "err": {},
                  "uuid": "fbcd2cb5-40bc-49f3-b271-e8526adeeff0",
                  "parentUUID": "21e12c0a-f6df-4ac3-b70c-107e13b9c5e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbcd2cb5-40bc-49f3-b271-e8526adeeff0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 715,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "37946a94-e4c3-4f27-90f3-8c29b85422d3",
              "title": "Get detail payment provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 745,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, ids)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "33fd590d-006a-413c-a54d-b2f7e586218c",
                  "parentUUID": "37946a94-e4c3-4f27-90f3-8c29b85422d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 699,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID)\nassert(res.status).to.equal(500)",
                  "err": {},
                  "uuid": "01cd4841-738e-4613-aec2-c5f479d523ad",
                  "parentUUID": "37946a94-e4c3-4f27-90f3-8c29b85422d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33fd590d-006a-413c-a54d-b2f7e586218c",
                "01cd4841-738e-4613-aec2-c5f479d523ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1444,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5566c8bb-d7c7-44d5-b07d-c0c2808e8a24",
              "title": "Update Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 730,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, ids, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"Failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "fbf70ce6-d991-4c76-9cd2-8a25f0585774",
                  "parentUUID": "5566c8bb-d7c7-44d5-b07d-c0c2808e8a24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 714,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID, datas.paymentProvider.callback_url, datas.paymentProvider.wrongCode, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "fb89c73b-176a-4a38-97ae-f7b73895cebf",
                  "parentUUID": "5566c8bb-d7c7-44d5-b07d-c0c2808e8a24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using existing code, then user got response error",
                  "timedOut": false,
                  "duration": 705,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "e7978f93-46d4-4a23-a55c-d1b176a99219",
                  "parentUUID": "5566c8bb-d7c7-44d5-b07d-c0c2808e8a24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid authorization, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid authorization, then user got response error",
                  "timedOut": false,
                  "duration": 710,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(datas.paymentProvider.invalid_auth, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(401)",
                  "err": {},
                  "uuid": "f25b6c3d-7397-439b-8d0a-55f39fce97d7",
                  "parentUUID": "5566c8bb-d7c7-44d5-b07d-c0c2808e8a24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbf70ce6-d991-4c76-9cd2-8a25f0585774",
                "fb89c73b-176a-4a38-97ae-f7b73895cebf",
                "e7978f93-46d4-4a23-a55c-d1b176a99219",
                "f25b6c3d-7397-439b-8d0a-55f39fce97d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2859,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7fe38a7c-7720-4104-909d-3e1d5af5a6d5",
              "title": "Delete payment Provider API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 724,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_Provider.deletePaymentProvider(global.access_Tokens1, ids, datas.paymentProvider.type_soft)\nif(res.status !== 200){\nconsole.log(\"failed : \"+res.text);\n}\nconsole.log(ids);\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "7d1f1996-87bd-4593-87d2-a08cf612d224",
                  "parentUUID": "7fe38a7c-7720-4104-909d-3e1d5af5a6d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 722,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_Provider.deletePaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID)\nassert(res.status).to.equal(400)\n//console.log(global.access_Tokens1);",
                  "err": {},
                  "uuid": "dd0dcb73-94ca-4e17-b922-2d8c40afc313",
                  "parentUUID": "7fe38a7c-7720-4104-909d-3e1d5af5a6d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 712,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_Provider.deletePaymentProvider(global.access_Tokens1, ids, datas.paymentProvider.type_invalid)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {},
                  "uuid": "f81af5f1-f6e5-49e7-b476-6fd597b6824c",
                  "parentUUID": "7fe38a7c-7720-4104-909d-3e1d5af5a6d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d1f1996-87bd-4593-87d2-a08cf612d224",
                "dd0dcb73-94ca-4e17-b922-2d8c40afc313",
                "f81af5f1-f6e5-49e7-b476-6fd597b6824c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2158,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c7cbcd8b-4a7e-4ebd-893f-14345fc18a8c",
              "title": "Create Payment Option API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 2863,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const category =  [\"VA\", \"BANK_TRANSFER\", \"EWALLET\", \"CREDITCARD\"]\nfor (let x in category) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, category[x], datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"provider_id\")\nassert(res.body.data[0]).to.have.property(\"percentage_fee\")\nassert(res.body.data[0]).to.have.property(\"fixed_fee\")\nassert(res.body.data[0]).to.have.property(\"category\").to.equal(category[x])         \n}",
                  "err": {},
                  "uuid": "0e5fb8ea-dd8d-4c6a-ada5-d6515db94d7f",
                  "parentUUID": "c7cbcd8b-4a7e-4ebd-893f-14345fc18a8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong category, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input wrong category, then user got response error",
                  "timedOut": false,
                  "duration": 725,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, datas.paymentOption.wrong_category, datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"kategori tidak valid\")",
                  "err": {},
                  "uuid": "54322d75-36e4-41dc-8a95-256feb6bf48e",
                  "parentUUID": "c7cbcd8b-4a7e-4ebd-893f-14345fc18a8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input provider id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input provider id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 703,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {},
                  "uuid": "b66a7872-900b-4d46-91f3-90296d7a125e",
                  "parentUUID": "c7cbcd8b-4a7e-4ebd-893f-14345fc18a8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input persen fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 712,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "bb126a33-f214-4020-819f-ad7f03b481fe",
                  "parentUUID": "c7cbcd8b-4a7e-4ebd-893f-14345fc18a8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input fix fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 721,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "ce938ab6-5191-460e-bb77-1b107e5c3ed4",
                  "parentUUID": "c7cbcd8b-4a7e-4ebd-893f-14345fc18a8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e5fb8ea-dd8d-4c6a-ada5-d6515db94d7f",
                "54322d75-36e4-41dc-8a95-256feb6bf48e",
                "b66a7872-900b-4d46-91f3-90296d7a125e",
                "bb126a33-f214-4020-819f-ad7f03b481fe",
                "ce938ab6-5191-460e-bb77-1b107e5c3ed4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5724,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "88cd076d-5e1e-4ff2-a9ff-4e9a10f3ad11",
              "title": "Get all payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all payment option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1264,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Option.getPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"provider_id\")\nassert(res.body.data[0]).to.have.property(\"percentage_fee\")\nassert(res.body.data[0]).to.have.property(\"fixed_fee\")\nassert(res.body.data[0]).to.have.property(\"category\")\nidpo = res.body.data[0].id\nidpo1 = res.body.data[1].id\nidpo2 = res.body.data[2].id\nidpo3 = res.body.data[3].id",
                  "err": {},
                  "uuid": "f74acbe6-d18e-46da-a459-e5842acf294b",
                  "parentUUID": "88cd076d-5e1e-4ff2-a9ff-4e9a10f3ad11",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f74acbe6-d18e-46da-a459-e5842acf294b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1264,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "eb40ebcf-a477-4c94-a12d-278fe4d03a48",
              "title": "Get Detail payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 714,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, idpo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"provider_id\")\nassert(res.body.data[0]).to.have.property(\"percentage_fee\")\nassert(res.body.data[0]).to.have.property(\"fixed_fee\")\nassert(res.body.data[0]).to.have.property(\"category\")",
                  "err": {},
                  "uuid": "31bdf464-93a8-4fb9-a55e-497466a2d92b",
                  "parentUUID": "eb40ebcf-a477-4c94-a12d-278fe4d03a48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 721,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)",
                  "err": {},
                  "uuid": "6189c35f-4d1c-4878-a1a2-864bb0719d98",
                  "parentUUID": "eb40ebcf-a477-4c94-a12d-278fe4d03a48",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31bdf464-93a8-4fb9-a55e-497466a2d92b",
                "6189c35f-4d1c-4878-a1a2-864bb0719d98"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1435,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c7845687-8876-403d-b1b1-321d0b5f0cec",
              "title": "Update Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 711,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"EWALLET\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "cd30e467-751d-4a50-9852-53837d37d41b",
                  "parentUUID": "c7845687-8876-403d-b1b1-321d0b5f0cec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 718,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {},
                  "uuid": "cd0f4f37-1186-4b56-af25-b61eb150fbc8",
                  "parentUUID": "c7845687-8876-403d-b1b1-321d0b5f0cec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input persen fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 716,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "e25da4ab-1472-4c02-8e0e-f386c559cf4f",
                  "parentUUID": "c7845687-8876-403d-b1b1-321d0b5f0cec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input fix fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 711,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "e91c4f33-50fe-43ee-92ff-53cab203b92b",
                  "parentUUID": "c7845687-8876-403d-b1b1-321d0b5f0cec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 704,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {},
                  "uuid": "c76fe20e-2c91-4eea-b3eb-ad34703e2486",
                  "parentUUID": "c7845687-8876-403d-b1b1-321d0b5f0cec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd30e467-751d-4a50-9852-53837d37d41b",
                "cd0f4f37-1186-4b56-af25-b61eb150fbc8",
                "e25da4ab-1472-4c02-8e0e-f386c559cf4f",
                "e91c4f33-50fe-43ee-92ff-53cab203b92b",
                "c76fe20e-2c91-4eea-b3eb-ad34703e2486"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3560,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "47d09bb2-8d75-4ea5-bb81-627b6127023c",
              "title": "Delete Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 710,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_Option.deletePaymentOption(global.access_Tokens1, idpo, \"soft_delete\")\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "5c06d378-6083-4290-b827-afb6780c7f5e",
                  "parentUUID": "47d09bb2-8d75-4ea5-bb81-627b6127023c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 715,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_Option.deletePaymentOption(global.access_Tokens1, idpo1, \"hard_delete\")\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "fc90c46b-50b6-4120-acd3-943b14049f63",
                  "parentUUID": "47d09bb2-8d75-4ea5-bb81-627b6127023c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 716,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_Option.deletePaymentOption(global.access_Tokens1, datas.paymentOption.wrongID, \"hard_delete\")\nassert(res.status).to.equal(404)",
                  "err": {},
                  "uuid": "f5d033f7-b8a2-415c-a177-047020f47d72",
                  "parentUUID": "47d09bb2-8d75-4ea5-bb81-627b6127023c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 722,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_Option.deletePaymentOption(global.access_Tokens1, idpo2, \"hards_delete\")\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "0d614fea-2b1a-486c-b9b1-78d571efbbfa",
                  "parentUUID": "47d09bb2-8d75-4ea5-bb81-627b6127023c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c06d378-6083-4290-b827-afb6780c7f5e",
                "fc90c46b-50b6-4120-acd3-943b14049f63",
                "f5d033f7-b8a2-415c-a177-047020f47d72",
                "0d614fea-2b1a-486c-b9b1-78d571efbbfa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2863,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5334cb4d-a358-4d80-adbd-3795a4542037",
              "title": "Create Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 733,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, idpo3, global.idsgforppo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"payment_option_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nconsole.log(idpo3);",
                  "err": {},
                  "uuid": "285ec28c-cce2-47b7-8300-02fc8d170caf",
                  "parentUUID": "5334cb4d-a358-4d80-adbd-3795a4542037",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input service group id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input service group id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f63def47-7e5e-4817-b395-69551b2e5e79",
                  "parentUUID": "5334cb4d-a358-4d80-adbd-3795a4542037",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 716,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, global.idsgforppo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\")",
                  "err": {},
                  "uuid": "a2fe03f3-b67d-4f27-9d64-6851149e52e8",
                  "parentUUID": "5334cb4d-a358-4d80-adbd-3795a4542037",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "285ec28c-cce2-47b7-8300-02fc8d170caf",
                "a2fe03f3-b67d-4f27-9d64-6851149e52e8"
              ],
              "failures": [],
              "pending": [
                "f63def47-7e5e-4817-b395-69551b2e5e79"
              ],
              "skipped": [],
              "duration": 1449,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "99ef9d6f-e72b-42d7-897b-79aeb176fa50",
              "title": "Get all Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 949,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPO.getProductPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"payment_option_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")",
                  "err": {},
                  "uuid": "20564576-4a07-40e7-9a67-5b9b5b2e59fe",
                  "parentUUID": "99ef9d6f-e72b-42d7-897b-79aeb176fa50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20564576-4a07-40e7-9a67-5b9b5b2e59fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 949,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "78fc147d-37a0-4006-98df-6f86001a778b",
              "title": "Get all Product Payment Option with Service Group Id",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 718,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, global.idsgforppo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"payment_option_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nidppo = res.body.data[0].id\nconsole.log(idppo);",
                  "err": {},
                  "uuid": "cba02eed-51d4-40b8-baf7-de5839b8b177",
                  "parentUUID": "78fc147d-37a0-4006-98df-6f86001a778b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid sg id, then user got response error",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user input invalid sg id, then user got response error",
                  "timedOut": false,
                  "duration": 709,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "246eb127-4dbf-4497-a8ab-89e5716a24aa",
                  "parentUUID": "78fc147d-37a0-4006-98df-6f86001a778b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cba02eed-51d4-40b8-baf7-de5839b8b177",
                "246eb127-4dbf-4497-a8ab-89e5716a24aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1427,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "673ee7f9-2f3b-4661-970b-e956922c4ae3",
              "title": "Get detail Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 709,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, idppo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"payment_option_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")",
                  "err": {},
                  "uuid": "0585a6ad-a858-4c2c-bbeb-1fc5127273fe",
                  "parentUUID": "673ee7f9-2f3b-4661-970b-e956922c4ae3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 717,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {},
                  "uuid": "b95577bf-bfa2-4713-a030-ca6a5e9cffd2",
                  "parentUUID": "673ee7f9-2f3b-4661-970b-e956922c4ae3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0585a6ad-a858-4c2c-bbeb-1fc5127273fe",
                "b95577bf-bfa2-4713-a030-ca6a5e9cffd2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1426,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0201e7d5-dbbd-46fa-aa84-eec2fe6aa4f1",
              "title": "Update Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 718,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, idpo3, idsgforppo, idppo)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"payment_option_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")",
                  "err": {},
                  "uuid": "0ce58de2-e54b-4a0f-9c5c-1bf7dda15afd",
                  "parentUUID": "0201e7d5-dbbd-46fa-aa84-eec2fe6aa4f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PPO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PPO id, then user got response error",
                  "timedOut": false,
                  "duration": 725,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, idpo3, idsgforppo, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {},
                  "uuid": "049ca8bb-5f3e-4dfd-938f-f12b402bc9f1",
                  "parentUUID": "0201e7d5-dbbd-46fa-aa84-eec2fe6aa4f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid SG id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid SG id, then user got response error",
                  "timedOut": false,
                  "duration": 726,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, idpo3, datas.service_Group.wrongid, idppo)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "89db655c-ec7a-439d-ab01-cdefb2b13c03",
                  "parentUUID": "0201e7d5-dbbd-46fa-aa84-eec2fe6aa4f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PO id, then user got response error",
                  "timedOut": false,
                  "duration": 711,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, idsgforppo, idppo)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "f22921c0-5e88-4d5e-9716-f06f5150aace",
                  "parentUUID": "0201e7d5-dbbd-46fa-aa84-eec2fe6aa4f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ce58de2-e54b-4a0f-9c5c-1bf7dda15afd",
                "049ca8bb-5f3e-4dfd-938f-f12b402bc9f1",
                "89db655c-ec7a-439d-ab01-cdefb2b13c03",
                "f22921c0-5e88-4d5e-9716-f06f5150aace"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2880,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "9de14b69-efaa-48bb-af70-9b8f52fe29de",
              "title": "Delete Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 720,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_PPO.deleteProductPaymentOption(global.access_Tokens1, idppo, \"soft_delete\")\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "0943b899-545b-488c-b622-c3078fc27a04",
                  "parentUUID": "9de14b69-efaa-48bb-af70-9b8f52fe29de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 717,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_PPO.deleteProductPaymentOption(global.access_Tokens1, idppo, \"hard_delete\")\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "948af1aa-2919-425e-b43f-48e6638dff2f",
                  "parentUUID": "9de14b69-efaa-48bb-af70-9b8f52fe29de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 722,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_PPO.deleteProductPaymentOption(global.access_Tokens1, datas.productpaymentOption.wrongID, \"hard_delete\")\nassert(res.status).to.equal(404)",
                  "err": {},
                  "uuid": "2f6b72f7-282b-4c69-9265-a57e054cf3d1",
                  "parentUUID": "9de14b69-efaa-48bb-af70-9b8f52fe29de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 709,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await delete_PPO.deleteProductPaymentOption(global.access_Tokens1, idppo, \"hard_deletes\")\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "2c936d5e-7ff0-4a6a-8993-1dd01bbf33cb",
                  "parentUUID": "9de14b69-efaa-48bb-af70-9b8f52fe29de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0943b899-545b-488c-b622-c3078fc27a04",
                "948af1aa-2919-425e-b43f-48e6638dff2f",
                "2f6b72f7-282b-4c69-9265-a57e054cf3d1",
                "2c936d5e-7ff0-4a6a-8993-1dd01bbf33cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2868,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-06-01-2022",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "test-06-01-2022"
      },
      "version": "6.2.0"
    }
  }
}