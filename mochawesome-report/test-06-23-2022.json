{
  "stats": {
    "suites": 56,
    "tests": 130,
    "passes": 1,
    "pending": 21,
    "failures": 108,
    "start": "2022-06-23T06:44:23.883Z",
    "end": "2022-06-23T06:45:32.902Z",
    "duration": 69019,
    "testsRegistered": 133,
    "passPercent": 0.8928571428571428,
    "pendingPercent": 15.789473684210526,
    "other": 2,
    "hasOther": true,
    "skipped": 3,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "b2522263-5f3f-46f8-a328-86e043dac264",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after all\" hook: checkouts in \"{root}\"",
          "fullTitle": "\"after all\" hook: checkouts in \"{root}\"",
          "timedOut": false,
          "duration": 803,
          "state": "failed",
          "speed": null,
          "pass": false,
          "fail": true,
          "pending": false,
          "context": null,
          "code": "this.timeout(5000); \nconst res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi1, global.idpaoption1, global.idpoc1, global.idpurcahse1, global.serviceids1)\n            if(res.status !== 200){\nconsole.log(\"failed : \"+res.text);\n            }\n            assert(res.status).to.equal(200)\n            console.log(res.text);\n            assert(res.body.data[0]).to.have.property(\"id\").exist\n            assert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi1)\n            assert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids1)\n            assert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption1)\n            assert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse1)\n            assert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc1)\n            assert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(datas.paymentOption.persenfee)\n            assert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(0)\n            assert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\n            assert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru1)\n            assert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah1)\n            assert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(persen_total_fee)\n            assert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(P_total_payment)\n            assert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\n            assert(res.body.data[0]).to.have.property(\"status\").exist\n            assert(res.body.data[0]).to.have.property(\"paid_at\")\n            assert(res.body.data[0]).to.have.property(\"actions\")\n            assert(res.body.data[0].va_numbers[0]).to.have.property(\"bank\").to.equal(global.bankname)\n            assert(res.body.data[0].va_numbers[0]).to.have.property(\"va_number\").exist\n            assert(res.body.data[0]).to.have.property(\"expired_at\").exist",
          "err": {
            "message": "AssertionError: expected 401 to equal 200",
            "estack": "AssertionError: expected 401 to equal 200\n    at Context.checkouts (test/suite6_checkout.js:66:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
            "diff": "- 401\n+ 200\n"
          },
          "uuid": "4bce1bfe-0317-47a6-a3b5-a8f3a312c2dc",
          "parentUUID": "b2522263-5f3f-46f8-a328-86e043dac264",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "53f5f44f-dba3-41e7-b363-a76946111ce3",
          "title": "Exchange Token API",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: pre_request for \"when user input valid token then user got response 200\"",
              "fullTitle": "Exchange Token API \"before all\" hook: pre_request for \"when user input valid token then user got response 200\"",
              "timedOut": false,
              "duration": 2148,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "username = ['ario16@gmail.com', 'ario10@gmail.com']\ntoken1 = []\ntoken2 = []\nfor (const user in username) {\n    const rd = await wong.wongAccount(username[user])\n    console.log('Status Code wong :', rd.status);\n    if (username[user] == `ario16@gmail.com`) {\n        const res = rd.body.data[0].token\n        token1.push(res)\n        global.token1 = token1\n    } else {\n        const res = rd.body.data[0].token\n        token2.push(res)\n        global.token2 = token2\n    }\n}\nconsole.log(rd.text);",
              "err": {
                "message": "ReferenceError: rd is not defined",
                "estack": "ReferenceError: rd is not defined\n    at Context.pre_request (test/suite1_accountService.js:24:21)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": null
              },
              "uuid": "b04be027-7a2a-4a91-aa07-574fc0a01476",
              "parentUUID": "53f5f44f-dba3-41e7-b363-a76946111ce3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "when user input valid token then user got response 200",
              "fullTitle": "Exchange Token API when user input valid token then user got response 200",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "tokens = [global.token1, global.token2]\ntokens1 = []\ntokens2 = []\nfor (const x in tokens) {\n    res = await exchange_token.exchangeTokenAccount(tokens[x]);\n    if (tokens[x] == global.token1) {\n        const res1 = res.body.data[0].access_token\n        tokens1.push(res1)\n        global.access_Tokens1 = tokens1\n    } else {\n        const res2 = res.body.data[0].access_token\n        tokens2.push(res2)\n        global.access_Tokens2 = tokens2\n    }\n    assert(res.status).to.equal(200);\n    assert(res.body.data[0]).to.have.property('access_token')\n    assert(res.body.data[0]).to.have.property('refresh_token')\n    assert(res.body.data[0]).to.have.property('expires_in')\n    \n}\nconsole.log(global.access_Tokens1);\nconsole.log(\"failed : \"+res1.text);",
              "err": {},
              "uuid": "b0a79d85-50d4-416b-91f7-329468a8cb3c",
              "parentUUID": "53f5f44f-dba3-41e7-b363-a76946111ce3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "when user input wrong token, then user got response error",
              "fullTitle": "Exchange Token API when user input wrong token, then user got response error",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1bXhfUFZiQ3lTV2o5SG5MRHJ0bEJ3X1BLTnlFcVJtWTNpQ3BSMTBlMFpvIn0.eyJleHAiOjE2NTI4OTEwNTEsImlhdCI6MTY1Mjg1NTA1MSwianRpIjoiYmMwMzhiZWUtYzNhNi00YjYxLTlkZjMtYmQ3NjExZWQwMTI0IiwiaXNzIjoiaHR0cDovL2tleWNsb2FrLnN0Zy5rdC5qZy9hdXRoL3JlYWxtcy9raXRhamFnYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNTY5ZjM5NS1iZWUxLTQxMzItOWYzZS1lZDM3ODAyMzY2ODMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrb25nIiwic2Vzc2lvbl9zdGF0ZSI6ImYwZWU1YzI3LTliODYtNDg1Mi1iYmE2LTI1M2ZkN2RlZDFkMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1raXRhamFnYSIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiJmMGVlNWMyNy05Yjg2LTQ4NTItYmJhNi0yNTNmZDdkZWQxZDAiLCJraXRhYmlzYV91c2VyX2lkIjoiNSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiS2l0YWphZ2EgVGVzdCBBamEiLCJraXRhYmlzYV9zZWNvbmRhcnlfaWQiOiI1NDk0ZTg3ODQ2MTJjMWY1ZDNhODI4ZjAyYWNkNzRmNSIsInBob25lX251bWJlciI6IjYyODEyMzQ1Njc4OTAiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJraXRhamFnYS10ZXN0QGtpdGFqYWdhLmlkIiwiZ2l2ZW5fbmFtZSI6IktpdGFqYWdhIiwiZmFtaWx5X')\nassert(res.status).to.equal(502)",
              "err": {},
              "uuid": "ac778fa4-e973-407d-bb68-344aff097990",
              "parentUUID": "53f5f44f-dba3-41e7-b363-a76946111ce3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "when user input empty token, then user got response error",
              "fullTitle": "Exchange Token API when user input empty token, then user got response error",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('')\nassert(res.status).to.equal(401)",
              "err": {},
              "uuid": "42affca6-0b7e-4051-b574-5ec336228f6b",
              "parentUUID": "53f5f44f-dba3-41e7-b363-a76946111ce3",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b0a79d85-50d4-416b-91f7-329468a8cb3c",
            "ac778fa4-e973-407d-bb68-344aff097990",
            "42affca6-0b7e-4051-b574-5ec336228f6b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "6ae01f51-1e38-4d52-8f5a-eadeec98850f",
          "title": "Get user info",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": false,
              "duration": 768,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)",
              "err": {
                "message": "AssertionError: expected 401 to equal 200",
                "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite1_accountService.js:69:31)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 401\n+ 200\n"
              },
              "uuid": "0f9b26d7-65e5-48c3-bbf4-b377dfc1326f",
              "parentUUID": "6ae01f51-1e38-4d52-8f5a-eadeec98850f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": false,
              "duration": 814,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens2)\nassert(res.status).to.equal(404)",
              "err": {
                "message": "AssertionError: expected 401 to equal 404",
                "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite1_accountService.js:73:31)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 401\n+ 404\n"
              },
              "uuid": "da3bca24-931e-41ab-92a9-112e06c04648",
              "parentUUID": "6ae01f51-1e38-4d52-8f5a-eadeec98850f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0f9b26d7-65e5-48c3-bbf4-b377dfc1326f",
            "da3bca24-931e-41ab-92a9-112e06c04648"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1582,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "62eb3fe4-16be-44b9-ba90-34917c6b899b",
          "title": "API Service Group",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "87d57b55-3e5f-4208-8378-2c00f6a9b757",
              "title": "Create Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 741,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.serviceids = res.body.data[0].id\nglobal.names = res.body.data[0].name\nglobal.desc = res.body.data[0].description\nglobal.codes = res.body.data[0].code\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\n//console.log(\"ini id sg : \"+global.serviceids);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:61:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "48b63a6b-4991-4fe3-85fd-66a5885380d9",
                  "parentUUID": "87d57b55-3e5f-4208-8378-2c00f6a9b757",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 739,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code1, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah1)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.serviceids1 = res.body.data[0].id\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nconsole.log(\"ini id sg : \"+global.serviceids1);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:78:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "5a0c7a41-e8da-4033-a242-6c82b4a2b110",
                  "parentUUID": "87d57b55-3e5f-4208-8378-2c00f6a9b757",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input existing data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input existing data, then user got response error",
                  "timedOut": false,
                  "duration": 759,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', 'Alda', 'this is triger from automation tools', datas.service_Group.ujrah)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:89:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "9d7b143c-cfc9-45a6-9177-4a3a910b9f0d",
                  "parentUUID": "87d57b55-3e5f-4208-8378-2c00f6a9b757",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 748,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:94:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "6038e17c-e116-4e30-a0bc-370e2d32ca29",
                  "parentUUID": "87d57b55-3e5f-4208-8378-2c00f6a9b757",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "48b63a6b-4991-4fe3-85fd-66a5885380d9",
                "5a0c7a41-e8da-4033-a242-6c82b4a2b110",
                "9d7b143c-cfc9-45a6-9177-4a3a910b9f0d",
                "6038e17c-e116-4e30-a0bc-370e2d32ca29"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2987,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "8bac8fa0-c9f6-4070-9e3b-44ada98ea643",
              "title": "Get All Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Service Group when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 774,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll.getallServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ids1 = res.body.data[1].id\nids2 = res.body.data[2].id\nglobal.idsgforppo = res.body.data[3].id\nglobal.idsgpuchase = res.body.data[4].id\nglobal.names1 = res.body.data[1].name\nglobal.desc1 = res.body.data[1].description\nglobal.codes1 = res.body.data[1].code",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:103:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "40a1a473-b8c7-4902-a640-cb56122620d6",
                  "parentUUID": "8bac8fa0-c9f6-4070-9e3b-44ada98ea643",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "40a1a473-b8c7-4902-a640-cb56122620d6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 774,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a2b75deb-9840-44e0-82ed-ba40dc61e4ce",
              "title": "Get All Public Service Group ",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Public Service Group  when user hit api get all public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 767,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAllpublic.getallpublicServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:125:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "48bbb1a4-7181-48e7-bdce-cad1b88270ac",
                  "parentUUID": "a2b75deb-9840-44e0-82ed-ba40dc61e4ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "48bbb1a4-7181-48e7-bdce-cad1b88270ac"
              ],
              "pending": [],
              "skipped": [],
              "duration": 767,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c4b46214-f967-4770-97cb-a92522e09f72",
              "title": "Get Detail Public Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 822,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, global.serviceids)\nif(res.status !==200){\n    console.log(\"getdetailpublic data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:139:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "e96d42fc-96bc-406e-80ca-cc921c924ed5",
                  "parentUUID": "c4b46214-f967-4770-97cb-a92522e09f72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail public with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 752,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite2_productService.js:148:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "0a541458-123d-46ad-978a-1b3bdefadc06",
                  "parentUUID": "c4b46214-f967-4770-97cb-a92522e09f72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e96d42fc-96bc-406e-80ca-cc921c924ed5",
                "0a541458-123d-46ad-978a-1b3bdefadc06"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1574,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "56a07cd5-70e1-44bb-a855-52b6ef1337e2",
              "title": "Get Detail Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 746,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, global.serviceids)\nif(res.status !==200){\n    console.log(\"getdetail data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:159:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "28736a46-12fd-4b6d-a83c-b0b7f320bcdf",
                  "parentUUID": "56a07cd5-70e1-44bb-a855-52b6ef1337e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 750,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite2_productService.js:168:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "c2e93a76-c71f-4913-b995-139107ca0de2",
                  "parentUUID": "56a07cd5-70e1-44bb-a855-52b6ef1337e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "28736a46-12fd-4b6d-a83c-b0b7f320bcdf",
                "c2e93a76-c71f-4913-b995-139107ca0de2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1496,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7fd77f70-6f01-4e76-ac6c-df1081295e2c",
              "title": "Update Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 816,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:179:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "dbb99a02-7fe5-42c6-8bcb-093c77604281",
                  "parentUUID": "7fd77f70-6f01-4e76-ac6c-df1081295e2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different code and same description and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different code and same description and same name then user got response 200",
                  "timedOut": false,
                  "duration": 723,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, datas.service_Group.code, global.names, global.desc, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:191:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "98cac00d-db98-4a65-85c5-1014015ccf34",
                  "parentUUID": "7fd77f70-6f01-4e76-ac6c-df1081295e2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different name and same code then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different name and same code then user got response 200",
                  "timedOut": false,
                  "duration": 721,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes, datas.service_Group.name, global.desc, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:203:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "87243c56-a80a-4d3f-b7db-81835c5c1ebf",
                  "parentUUID": "7fd77f70-6f01-4e76-ac6c-df1081295e2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different description and same code and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different description and same code and same name then user got response 200",
                  "timedOut": false,
                  "duration": 741,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes, global.names, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:215:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "d6742465-51de-47ae-ad5b-22c7c77480d6",
                  "parentUUID": "7fd77f70-6f01-4e76-ac6c-df1081295e2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input same data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input same data, then user got response error",
                  "timedOut": false,
                  "duration": 733,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes1, global.names1, global.desc1, datas.service_Group.ujrah)   \nassert(res.status).to.equal(500)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 500",
                    "estack": "AssertionError: expected 401 to equal 500\n    at Context.<anonymous> (test/suite2_productService.js:224:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 500\n"
                  },
                  "uuid": "74c8a0e7-08fa-4fca-ba78-7a791c9dbd34",
                  "parentUUID": "7fd77f70-6f01-4e76-ac6c-df1081295e2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 707,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.ids1, global.codes, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nassert(res.status).to.equal(500)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 500",
                    "estack": "AssertionError: expected 401 to equal 500\n    at Context.<anonymous> (test/suite2_productService.js:228:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 500\n"
                  },
                  "uuid": "bbd1f53c-c057-4c8e-b46a-eb5b727c3d71",
                  "parentUUID": "7fd77f70-6f01-4e76-ac6c-df1081295e2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "dbb99a02-7fe5-42c6-8bcb-093c77604281",
                "98cac00d-db98-4a65-85c5-1014015ccf34",
                "87243c56-a80a-4d3f-b7db-81835c5c1ebf",
                "d6742465-51de-47ae-ad5b-22c7c77480d6",
                "74c8a0e7-08fa-4fca-ba78-7a791c9dbd34",
                "bbd1f53c-c057-4c8e-b46a-eb5b727c3d71"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4441,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7c1af94d-dc9f-4bf6-91e1-46eebc6d5353",
              "title": "Delete data Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d8dec3bd-96fc-4e80-82ae-3a35ce5af67b",
                  "parentUUID": "7c1af94d-dc9f-4bf6-91e1-46eebc6d5353",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c3cb6522-8e58-4543-998b-4340a3c50c06",
                  "parentUUID": "7c1af94d-dc9f-4bf6-91e1-46eebc6d5353",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "d8dec3bd-96fc-4e80-82ae-3a35ce5af67b",
                "c3cb6522-8e58-4543-998b-4340a3c50c06"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "2261de45-fcbc-4f2a-9eb8-e4de2580fe16",
          "title": "API Extension Clause",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1d8e975a-1359-48bb-8513-4e4394b43f69",
              "title": "Create ExtensionClause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Create ExtensionClause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 773,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_create.createExtensionClause(global.access_Tokens1, datas.Extension_clause.code, datas.service_Group.name, datas.service_Group.description, global.codes)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(true)\nglobal.ECids = res.body.data[0].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:251:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "f956077d-772c-46d6-8d42-ccef76a2c51a",
                  "parentUUID": "1d8e975a-1359-48bb-8513-4e4394b43f69",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f956077d-772c-46d6-8d42-ccef76a2c51a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 773,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "4f02f6c3-b9f4-43b2-98f3-d8f55611c407",
              "title": "Get all data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Extension Clause when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 728,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getall.getallExtensionClause(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ECids1 = res.body.data[1].id\nglobal.ECserviceCode1 = res.body.data[1].service_group_code\nglobal.code1 = res.body.data[1].code\nglobal.name1 = res.body.data[1].name\nglobal.code2 = res.body.data[0].code\nglobal.name2 = res.body.data[0].name\nglobal.ECserviceCode2 = res.body.data[0].service_group_code\nglobal.desc2 = res.body.data[0].description",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:265:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "83e4d98f-b14e-4590-94bf-706f1a4bf33d",
                  "parentUUID": "4f02f6c3-b9f4-43b2-98f3-d8f55611c407",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "83e4d98f-b14e-4590-94bf-706f1a4bf33d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 728,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d1ccd94d-ac39-4ba0-a00e-e21d45fe7d4f",
              "title": "Delete data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "52e71b03-358b-45fe-98a0-3d6f04c9c8cc",
                  "parentUUID": "d1ccd94d-ac39-4ba0-a00e-e21d45fe7d4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "6faadcaf-a883-47c6-a4c4-760da4485f10",
                  "parentUUID": "d1ccd94d-ac39-4ba0-a00e-e21d45fe7d4f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "52e71b03-358b-45fe-98a0-3d6f04c9c8cc",
                "6faadcaf-a883-47c6-a4c4-760da4485f10"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "dd856d06-44d5-4407-b7a7-e3cff5663865",
              "title": "Get Detail Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 799,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, global.ECids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").to.equal(global.ECids)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(false)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:297:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "3da579b5-e95f-41a2-a75b-8eecbef91cba",
                  "parentUUID": "dd856d06-44d5-4407-b7a7-e3cff5663865",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 926,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, datas.Extension_clause.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc.id).to.equal('error data tidak ditemukan')",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite2_productService.js:308:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "8b861fde-6887-4d08-953c-1c6bdb34bb71",
                  "parentUUID": "dd856d06-44d5-4407-b7a7-e3cff5663865",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3da579b5-e95f-41a2-a75b-8eecbef91cba",
                "8b861fde-6887-4d08-953c-1c6bdb34bb71"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1725,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "63f661e6-70b3-48cd-b7c8-d74c7dd067cc",
              "title": "update data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause update data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 770,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Update.updateExtensionClause(global.access_Tokens1, global.ECids, global.code1, global.name1, datas.Extension_clause.description, global.ECserviceCode1)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:315:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "db71807e-e6be-4b82-afe8-d323f1a1d94a",
                  "parentUUID": "63f661e6-70b3-48cd-b7c8-d74c7dd067cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "db71807e-e6be-4b82-afe8-d323f1a1d94a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 770,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a17e65c3-b934-47d4-b64d-e17e2db8e47d",
              "title": "Search data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 710,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name1)\nif(res.status !== 200){\n    console.log(\"error search EC\" +res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:326:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "299950d9-dbae-4dbf-853d-daaf7051ce32",
                  "parentUUID": "a17e65c3-b934-47d4-b64d-e17e2db8e47d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid service group, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using invalid service group, then user got response error",
                  "timedOut": false,
                  "duration": 714,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, datas.Extension_clause.invalid_service_group_code, global.code1, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Product Search Extension Clause Data Tidak Ditemukan')",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:337:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "0df2fe48-8c34-4030-af40-0830c4798726",
                  "parentUUID": "a17e65c3-b934-47d4-b64d-e17e2db8e47d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_code and with same service group and same name, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_code and with same service group and same name, then user got response error",
                  "timedOut": false,
                  "duration": 759,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code2, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Product Search Extension Clause Data Tidak Ditemukan')",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:342:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "c6b52610-88e3-40a5-9913-ea297e73777f",
                  "parentUUID": "a17e65c3-b934-47d4-b64d-e17e2db8e47d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_name and with same service group and same code, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_name and with same service group and same code, then user got response error",
                  "timedOut": false,
                  "duration": 730,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name2)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Product Search Extension Clause Data Tidak Ditemukan')",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:347:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "eca69bef-7163-4674-96c2-170e062813a8",
                  "parentUUID": "a17e65c3-b934-47d4-b64d-e17e2db8e47d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "299950d9-dbae-4dbf-853d-daaf7051ce32",
                "0df2fe48-8c34-4030-af40-0830c4798726",
                "c6b52610-88e3-40a5-9913-ea297e73777f",
                "eca69bef-7163-4674-96c2-170e062813a8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2913,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "91db1625-8cb5-4e57-a722-e907166dd623",
              "title": "Create Deductible API",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Deductible API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 837,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.deducids = res.body.data[0].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:357:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "bb19e82e-800b-4cd6-88d8-3929f4c4073c",
                  "parentUUID": "91db1625-8cb5-4e57-a722-e907166dd623",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong service group, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong service group, then user got response error",
                  "timedOut": false,
                  "duration": 731,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, datas.Deductible.service_code, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Service Group Code Tidak Ditemukan\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:370:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "45d29aa8-b3de-46bf-96d7-75cff4fc3bcf",
                  "parentUUID": "91db1625-8cb5-4e57-a722-e907166dd623",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong calculate method, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong calculate method, then user got response error",
                  "timedOut": false,
                  "duration": 736,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:375:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "f445f625-8e76-4a8b-a184-337737dca96c",
                  "parentUUID": "91db1625-8cb5-4e57-a722-e907166dd623",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input deduction value with string, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input deduction value with string, then user got response error",
                  "timedOut": false,
                  "duration": 701,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {
                    "message": "AssertionError: Target cannot be null or undefined.",
                    "estack": "AssertionError: Target cannot be null or undefined.\n    at Context.<anonymous> (test/suite2_productService.js:380:52)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": null
                  },
                  "uuid": "e07374f0-f635-4427-b0fa-c68b56d121a0",
                  "parentUUID": "91db1625-8cb5-4e57-a722-e907166dd623",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "bb19e82e-800b-4cd6-88d8-3929f4c4073c",
                "45d29aa8-b3de-46bf-96d7-75cff4fc3bcf",
                "f445f625-8e76-4a8b-a184-337737dca96c",
                "e07374f0-f635-4427-b0fa-c68b56d121a0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3005,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "bba4f8db-ad00-4659-819f-628183c33ebe",
              "title": "Get all Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all Deduction when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 736,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getall.getDeductible(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:389:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "c4e54fe0-baef-40a2-a3b8-4c3656960d16",
                  "parentUUID": "bba4f8db-ad00-4659-819f-628183c33ebe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c4e54fe0-baef-40a2-a3b8-4c3656960d16"
              ],
              "pending": [],
              "skipped": [],
              "duration": 736,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "9ca7ec31-4a5f-4908-bad8-dbc7303f21c0",
              "title": "Get Detail Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 737,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(global.deducids, global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:406:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "f16776d6-1778-4de5-83ca-4a503b7139f7",
                  "parentUUID": "9ca7ec31-4a5f-4908-bad8-dbc7303f21c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 756,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(datas.Deductible.wrong_idDeduc, global.access_Tokens1)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite2_productService.js:418:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "57d6bb7f-3d04-483b-9ac0-b82753f3742e",
                  "parentUUID": "9ca7ec31-4a5f-4908-bad8-dbc7303f21c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f16776d6-1778-4de5-83ca-4a503b7139f7",
                "57d6bb7f-3d04-483b-9ac0-b82753f3742e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1493,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1642472b-20b1-4cd1-b3fb-3b9ff1aca56f",
              "title": "Update Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 895,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method1, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:428:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "13c1cc99-1110-41f3-96de-e30dd70bb58a",
                  "parentUUID": "1642472b-20b1-4cd1-b3fb-3b9ff1aca56f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid Deduction id, then user got response error",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input data using invalid Deduction id, then user got response error",
                  "timedOut": false,
                  "duration": 722,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, datas.Deductible.wrong_idDeduc, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Deductible ID Tidak Ditemukan\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:440:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "48a2de00-b87f-40a4-8097-b9aa308ce3c4",
                  "parentUUID": "1642472b-20b1-4cd1-b3fb-3b9ff1aca56f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu Method then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu Method then user got response 200",
                  "timedOut": false,
                  "duration": 721,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:446:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "d9d27f7b-4d2d-471d-b006-c3066c9ea0cc",
                  "parentUUID": "1642472b-20b1-4cd1-b3fb-3b9ff1aca56f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu value with string, then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu value with string, then user got response 200",
                  "timedOut": false,
                  "duration": 798,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:452:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "c67b6d9c-343c-43cb-beba-21536033d795",
                  "parentUUID": "1642472b-20b1-4cd1-b3fb-3b9ff1aca56f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "13c1cc99-1110-41f3-96de-e30dd70bb58a",
                "48a2de00-b87f-40a4-8097-b9aa308ce3c4",
                "d9d27f7b-4d2d-471d-b006-c3066c9ea0cc",
                "c67b6d9c-343c-43cb-beba-21536033d795"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3136,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "4436c8f7-d6b3-46c1-8c48-3e4a9e2af303",
              "title": "Search Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 777,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Search.searchDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:463:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "0ec559be-3782-4391-b424-e879885a8e15",
                  "parentUUID": "4436c8f7-d6b3-46c1-8c48-3e4a9e2af303",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0ec559be-3782-4391-b424-e879885a8e15"
              ],
              "pending": [],
              "skipped": [],
              "duration": 777,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "655aa981-4a62-4f56-831d-7dbec4f74022",
              "title": "Deleted Deduction APi",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "fe6f32ee-2b62-48c2-87c9-e0cb1a397d65",
                  "parentUUID": "655aa981-4a62-4f56-831d-7dbec4f74022",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "e6868c93-c65d-45e9-83d3-ed94b4fe6499",
                  "parentUUID": "655aa981-4a62-4f56-831d-7dbec4f74022",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "fe6f32ee-2b62-48c2-87c9-e0cb1a397d65",
                "e6868c93-c65d-45e9-83d3-ed94b4fe6499"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d62c0e5a-f3a5-4b32-8f27-f43c72ad676e",
              "title": "Create Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 704,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\nglobal.idpoc = res.body.data[0].id\n//console.log(\"ini poc : \"+global.idpoc);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:496:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "5a25039b-e676-4aca-ac85-3c0374086672",
                  "parentUUID": "d62c0e5a-f3a5-4b32-8f27-f43c72ad676e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 714,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids1, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\nglobal.idpoc1 = res.body.data[0].id\n//console.log(\"ini poc : \"+global.idpoc);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:515:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "a38d9634-281e-4293-929b-d816f6f84b55",
                  "parentUUID": "d62c0e5a-f3a5-4b32-8f27-f43c72ad676e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 750,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:531:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "55d2e0a9-d7b2-41bd-9dda-fd8aee9279b4",
                  "parentUUID": "d62c0e5a-f3a5-4b32-8f27-f43c72ad676e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": false,
                  "duration": 719,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:535:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "eb4ba9a7-fb98-4694-9584-412008fba6dd",
                  "parentUUID": "d62c0e5a-f3a5-4b32-8f27-f43c72ad676e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 731,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:539:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "18c3d454-240e-40ed-beed-bee8a3bffdc0",
                  "parentUUID": "d62c0e5a-f3a5-4b32-8f27-f43c72ad676e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5a25039b-e676-4aca-ac85-3c0374086672",
                "a38d9634-281e-4293-929b-d816f6f84b55",
                "55d2e0a9-d7b2-41bd-9dda-fd8aee9279b4",
                "eb4ba9a7-fb98-4694-9584-412008fba6dd",
                "18c3d454-240e-40ed-beed-bee8a3bffdc0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3618,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0e96b15b-b0b8-40c1-a9a8-bb6e76b5de40",
              "title": "Get all data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Product Contribution when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 735,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getall.getContribution(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\ncontriId = res.body.data[0].id\nglobal.contripurchase = res.body.data[1].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:548:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "e64f979d-cfa6-48e5-8e81-3ef3492b293c",
                  "parentUUID": "0e96b15b-b0b8-40c1-a9a8-bb6e76b5de40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e64f979d-cfa6-48e5-8e81-3ef3492b293c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 735,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "8476d323-9f7d-4e1e-9d5f-a108d80f4245",
              "title": "Get detail Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 721,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, global.serviceids)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:569:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "ae624945-449b-42f0-b100-b953506b1436",
                  "parentUUID": "8476d323-9f7d-4e1e-9d5f-a108d80f4245",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 711,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite2_productService.js:583:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "50497399-fb29-40df-b74b-bc336ed9960e",
                  "parentUUID": "8476d323-9f7d-4e1e-9d5f-a108d80f4245",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ae624945-449b-42f0-b100-b953506b1436",
                "50497399-fb29-40df-b74b-bc336ed9960e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1432,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "4e7da8a8-d84a-4433-a77e-33b2a0bf7067",
              "title": "Update data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Update.updateContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.contribution.isPopular.false, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee, contriId)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {
                    "message": "ReferenceError: contriId is not defined",
                    "estack": "ReferenceError: contriId is not defined\n    at Context.<anonymous> (test/suite2_productService.js:589:379)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "6384a025-e1b5-4c2f-8d79-870930bd7928",
                  "parentUUID": "4e7da8a8-d84a-4433-a77e-33b2a0bf7067",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 723,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:608:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "aa15d3bb-cee9-428d-93ef-c061e8bc708e",
                  "parentUUID": "4e7da8a8-d84a-4433-a77e-33b2a0bf7067",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": false,
                  "duration": 877,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:612:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "78474b12-2485-44cc-8a44-d28e9d94e247",
                  "parentUUID": "4e7da8a8-d84a-4433-a77e-33b2a0bf7067",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 777,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite2_productService.js:616:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "927c1f74-8cad-4100-88d4-6719aa84e4ac",
                  "parentUUID": "4e7da8a8-d84a-4433-a77e-33b2a0bf7067",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6384a025-e1b5-4c2f-8d79-870930bd7928",
                "aa15d3bb-cee9-428d-93ef-c061e8bc708e",
                "78474b12-2485-44cc-8a44-d28e9d94e247",
                "927c1f74-8cad-4100-88d4-6719aa84e4ac"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2378,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "30942148-e2dd-4d82-852e-6259a5ccf4e5",
              "title": "Delete Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9920dfef-ceb7-4de1-8ef6-a5c88687f719",
                  "parentUUID": "30942148-e2dd-4d82-852e-6259a5ccf4e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "67bd2bb9-ba07-4113-889e-9de11e389e3a",
                  "parentUUID": "30942148-e2dd-4d82-852e-6259a5ccf4e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "9920dfef-ceb7-4de1-8ef6-a5c88687f719",
                "67bd2bb9-ba07-4113-889e-9de11e389e3a"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "c23be789-e69d-4d1e-8710-297bcdbf1d32",
          "title": "Payment Api Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
          "file": "/test/suite3_paymentService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "12edd787-7f7b-4140-a051-70f08025de4e",
              "title": "Create Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Provider when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 751,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Provider.createPaymentProvider(global.access_Tokens1, datas.paymentProvider.callback_url, datas.paymentProvider.code, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"code\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"callback_url\").to.equal(datas.paymentProvider.callback_url)\nproviderids = res.body.data[0].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:44:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "0feaf273-e12d-407f-aec9-4c77ad8d7b83",
                  "parentUUID": "12edd787-7f7b-4140-a051-70f08025de4e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0feaf273-e12d-407f-aec9-4c77ad8d7b83"
              ],
              "pending": [],
              "skipped": [],
              "duration": 751,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c1daf110-8609-4c1f-87e5-4aa08ab45718",
              "title": "Get all Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Payment Provider when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 850,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Provider.getPaymentProvider(global.access_Tokens1)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"code\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"callback_url\").exist\nid1 = res.body.data[1].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:59:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "291d8d85-36bd-4a5c-b2e2-465e3b9cb5a4",
                  "parentUUID": "c1daf110-8609-4c1f-87e5-4aa08ab45718",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "291d8d85-36bd-4a5c-b2e2-465e3b9cb5a4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 850,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "bd4eccbf-f628-4c63-9cd4-0bfc82500445",
              "title": "Get detail payment provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, providerids)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "ReferenceError: providerids is not defined",
                    "estack": "ReferenceError: providerids is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:71:98)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "ba8974a8-d149-4880-93df-d10ba7ce22aa",
                  "parentUUID": "bd4eccbf-f628-4c63-9cd4-0bfc82500445",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 724,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID)\nassert(res.status).to.equal(500)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 500",
                    "estack": "AssertionError: expected 401 to equal 500\n    at Context.<anonymous> (test/suite3_paymentService.js:79:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 500\n"
                  },
                  "uuid": "05deacee-5306-4266-b5ca-a6ea3bce2f63",
                  "parentUUID": "bd4eccbf-f628-4c63-9cd4-0bfc82500445",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ba8974a8-d149-4880-93df-d10ba7ce22aa",
                "05deacee-5306-4266-b5ca-a6ea3bce2f63"
              ],
              "pending": [],
              "skipped": [],
              "duration": 724,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7f368b0b-917c-4a08-bc4b-4a1128092e04",
              "title": "Update Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, providerids, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"Failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "ReferenceError: providerids is not defined",
                    "estack": "ReferenceError: providerids is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:84:92)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "87d69cc0-d0f8-41d7-bd44-852ff6cb2501",
                  "parentUUID": "7f368b0b-917c-4a08-bc4b-4a1128092e04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 732,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID, datas.paymentProvider.callback_url, datas.paymentProvider.wrongCode, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite3_paymentService.js:92:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "f8a6c339-284a-48d2-88e2-98da4dee2a82",
                  "parentUUID": "7f368b0b-917c-4a08-bc4b-4a1128092e04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using existing code, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:95:92)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "fe4d5ae5-1fd5-4ca4-b333-f5a595ca23c9",
                  "parentUUID": "7f368b0b-917c-4a08-bc4b-4a1128092e04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid authorization, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid authorization, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(datas.paymentProvider.invalid_auth, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(401)",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:99:105)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "9d1c0a71-5bf7-433c-a21c-bef00b67c5a8",
                  "parentUUID": "7f368b0b-917c-4a08-bc4b-4a1128092e04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "87d69cc0-d0f8-41d7-bd44-852ff6cb2501",
                "f8a6c339-284a-48d2-88e2-98da4dee2a82",
                "fe4d5ae5-1fd5-4ca4-b333-f5a595ca23c9",
                "9d1c0a71-5bf7-433c-a21c-bef00b67c5a8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 732,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "4346d7fd-798d-41b2-bdc0-5bff1d8e676d",
              "title": "Delete payment Provider API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "68037bf6-f4ee-4c36-a43d-ce7c696770c9",
                  "parentUUID": "4346d7fd-798d-41b2-bdc0-5bff1d8e676d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d1053122-0d0c-4d7f-a415-1ed2c94efabd",
                  "parentUUID": "4346d7fd-798d-41b2-bdc0-5bff1d8e676d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "77e3c24b-22c0-4a3f-a01d-ffedf5790f8a",
                  "parentUUID": "4346d7fd-798d-41b2-bdc0-5bff1d8e676d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "68037bf6-f4ee-4c36-a43d-ce7c696770c9",
                "d1053122-0d0c-4d7f-a415-1ed2c94efabd",
                "77e3c24b-22c0-4a3f-a01d-ffedf5790f8a"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c11b957c-2c6f-4fa0-9a88-c6ee6fba417b",
              "title": "Create Payment Option API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const bankName =  [\"shopeepay\", \"qris\", \"gopay\"]\nfor (let x in bankName) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, 'EWALLET', datas.Deductible.description, datas.paymentOption.fixfee, bankName[x], 0, providerids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(bankName[x])\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nglobal.idpaoption = res.body.data[0].id\nidpaoption3 = res.body.data[0].name\n\n}",
                  "err": {
                    "message": "ReferenceError: providerids is not defined",
                    "estack": "ReferenceError: providerids is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:127:173)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "055090cb-6321-4184-b231-d9482911970d",
                  "parentUUID": "c11b957c-2c6f-4fa0-9a88-c6ee6fba417b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const bankName =  [\"mandiri\", \"cimb\", \"mega\", \"bni\", \"bca\", \"permata\", \"bri\", \"maybank\"]\nfor (let x in bankName) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, \"BANK_TRANSFER\", datas.Deductible.description, 0 , bankName[x] , datas.paymentOption.persenfee , id1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(bankName[x])\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nglobal.idpaoption1 = res.body.data[0].id\nglobal.bankname = res.body.data[0].name\n}",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:146:185)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "b757cb87-4e18-4b6e-850d-2672cd59a702",
                  "parentUUID": "c11b957c-2c6f-4fa0-9a88-c6ee6fba417b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong category, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input wrong category, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, datas.paymentOption.wrong_category, datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,0 , id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"kategori tidak valid\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:160:212)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "e44c95d6-3c78-44fe-96a1-ffa931fd8805",
                  "parentUUID": "c11b957c-2c6f-4fa0-9a88-c6ee6fba417b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input provider id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input provider id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 878,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite3_paymentService.js:166:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "3d786660-1a9d-4ea3-9c68-282cb32140c2",
                  "parentUUID": "c11b957c-2c6f-4fa0-9a88-c6ee6fba417b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input persen fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:170:214)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "2f77801d-9191-42a2-b25b-dc7501697a18",
                  "parentUUID": "c11b957c-2c6f-4fa0-9a88-c6ee6fba417b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input fix fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:175:214)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "b10854ab-ad1c-4b64-b2fb-fb544010f82a",
                  "parentUUID": "c11b957c-2c6f-4fa0-9a88-c6ee6fba417b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "055090cb-6321-4184-b231-d9482911970d",
                "b757cb87-4e18-4b6e-850d-2672cd59a702",
                "e44c95d6-3c78-44fe-96a1-ffa931fd8805",
                "3d786660-1a9d-4ea3-9c68-282cb32140c2",
                "2f77801d-9191-42a2-b25b-dc7501697a18",
                "b10854ab-ad1c-4b64-b2fb-fb544010f82a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 879,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a01430af-e636-4435-a85d-9e223396fbaf",
              "title": "Get all payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all payment option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 712,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Option.getPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nidpo = res.body.data[0].id\nidpo1 = res.body.data[1].id\nidpo2 = res.body.data[2].id\nidpo3 = res.body.data[3].id\n//console.log(idpo);\n//console.log(idpo1);\n//console.log(idpo2);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:183:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "8c55fe36-5377-4d8c-a94e-aadd4703426c",
                  "parentUUID": "a01430af-e636-4435-a85d-9e223396fbaf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8c55fe36-5377-4d8c-a94e-aadd4703426c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 712,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "b4fb08d0-02fd-4dff-868d-dce71c583784",
              "title": "Get Payment Option Page",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "",
                  "fullTitle": "Payment Api Service Get Payment Option Page ",
                  "timedOut": false,
                  "duration": 751,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getaPage.getPaymentOptionPage(global.access_Tokens1, global.idsgforppo)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:204:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "293dfe7e-9516-4746-a95e-e65cce3bffce",
                  "parentUUID": "b4fb08d0-02fd-4dff-868d-dce71c583784",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "293dfe7e-9516-4746-a95e-e65cce3bffce"
              ],
              "pending": [],
              "skipped": [],
              "duration": 751,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "28aa6c91-d225-403b-b608-925ddfc6b1b2",
              "title": "Get Detail payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, idpo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist",
                  "err": {
                    "message": "ReferenceError: idpo is not defined",
                    "estack": "ReferenceError: idpo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:210:94)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "92b5b653-70b2-457c-8ab1-94afe0e814fa",
                  "parentUUID": "28aa6c91-d225-403b-b608-925ddfc6b1b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 713,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite3_paymentService.js:222:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "3b03f337-157c-451a-8b60-27c6390d7d2a",
                  "parentUUID": "28aa6c91-d225-403b-b608-925ddfc6b1b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "92b5b653-70b2-457c-8ab1-94afe0e814fa",
                "3b03f337-157c-451a-8b60-27c6390d7d2a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 713,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "fac577c0-0743-4079-9096-2dac76545dd7",
              "title": "Update Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"EWALLET\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:227:190)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "5e491b70-6573-43cb-a6a4-0b354370bb39",
                  "parentUUID": "fac577c0-0743-4079-9096-2dac76545dd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"BANK_TRANSFER\", datas.Deductible.description, datas.paymentOption.fixfee , datas.paymentOption.name , 0 , id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:231:195)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "874ca0dd-2712-409f-82b9-4d97bf90e55f",
                  "parentUUID": "fac577c0-0743-4079-9096-2dac76545dd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {
                    "message": "ReferenceError: idpo is not defined",
                    "estack": "ReferenceError: idpo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:235:214)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "b223efc8-9d23-4dab-bfdc-043fa976314b",
                  "parentUUID": "fac577c0-0743-4079-9096-2dac76545dd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input persen fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {
                    "message": "ReferenceError: idpo is not defined",
                    "estack": "ReferenceError: idpo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:240:243)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "edfa9c98-0579-40a4-a9f9-da7079710926",
                  "parentUUID": "fac577c0-0743-4079-9096-2dac76545dd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input fix fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:245:214)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "90d8a165-39ed-4b0b-af21-ac07dfd70521",
                  "parentUUID": "fac577c0-0743-4079-9096-2dac76545dd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name , 0 , id1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:250:183)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "f15f9f70-76c3-4096-a51d-05c5582ddfc9",
                  "parentUUID": "fac577c0-0743-4079-9096-2dac76545dd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5e491b70-6573-43cb-a6a4-0b354370bb39",
                "874ca0dd-2712-409f-82b9-4d97bf90e55f",
                "b223efc8-9d23-4dab-bfdc-043fa976314b",
                "edfa9c98-0579-40a4-a9f9-da7079710926",
                "90d8a165-39ed-4b0b-af21-ac07dfd70521",
                "f15f9f70-76c3-4096-a51d-05c5582ddfc9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e761f57d-a851-4e11-84cf-6b3634941836",
              "title": "Delete Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3866d980-4f75-4dc8-9c93-fa0d7c52455c",
                  "parentUUID": "e761f57d-a851-4e11-84cf-6b3634941836",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9016ec42-2767-47b7-a0f4-db7749cdbf1c",
                  "parentUUID": "e761f57d-a851-4e11-84cf-6b3634941836",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f69a40e5-6ec3-4906-9503-ecc785e8293d",
                  "parentUUID": "e761f57d-a851-4e11-84cf-6b3634941836",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "08002aeb-0130-4eef-9fee-28acf15d7d1f",
                  "parentUUID": "e761f57d-a851-4e11-84cf-6b3634941836",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "3866d980-4f75-4dc8-9c93-fa0d7c52455c",
                "9016ec42-2767-47b7-a0f4-db7749cdbf1c",
                "f69a40e5-6ec3-4906-9503-ecc785e8293d",
                "08002aeb-0130-4eef-9fee-28acf15d7d1f"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "baeaa8f5-5342-4cce-a0f0-6b7ce8180a06",
              "title": "Create Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 741,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.idpaoption, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nglobal.ppoid = res.body.data[0].id\nglobal.payment_option_id = res.body.data[0].payment_option_id\nglobal.service_group_id = res.body.data[0].service_group_id\n//console.log(\"ini ppoids : \"+global.ppoid);\n//console.log(\"ini payment_option_id : \"+global.payment_option_id);\n//console.log(\"ini service_group_id : \"+global.service_group_id);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:277:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "1d073a80-d5e3-4795-ad3e-096d2e6a45d2",
                  "parentUUID": "baeaa8f5-5342-4cce-a0f0-6b7ce8180a06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 720,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.idpaoption1, global.serviceids1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nglobal.ppoid1 = res.body.data[0].id\nglobal.payment_option_id1 = res.body.data[0].payment_option_id\nglobal.service_group_id1 = res.body.data[0].service_group_id\n//console.log(\"ini ppoids : \"+global.ppoid);\n//console.log(\"ini payment_option_id : \"+global.payment_option_id);\n//console.log(\"ini service_group_id : \"+global.service_group_id);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:294:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "84213297-4bd5-41d8-880e-8fd209712e68",
                  "parentUUID": "baeaa8f5-5342-4cce-a0f0-6b7ce8180a06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input service group id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input service group id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "12e6dba7-bbf8-42ca-ad35-3ee221ab2463",
                  "parentUUID": "baeaa8f5-5342-4cce-a0f0-6b7ce8180a06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 752,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, global.idsgforppo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite3_paymentService.js:317:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "a9ba8f79-24d4-4785-846d-0453ae40743d",
                  "parentUUID": "baeaa8f5-5342-4cce-a0f0-6b7ce8180a06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1d073a80-d5e3-4795-ad3e-096d2e6a45d2",
                "84213297-4bd5-41d8-880e-8fd209712e68",
                "a9ba8f79-24d4-4785-846d-0453ae40743d"
              ],
              "pending": [
                "12e6dba7-bbf8-42ca-ad35-3ee221ab2463"
              ],
              "skipped": [],
              "duration": 2213,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "3709e98a-4b24-4695-bd2a-4ccbe9ffb752",
              "title": "Get all Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 722,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPO.getProductPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nidppo0 = res.body.data[0].id\nidppo1 = res.body.data[1].id\nidppo2 = res.body.data[2].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:325:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "efe10a77-2e35-4f03-9ab4-8f9c41453ab8",
                  "parentUUID": "3709e98a-4b24-4695-bd2a-4ccbe9ffb752",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "efe10a77-2e35-4f03-9ab4-8f9c41453ab8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 722,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d0239c38-0517-42e2-8787-712a57e92918",
              "title": "Get all Product Payment Option with Service Group Id",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 745,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nidppo = res.body.data[0].id",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:341:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "1296e74a-0d0f-4d55-842d-98fc66d147a5",
                  "parentUUID": "d0239c38-0517-42e2-8787-712a57e92918",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid sg id, then user got response error",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user input invalid sg id, then user got response error",
                  "timedOut": false,
                  "duration": 724,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:353:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "95cd6862-2b4a-41fc-96aa-27db4b32e469",
                  "parentUUID": "d0239c38-0517-42e2-8787-712a57e92918",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1296e74a-0d0f-4d55-842d-98fc66d147a5",
                "95cd6862-2b4a-41fc-96aa-27db4b32e469"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1469,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "17b82113-f37f-42bf-b62e-9074bb3d6a14",
              "title": "Get detail Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, idppo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {
                    "message": "ReferenceError: idppo is not defined",
                    "estack": "ReferenceError: idppo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:358:98)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "b1d1907d-b706-409e-92e7-bef938c767fd",
                  "parentUUID": "17b82113-f37f-42bf-b62e-9074bb3d6a14",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 734,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (test/suite3_paymentService.js:370:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "a9d2b568-7207-442d-860f-82348e825bb2",
                  "parentUUID": "17b82113-f37f-42bf-b62e-9074bb3d6a14",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b1d1907d-b706-409e-92e7-bef938c767fd",
                "a9d2b568-7207-442d-860f-82348e825bb2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 734,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5cf38769-1f75-4385-905f-409538788597",
              "title": "Update Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 711,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, global.payment_option_id, global.service_group_id, global.ppoid)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:382:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "919df395-e148-45bb-bfd4-a65e91f3a4e7",
                  "parentUUID": "5cf38769-1f75-4385-905f-409538788597",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 705,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.payment_option_id, global.service_group_id, global.ppoid)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:396:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "1e21f0d5-7c6b-4a1c-a511-85af12215fdc",
                  "parentUUID": "5cf38769-1f75-4385-905f-409538788597",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PPO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PPO id, then user got response error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, idpo, idsgforppo, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {
                    "message": "ReferenceError: idpo is not defined",
                    "estack": "ReferenceError: idpo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:406:243)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "b3957a91-d233-44d2-80d1-f39e55c5144c",
                  "parentUUID": "5cf38769-1f75-4385-905f-409538788597",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid SG id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid SG id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "0bdb7300-82a5-46af-83c3-45e3ebfeff0b",
                  "parentUUID": "5cf38769-1f75-4385-905f-409538788597",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PO id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, idsgforppo, idppo)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "ReferenceError: idsgforppo is not defined",
                    "estack": "ReferenceError: idsgforppo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:416:272)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "2469e8fc-2d36-4e9d-8c76-5272d7bd6b74",
                  "parentUUID": "5cf38769-1f75-4385-905f-409538788597",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "919df395-e148-45bb-bfd4-a65e91f3a4e7",
                "1e21f0d5-7c6b-4a1c-a511-85af12215fdc",
                "b3957a91-d233-44d2-80d1-f39e55c5144c",
                "2469e8fc-2d36-4e9d-8c76-5272d7bd6b74"
              ],
              "pending": [
                "0bdb7300-82a5-46af-83c3-45e3ebfeff0b"
              ],
              "skipped": [],
              "duration": 1417,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c37f60b6-7536-4647-9274-f61f4dbf502b",
              "title": "Delete Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3f965634-8c2c-432d-b917-8980931fd5da",
                  "parentUUID": "c37f60b6-7536-4647-9274-f61f4dbf502b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "95fa1386-d6c3-441d-a81a-75296c1b2818",
                  "parentUUID": "c37f60b6-7536-4647-9274-f61f4dbf502b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a46dd29c-ea9d-4cfd-b224-0f122d0e019b",
                  "parentUUID": "c37f60b6-7536-4647-9274-f61f4dbf502b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b45010ef-42c1-40ac-9f0e-ef6769d8e478",
                  "parentUUID": "c37f60b6-7536-4647-9274-f61f4dbf502b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "3f965634-8c2c-432d-b917-8980931fd5da",
                "95fa1386-d6c3-441d-a81a-75296c1b2818",
                "a46dd29c-ea9d-4cfd-b224-0f122d0e019b",
                "b45010ef-42c1-40ac-9f0e-ef6769d8e478"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "735f97e3-1f9d-475b-9e02-5b7941e763c6",
          "title": "Purchase Service API",
          "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
          "file": "/test/suite4_purchase.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b87e5f01-9aa6-4918-83d7-bc3b3c766c54",
              "title": "Create Health Declaration",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create HD using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 729,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.true, global.serviceids, datas.purchase.type)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('type').to.equal('FIRST_TIME')\nassert(res.body.data[0]).to.have.property('status').to.equal('DRAFT_HEALTH_DECLARATION')\nassert(res.body.data[0].health_declaration_json).to.have.property('age').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('medical').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('job').exist\nglobal.idpurcahse = res.body.data[0].purchase_id\n//console.log(\"ini purchase id : \"+global.idpurcahse",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:21:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "44b1c9aa-66b0-4896-8d1a-80dbe5d8f68c",
                  "parentUUID": "b87e5f01-9aa6-4918-83d7-bc3b3c766c54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 771,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.true, global.serviceids1, datas.purchase.type)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('type').to.equal('FIRST_TIME')\nassert(res.body.data[0]).to.have.property('status').to.equal('DRAFT_HEALTH_DECLARATION')\nassert(res.body.data[0].health_declaration_json).to.have.property('age').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('medical').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('job').exist\nglobal.idpurcahse1 = res.body.data[0].purchase_id\n//console.log(\"ini purchase id : \"+global.idpurcahse",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:41:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "0596bfa1-51c5-4fee-b1e7-e86073f1d84f",
                  "parentUUID": "b87e5f01-9aa6-4918-83d7-bc3b3c766c54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD with value age = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD with value age = false, then user got response error",
                  "timedOut": false,
                  "duration": 732,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.false, datas.purchase.job.true, datas.purchase.medical.true, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:58:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "2e1c61cb-0a96-4b40-9caf-8ff6458ca3bb",
                  "parentUUID": "b87e5f01-9aa6-4918-83d7-bc3b3c766c54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD  with value job = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD  with value job = false, then user got response error",
                  "timedOut": false,
                  "duration": 729,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.false, datas.purchase.medical.true, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:62:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "2c6da093-5d4a-437b-b0d3-3c19ddbb7aa6",
                  "parentUUID": "b87e5f01-9aa6-4918-83d7-bc3b3c766c54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD  with value medical = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD  with value medical = false, then user got response error",
                  "timedOut": false,
                  "duration": 727,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.false, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:66:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "01c28acd-a936-4dc0-9d59-1fbc233b3755",
                  "parentUUID": "b87e5f01-9aa6-4918-83d7-bc3b3c766c54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "44b1c9aa-66b0-4896-8d1a-80dbe5d8f68c",
                "0596bfa1-51c5-4fee-b1e7-e86073f1d84f",
                "2e1c61cb-0a96-4b40-9caf-8ff6458ca3bb",
                "2c6da093-5d4a-437b-b0d3-3c19ddbb7aa6",
                "01c28acd-a936-4dc0-9d59-1fbc233b3755"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3688,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "912b3bb3-4394-4147-b1ca-32c66f823ebb",
              "title": "Create KYC",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create kyc using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 815,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.validdobs, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:75:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "e763f041-7cc6-462d-9fb3-4fa8093adf36",
                  "parentUUID": "912b3bb3-4394-4147-b1ca-32c66f823ebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 748,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.validdobs, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:89:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "e75e1c74-6840-4abb-ba82-9a3487f5e4fd",
                  "parentUUID": "912b3bb3-4394-4147-b1ca-32c66f823ebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using min dob(17th 180hr), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using min dob(17th 180hr), then user got response error",
                  "timedOut": false,
                  "duration": 756,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.minDobs, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Kamu harus berusia 18 - 55 tahun untuk jadi anggota\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:100:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "d68fb377-b76f-4b7f-8ea9-f11f35fda292",
                  "parentUUID": "912b3bb3-4394-4147-b1ca-32c66f823ebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using max dob(55th 181hr), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using max dob(55th 181hr), then user got response error",
                  "timedOut": false,
                  "duration": 736,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.maxDobs, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Kamu harus berusia 18 - 55 tahun untuk jadi anggota\")",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:105:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "ee666068-7a46-4e23-8541-bdaf29d7994d",
                  "parentUUID": "912b3bb3-4394-4147-b1ca-32c66f823ebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using max dob(more than 16 digit), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using max dob(more than 16 digit), then user got response error",
                  "timedOut": false,
                  "duration": 713,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.valid_dob, datas.KYC.fullname, datas.KYC.max_ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:111:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "f0172532-c7aa-4255-8094-cbbe41c273a0",
                  "parentUUID": "912b3bb3-4394-4147-b1ca-32c66f823ebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using min dob(less than 16 digit), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using min dob(less than 16 digit), then user got response error",
                  "timedOut": false,
                  "duration": 737,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.valid_dob, datas.KYC.fullname, datas.KYC.min_ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:116:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "7545e1c9-a939-4703-8de7-b08afed632cf",
                  "parentUUID": "912b3bb3-4394-4147-b1ca-32c66f823ebb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e763f041-7cc6-462d-9fb3-4fa8093adf36",
                "e75e1c74-6840-4abb-ba82-9a3487f5e4fd",
                "d68fb377-b76f-4b7f-8ea9-f11f35fda292",
                "ee666068-7a46-4e23-8541-bdaf29d7994d",
                "f0172532-c7aa-4255-8094-cbbe41c273a0",
                "7545e1c9-a939-4703-8de7-b08afed632cf"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4505,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1ea7a77f-e1d4-4744-ad5e-cc707e2d87ab",
              "title": "Create Beneficiary",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Beneficiary when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 754,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createbenef.createBeneficiary(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.benef.inform.true, datas.KYC.ktp, datas.KYC.phone, datas.benef.relation, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:126:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "c621cc4c-de0d-4b45-8426-2633395d8fd5",
                  "parentUUID": "1ea7a77f-e1d4-4744-ad5e-cc707e2d87ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Beneficiary when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 700,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createbenef.createBeneficiary(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.benef.inform.true, datas.KYC.ktp, datas.KYC.phone, datas.benef.relation, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:140:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "be7eb121-0a0c-481f-827b-d12c720f75d8",
                  "parentUUID": "1ea7a77f-e1d4-4744-ad5e-cc707e2d87ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c621cc4c-de0d-4b45-8426-2633395d8fd5",
                "be7eb121-0a0c-481f-827b-d12c720f75d8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1454,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "4cd66153-6002-422f-8b55-85b764711d01",
              "title": "Create Payment",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create payment using donation true, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation true, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 720,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, true, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('status').to.equal('PURCHASED')\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:156:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "add1538f-7427-4138-9f05-bbb0be07e453",
                  "parentUUID": "4cd66153-6002-422f-8b55-85b764711d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create payment using donation true, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation true, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 726,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, true, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('status').to.equal('PURCHASED')\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:166:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "bf75b2c8-62df-473b-ad09-09581ab5b794",
                  "parentUUID": "4cd66153-6002-422f-8b55-85b764711d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create payment using donation False, then user got response error",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation False, then user got response error",
                  "timedOut": false,
                  "duration": 704,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, false, global.idpurcahse)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:173:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "7c786c20-baf2-44de-9849-245dc9596640",
                  "parentUUID": "4cd66153-6002-422f-8b55-85b764711d01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "add1538f-7427-4138-9f05-bbb0be07e453",
                "bf75b2c8-62df-473b-ad09-09581ab5b794",
                "7c786c20-baf2-44de-9849-245dc9596640"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2150,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d6ef61eb-e842-4704-8656-41c217d5f872",
              "title": "Get Data Summary",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user get data api get summary using valid purchase id, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Get Data Summary when user get data api get summary using valid purchase id, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 729,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getSummary.getSummary(global.access_Tokens1, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('status').exist\nassert(res.body.data[0]).to.have.property('type').exist\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:182:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "dcf0d917-9e9f-479d-ae1c-f89c3b6125d2",
                  "parentUUID": "d6ef61eb-e842-4704-8656-41c217d5f872",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user get data api get summary using invalid purchase id, then user got response error",
                  "fullTitle": "Purchase Service API Get Data Summary when user get data api get summary using invalid purchase id, then user got response error",
                  "timedOut": false,
                  "duration": 739,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getSummary.getSummary(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:195:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "c0791d59-70ec-47c0-b1d1-64e89891552c",
                  "parentUUID": "d6ef61eb-e842-4704-8656-41c217d5f872",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "dcf0d917-9e9f-479d-ae1c-f89c3b6125d2",
                "c0791d59-70ec-47c0-b1d1-64e89891552c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1468,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "8a4f9ab1-dfa1-4d9f-abba-1cdc86a282f2",
          "title": "API Calculation Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite5_calculation.js",
          "file": "/test/suite5_calculation.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e6a42393-228a-41f8-83bb-f83458028b2f",
              "title": "Get Calculate Payment",
              "fullFile": "/home/runner/work/flash/flash/test/suite5_calculation.js",
              "file": "/test/suite5_calculation.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: calucated in \"Get Calculate Payment\"",
                  "fullTitle": "API Calculation Service Get Calculate Payment \"before all\" hook: calucated in \"Get Calculate Payment\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "persenfee = datas.paymentOption.persenfee / 100\nconsole.log(\"persenfee :\"+persenfee);\nfixfee = datas.paymentOption.fixfee\ntotalFeepersen = datas.calcu.contributeFee  * persenfee\ntotalFeefixfee = fixfee\ntotalpayment = datas.calcu.contributeFee + totalFeepersen\ntotalpayment1 = datas.calcu.contributeFee + totalFeefixfee",
                  "err": {},
                  "uuid": "8c38758d-20b4-4c6f-b923-ba8e7a0d5870",
                  "parentUUID": "e6a42393-228a-41f8-83bb-f83458028b2f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "fullTitle": "API Calculation Service Get Calculate Payment when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 725,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await calcu.calcu(global.access_Tokens1, datas.calcu.contributeFee, global.ppoid)\nif(res.status !== 200) {\n    console.log(\"failed  : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(totalFeefixfee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(totalpayment1)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.calcu.contributeFee)\n//console.log(res.text);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite5_calculation.js:25:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "5b0c44b9-1cf4-45cc-bf5e-adf946a7f863",
                  "parentUUID": "e6a42393-228a-41f8-83bb-f83458028b2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "fullTitle": "API Calculation Service Get Calculate Payment when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 738,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await calcu.calcu(global.access_Tokens1, datas.calcu.contributeFee, datas.calcu.ppoidpersen)\nif(res.status !== 200) {\n    console.log(\"failed  : \"+res.text);\n}\n//console.log(res.text);\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(totalFeepersen)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(totalpayment)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.calcu.contributeFee)",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite5_calculation.js:42:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "0b32f276-1a23-44b4-acba-ab4165fc4f60",
                  "parentUUID": "e6a42393-228a-41f8-83bb-f83458028b2f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5b0c44b9-1cf4-45cc-bf5e-adf946a7f863",
                "0b32f276-1a23-44b4-acba-ab4165fc4f60"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1463,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "abcf7205-cbc2-40a1-89a9-308f19699836",
          "title": "API Checkout Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite6_checkout.js",
          "file": "/test/suite6_checkout.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d827561e-8bf2-48cd-8dcd-99a35881728b",
              "title": "Checkout/Capture Purchase",
              "fullFile": "/home/runner/work/flash/flash/test/suite6_checkout.js",
              "file": "/test/suite6_checkout.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: calucated in \"Checkout/Capture Purchase\"",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase \"before all\" hook: calucated in \"Checkout/Capture Purchase\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "ujrah = datas.service_Group.ujrah / 100\nujrah1 = datas.service_Group.ujrah1 / 100\npersenfee = datas.paymentOption.persenfee / 100\npersen_total_fee = datas.contribution.contriFee * persenfee\nfixfee_total_fee = datas.paymentOption.fixfee\ntotal_ujrah = ujrah * datas.contribution.contriFee\ntotal_ujrah1 = ujrah1 * datas.contribution.contriFee\ntotal_tabaru = datas.contribution.contriFee - total_ujrah\ntotal_tabaru1 = datas.contribution.contriFee - total_ujrah1\nP_total_payment = datas.contribution.contriFee + persen_total_fee\nF_total_payment = datas.contribution.contriFee + fixfee_total_fee",
                  "err": {},
                  "uuid": "4e07f1d8-88ad-4ca8-8a04-66e35cde3a37",
                  "parentUUID": "d827561e-8bf2-48cd-8dcd-99a35881728b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 720,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi, global.idpaoption, global.idpoc, global.idpurcahse, global.serviceids)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nconsole.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(datas.paymentOption.fixfee)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(fixfee_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(F_total_payment)\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"paid_at\")\nassert(res.body.data[0].actions[0]).to.have.property(\"name\").exist\nassert(res.body.data[0].actions[0]).to.have.property(\"method\").exist\nassert(res.body.data[0].actions[0]).to.have.property(\"url\").exist\nassert(res.body.data[0]).to.have.property(\"va_numbers\")\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (test/suite6_checkout.js:33:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "0b35f00c-3b8e-460f-beac-064713124740",
                  "parentUUID": "d827561e-8bf2-48cd-8dcd-99a35881728b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "after(async function checkouts() {\n    this.timeout(5000); \n    const res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi1, global.idpaoption1, global.idpoc1, global.idpurcahse1, global.serviceids1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nconsole.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi1)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids1)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption1)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse1)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc1)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(datas.paymentOption.persenfee)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru1)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah1)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(persen_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(P_total_payment)\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"paid_at\")\nassert(res.body.data[0]).to.have.property(\"actions\")\nassert(res.body.data[0].va_numbers[0]).to.have.property(\"bank\").to.equal(global.bankname)\nassert(res.body.data[0].va_numbers[0]).to.have.property(\"va_number\").exist\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist\n\n\n\n\n});",
                  "err": {},
                  "uuid": "2d518add-ed5e-4b6b-b146-963f1aa47c7b",
                  "parentUUID": "d827561e-8bf2-48cd-8dcd-99a35881728b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d518add-ed5e-4b6b-b146-963f1aa47c7b"
              ],
              "failures": [
                "0b35f00c-3b8e-460f-beac-064713124740"
              ],
              "pending": [],
              "skipped": [],
              "duration": 721,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-06-23-2022",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "test-06-23-2022"
      },
      "version": "6.2.0"
    }
  }
}