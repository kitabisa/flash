{
  "stats": {
    "suites": 59,
    "tests": 137,
    "passes": 116,
    "pending": 21,
    "failures": 0,
    "start": "2022-07-01T00:24:57.865Z",
    "end": "2022-07-01T00:26:57.281Z",
    "duration": 119416,
    "testsRegistered": 137,
    "passPercent": 100,
    "pendingPercent": 15.328467153284672,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d6e92820-5c18-4a5c-aafe-c5f2dd29d4de",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after all\" hook: checkouts in \"{root}\"",
          "fullTitle": "\"after all\" hook: checkouts in \"{root}\"",
          "timedOut": false,
          "duration": 2546,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "this.timeout(5000); \nconst res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi1, global.idpaoption1, global.idpoc1, global.idpurcahse1, global.serviceids1)\n            if(res.status !== 200){\nconsole.log(\"failed : \"+res.text);\n            }\n            assert(res.status).to.equal(200)\n            //console.log(res.text);\n            assert(res.body.data[0]).to.have.property(\"id\").exist\n            assert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi1)\n            assert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids1)\n            assert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption1)\n            assert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse1)\n            assert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc1)\n            assert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(datas.paymentOption.persenfee)\n            assert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(0)\n            assert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\n            assert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru1)\n            assert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah1)\n            assert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(persen_total_fee)\n            assert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(P_total_payment)\n            assert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\n            assert(res.body.data[0]).to.have.property(\"status\").exist\n            assert(res.body.data[0]).to.have.property(\"paid_at\")\n            assert(res.body.data[0]).to.have.property(\"actions\")\n            assert(res.body.data[0].va_numbers[0]).to.have.property(\"bank\").to.equal(\"permata\")\n            assert(res.body.data[0].va_numbers[0]).to.have.property(\"va_number\").exist\n            assert(res.body.data[0]).to.have.property(\"expired_at\").exist",
          "err": {},
          "uuid": "5b457e0d-2994-4565-8beb-5f9a7d68dd69",
          "parentUUID": "d6e92820-5c18-4a5c-aafe-c5f2dd29d4de",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook: statuspayment in \"{root}\"",
          "fullTitle": "\"after all\" hook: statuspayment in \"{root}\"",
          "timedOut": false,
          "duration": 744,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const res = await status.statuss(global.access_Tokens1, global.ppids)\nassert(res.status).to.equal(200)\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").exist\nassert(res.body.data[0]).to.have.property(\"total_payment\").exist\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"image_url\").exist\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist",
          "err": {},
          "uuid": "14412c3b-95f3-4f57-aa2f-b9c49c6756fe",
          "parentUUID": "d6e92820-5c18-4a5c-aafe-c5f2dd29d4de",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "f0470c0c-52c0-4a60-a26e-0ed65d2fd6a2",
          "title": "Exchange Token API",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: pre_request in \"Exchange Token API\"",
              "fullTitle": "Exchange Token API \"before all\" hook: pre_request in \"Exchange Token API\"",
              "timedOut": false,
              "duration": 2404,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "username = ['ario16@gmail.com', 'ario10@gmail.com']\ntoken1 = []\ntoken2 = []\nfor (const user in username) {\n    const rd = await wong.wongAccount(username[user])\n    console.log('Status Code wong :', rd.status);\n    if (username[user] == `ario16@gmail.com`) {\n        const res = rd.body.data[0].token\n        token1.push(res)\n        global.token1 = token1\n    } else {\n        const res1 = rd.body.data[0].token\n        token2.push(res1)\n        global.token2 = token2\n    }\n}",
              "err": {},
              "uuid": "3b4d27ce-8f29-466b-b3b5-1b85b34d2105",
              "parentUUID": "f0470c0c-52c0-4a60-a26e-0ed65d2fd6a2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "when user input valid token then user got response 200",
              "fullTitle": "Exchange Token API when user input valid token then user got response 200",
              "timedOut": false,
              "duration": 1946,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "tokens = [global.token1, global.token2]\ntokens1 = []\ntokens2 = []\nfor (const x in tokens) {\n    res = await exchange_token.exchangeTokenAccount(tokens[x]);\n    if (tokens[x] == global.token1) {\n        const res1 = res.body.data[0].access_token\n        tokens1.push(res1)\n        global.access_Tokens1 = tokens1\n    } else {\n        const res2 = res.body.data[0].access_token\n        tokens2.push(res2)\n        global.access_Tokens2 = tokens2\n    }\n    assert(res.status).to.equal(200);\n    assert(res.body.data[0]).to.have.property('access_token')\n    assert(res.body.data[0]).to.have.property('refresh_token')\n    assert(res.body.data[0]).to.have.property('expires_in')\n    \n}\n//console.log(global.access_Tokens1);",
              "err": {},
              "uuid": "84a2067b-53a2-4e92-a5ba-5a3b4a672c50",
              "parentUUID": "f0470c0c-52c0-4a60-a26e-0ed65d2fd6a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when user input wrong token, then user got response error",
              "fullTitle": "Exchange Token API when user input wrong token, then user got response error",
              "timedOut": false,
              "duration": 1261,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1bXhfUFZiQ3lTV2o5SG5MRHJ0bEJ3X1BLTnlFcVJtWTNpQ3BSMTBlMFpvIn0.eyJleHAiOjE2NTI4OTEwNTEsImlhdCI6MTY1Mjg1NTA1MSwianRpIjoiYmMwMzhiZWUtYzNhNi00YjYxLTlkZjMtYmQ3NjExZWQwMTI0IiwiaXNzIjoiaHR0cDovL2tleWNsb2FrLnN0Zy5rdC5qZy9hdXRoL3JlYWxtcy9raXRhamFnYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNTY5ZjM5NS1iZWUxLTQxMzItOWYzZS1lZDM3ODAyMzY2ODMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrb25nIiwic2Vzc2lvbl9zdGF0ZSI6ImYwZWU1YzI3LTliODYtNDg1Mi1iYmE2LTI1M2ZkN2RlZDFkMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1raXRhamFnYSIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiJmMGVlNWMyNy05Yjg2LTQ4NTItYmJhNi0yNTNmZDdkZWQxZDAiLCJraXRhYmlzYV91c2VyX2lkIjoiNSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiS2l0YWphZ2EgVGVzdCBBamEiLCJraXRhYmlzYV9zZWNvbmRhcnlfaWQiOiI1NDk0ZTg3ODQ2MTJjMWY1ZDNhODI4ZjAyYWNkNzRmNSIsInBob25lX251bWJlciI6IjYyODEyMzQ1Njc4OTAiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJraXRhamFnYS10ZXN0QGtpdGFqYWdhLmlkIiwiZ2l2ZW5fbmFtZSI6IktpdGFqYWdhIiwiZmFtaWx5X')\nassert(res.status).to.equal(502)",
              "err": {},
              "uuid": "f7c3f653-b089-4b6d-9169-52913b792447",
              "parentUUID": "f0470c0c-52c0-4a60-a26e-0ed65d2fd6a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when user input empty token, then user got response error",
              "fullTitle": "Exchange Token API when user input empty token, then user got response error",
              "timedOut": false,
              "duration": 806,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('')\nassert(res.status).to.equal(401)",
              "err": {},
              "uuid": "d4b34c62-16d2-4176-bae5-168730bebe57",
              "parentUUID": "f0470c0c-52c0-4a60-a26e-0ed65d2fd6a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "84a2067b-53a2-4e92-a5ba-5a3b4a672c50",
            "f7c3f653-b089-4b6d-9169-52913b792447",
            "d4b34c62-16d2-4176-bae5-168730bebe57"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4013,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "acccdc3d-b086-4926-b4c8-32a2504e4a82",
          "title": "Get user info",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": false,
              "duration": 861,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)",
              "err": {},
              "uuid": "761fa9bd-3a94-4217-ad1f-2da9fff73223",
              "parentUUID": "acccdc3d-b086-4926-b4c8-32a2504e4a82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": false,
              "duration": 811,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens2)\nassert(res.status).to.equal(404)",
              "err": {},
              "uuid": "186cdcc4-4ff1-4333-ad19-8331c0f33b43",
              "parentUUID": "acccdc3d-b086-4926-b4c8-32a2504e4a82",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "761fa9bd-3a94-4217-ad1f-2da9fff73223",
            "186cdcc4-4ff1-4333-ad19-8331c0f33b43"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1672,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "f49c5e10-d32b-4344-b3eb-1ce58738402a",
          "title": "API Service Group",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3c2d4494-69c1-41d8-ab96-c4b5a55fc9d4",
              "title": "Create Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 791,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.serviceids = res.body.data[0].id\nglobal.names = res.body.data[0].name\nglobal.desc = res.body.data[0].description\nglobal.codes = res.body.data[0].code\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\n//console.log(\"ini id sg : \"+global.serviceids);",
                  "err": {},
                  "uuid": "04187ade-3efa-4597-8865-70468d3dce28",
                  "parentUUID": "3c2d4494-69c1-41d8-ab96-c4b5a55fc9d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 954,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code1, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah1)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.serviceids1 = res.body.data[0].id\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\n//console.log(\"ini id sg : \"+global.serviceids1);",
                  "err": {},
                  "uuid": "8542ec81-5b5d-4bd1-baa8-71133559e40d",
                  "parentUUID": "3c2d4494-69c1-41d8-ab96-c4b5a55fc9d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input existing data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input existing data, then user got response error",
                  "timedOut": false,
                  "duration": 798,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', 'Alda', 'this is triger from automation tools', datas.service_Group.ujrah)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "23fd1c79-9496-4207-be7f-49d42648072a",
                  "parentUUID": "3c2d4494-69c1-41d8-ab96-c4b5a55fc9d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 802,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "213040a3-8fd9-49ba-83ac-d792829a381b",
                  "parentUUID": "3c2d4494-69c1-41d8-ab96-c4b5a55fc9d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04187ade-3efa-4597-8865-70468d3dce28",
                "8542ec81-5b5d-4bd1-baa8-71133559e40d",
                "23fd1c79-9496-4207-be7f-49d42648072a",
                "213040a3-8fd9-49ba-83ac-d792829a381b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3345,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "49e5a72c-9226-4fab-8dc3-1146ca836afe",
              "title": "Get All Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Service Group when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 4068,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll.getallServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ids1 = res.body.data[1].id\nids2 = res.body.data[2].id\nglobal.idsgforppo = res.body.data[3].id\nglobal.idsgpuchase = res.body.data[4].id\nglobal.names1 = res.body.data[1].name\nglobal.desc1 = res.body.data[1].description\nglobal.codes1 = res.body.data[1].code",
                  "err": {},
                  "uuid": "f17a8a11-7bb2-4c5f-81ef-4459dcb8468e",
                  "parentUUID": "49e5a72c-9226-4fab-8dc3-1146ca836afe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f17a8a11-7bb2-4c5f-81ef-4459dcb8468e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4068,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7c70b89d-0e34-4887-8db7-4fa06655e7a0",
              "title": "Get All Public Service Group ",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Public Service Group  when user hit api get all public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1320,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAllpublic.getallpublicServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "8ec5a864-a8aa-488d-ac18-63389306a84c",
                  "parentUUID": "7c70b89d-0e34-4887-8db7-4fa06655e7a0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ec5a864-a8aa-488d-ac18-63389306a84c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1320,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "73fe2705-5f45-48ea-85fe-e14b2e672599",
              "title": "Get Detail Public Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 825,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, global.serviceids)\nif(res.status !==200){\n    console.log(\"getdetailpublic data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "d8140e0f-6bae-46a5-b48e-e8558143a324",
                  "parentUUID": "73fe2705-5f45-48ea-85fe-e14b2e672599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail public with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 753,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {},
                  "uuid": "12463d61-0e0c-4cad-9f1f-5bfd786b217c",
                  "parentUUID": "73fe2705-5f45-48ea-85fe-e14b2e672599",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8140e0f-6bae-46a5-b48e-e8558143a324",
                "12463d61-0e0c-4cad-9f1f-5bfd786b217c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1578,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "6a571bd3-252e-43e4-837c-ef09a41fd709",
              "title": "Get Detail Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 803,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, global.serviceids)\nif(res.status !==200){\n    console.log(\"getdetail data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "80ebec30-1c81-4cd7-9265-0c4697bf600d",
                  "parentUUID": "6a571bd3-252e-43e4-837c-ef09a41fd709",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 771,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {},
                  "uuid": "8d399ecd-c8f7-4797-89d9-ed6f42f90d0b",
                  "parentUUID": "6a571bd3-252e-43e4-837c-ef09a41fd709",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80ebec30-1c81-4cd7-9265-0c4697bf600d",
                "8d399ecd-c8f7-4797-89d9-ed6f42f90d0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1574,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "b2b2b4ab-3a50-486d-ba16-428750c084e2",
              "title": "Update Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 797,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "d584b9dc-c62a-4242-86aa-d392b4c91548",
                  "parentUUID": "b2b2b4ab-3a50-486d-ba16-428750c084e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different code and same description and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different code and same description and same name then user got response 200",
                  "timedOut": false,
                  "duration": 828,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, datas.service_Group.code, global.names, global.desc, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "70a4b97e-366b-4022-95fc-19f78f711adf",
                  "parentUUID": "b2b2b4ab-3a50-486d-ba16-428750c084e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different name and same code then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different name and same code then user got response 200",
                  "timedOut": false,
                  "duration": 791,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes, datas.service_Group.name, global.desc, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "a561ca3a-476c-4c6e-8bf9-79eae0f8bc31",
                  "parentUUID": "b2b2b4ab-3a50-486d-ba16-428750c084e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different description and same code and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different description and same code and same name then user got response 200",
                  "timedOut": false,
                  "duration": 851,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes, global.names, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "7673326a-ee53-49eb-8a82-a2d082bffce1",
                  "parentUUID": "b2b2b4ab-3a50-486d-ba16-428750c084e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input same data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input same data, then user got response error",
                  "timedOut": false,
                  "duration": 713,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes1, global.names1, global.desc1, datas.service_Group.ujrah)   \nassert(res.status).to.equal(500)",
                  "err": {},
                  "uuid": "435845e7-a2f3-4f6c-9489-a7d49b3e582d",
                  "parentUUID": "b2b2b4ab-3a50-486d-ba16-428750c084e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 778,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.ids1, global.codes, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nassert(res.status).to.equal(500)",
                  "err": {},
                  "uuid": "e1851ede-aa89-4b76-a967-760214059dda",
                  "parentUUID": "b2b2b4ab-3a50-486d-ba16-428750c084e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d584b9dc-c62a-4242-86aa-d392b4c91548",
                "70a4b97e-366b-4022-95fc-19f78f711adf",
                "a561ca3a-476c-4c6e-8bf9-79eae0f8bc31",
                "7673326a-ee53-49eb-8a82-a2d082bffce1",
                "435845e7-a2f3-4f6c-9489-a7d49b3e582d",
                "e1851ede-aa89-4b76-a967-760214059dda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4758,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c8993b5f-b7ce-4ee5-a199-4ed99f89b6a1",
              "title": "Delete data Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a0d7b945-8699-4eca-b6d5-a1753f3a0ebe",
                  "parentUUID": "c8993b5f-b7ce-4ee5-a199-4ed99f89b6a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3fa9de08-f405-4527-abde-91c9a3339294",
                  "parentUUID": "c8993b5f-b7ce-4ee5-a199-4ed99f89b6a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "a0d7b945-8699-4eca-b6d5-a1753f3a0ebe",
                "3fa9de08-f405-4527-abde-91c9a3339294"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "8deadfce-6c1b-48f7-9ab6-ea8f6fc012cd",
          "title": "API Extension Clause",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "54e41a79-1199-4122-aec5-c655322d43dc",
              "title": "Create ExtensionClause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Create ExtensionClause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 732,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_create.createExtensionClause(global.access_Tokens1, datas.Extension_clause.code, datas.service_Group.name, datas.service_Group.description, global.codes)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(true)\nglobal.ECids = res.body.data[0].id",
                  "err": {},
                  "uuid": "8856912a-512b-45e6-bcaf-466495561d79",
                  "parentUUID": "54e41a79-1199-4122-aec5-c655322d43dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8856912a-512b-45e6-bcaf-466495561d79"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 732,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c3fb5a0e-7222-4407-bb0d-8e37354e39d2",
              "title": "Get all data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Extension Clause when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1649,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getall.getallExtensionClause(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ECids1 = res.body.data[1].id\nglobal.ECserviceCode1 = res.body.data[1].service_group_code\nglobal.code1 = res.body.data[1].code\nglobal.name1 = res.body.data[1].name\nglobal.code2 = res.body.data[0].code\nglobal.name2 = res.body.data[0].name\nglobal.ECserviceCode2 = res.body.data[0].service_group_code\nglobal.desc2 = res.body.data[0].description",
                  "err": {},
                  "uuid": "834ce495-4c95-4003-87c6-47a33a4f7a9c",
                  "parentUUID": "c3fb5a0e-7222-4407-bb0d-8e37354e39d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "834ce495-4c95-4003-87c6-47a33a4f7a9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1649,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "161c73c5-c72c-4214-af2c-dad925ef0ace",
              "title": "Delete data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "019a20e8-73ed-4357-ab56-5bc071076bba",
                  "parentUUID": "161c73c5-c72c-4214-af2c-dad925ef0ace",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a8670202-9e29-44dd-b604-84b57fb305e4",
                  "parentUUID": "161c73c5-c72c-4214-af2c-dad925ef0ace",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "019a20e8-73ed-4357-ab56-5bc071076bba",
                "a8670202-9e29-44dd-b604-84b57fb305e4"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "01d8e0bd-3fc7-4c81-8169-d1d2ade65ebb",
              "title": "Get Detail Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 738,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, global.ECids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").to.equal(global.ECids)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(true)",
                  "err": {},
                  "uuid": "68d01d3a-7dd5-41cc-a961-cfa610f84060",
                  "parentUUID": "01d8e0bd-3fc7-4c81-8169-d1d2ade65ebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 727,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, datas.Extension_clause.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc.id).to.equal('error data tidak ditemukan')",
                  "err": {},
                  "uuid": "a3160836-12dd-4b99-928f-4c36a5bf34e8",
                  "parentUUID": "01d8e0bd-3fc7-4c81-8169-d1d2ade65ebb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68d01d3a-7dd5-41cc-a961-cfa610f84060",
                "a3160836-12dd-4b99-928f-4c36a5bf34e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1465,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d32a8c84-b34d-43fb-acfe-53d672a7944d",
              "title": "update data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause update data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 782,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Update.updateExtensionClause(global.access_Tokens1, global.ECids, global.code1, global.name1, datas.Extension_clause.description, global.ECserviceCode1)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "f14007a1-a5b7-48aa-90ce-56bc6f46af01",
                  "parentUUID": "d32a8c84-b34d-43fb-acfe-53d672a7944d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f14007a1-a5b7-48aa-90ce-56bc6f46af01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 782,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a1038e11-25a7-4c36-a920-fa5901c2a99a",
              "title": "Search data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 1491,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name1)\nif(res.status !== 200){\n    console.log(\"error search EC\" +res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "90d5565a-cd3d-43b9-bd92-43920dbb291d",
                  "parentUUID": "a1038e11-25a7-4c36-a920-fa5901c2a99a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid service group, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using invalid service group, then user got response error",
                  "timedOut": false,
                  "duration": 727,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, datas.Extension_clause.invalid_service_group_code, global.code1, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "7d1a0b18-68c8-40e5-a7e4-4016ac6672e0",
                  "parentUUID": "a1038e11-25a7-4c36-a920-fa5901c2a99a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_code and with same service group and same name, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_code and with same service group and same name, then user got response error",
                  "timedOut": false,
                  "duration": 742,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code2, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "dc28e3c2-4259-4b9f-8f2f-d9f9a965a497",
                  "parentUUID": "a1038e11-25a7-4c36-a920-fa5901c2a99a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_name and with same service group and same code, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_name and with same service group and same code, then user got response error",
                  "timedOut": false,
                  "duration": 735,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name2)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "89ca5025-63ec-42be-8817-d098a6902940",
                  "parentUUID": "a1038e11-25a7-4c36-a920-fa5901c2a99a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90d5565a-cd3d-43b9-bd92-43920dbb291d",
                "7d1a0b18-68c8-40e5-a7e4-4016ac6672e0",
                "dc28e3c2-4259-4b9f-8f2f-d9f9a965a497",
                "89ca5025-63ec-42be-8817-d098a6902940"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3695,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "25562409-a15e-4d22-976e-a978b2bae82b",
              "title": "Create Deductible API",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Deductible API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 749,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.deducids = res.body.data[0].id",
                  "err": {},
                  "uuid": "f6ee1384-0d0b-4d6d-88ff-6684a9ef8a6f",
                  "parentUUID": "25562409-a15e-4d22-976e-a978b2bae82b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong service group, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong service group, then user got response error",
                  "timedOut": false,
                  "duration": 789,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, datas.Deductible.service_code, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Service Group Code Tidak Ditemukan\")",
                  "err": {},
                  "uuid": "ad39823e-5c00-4cee-a5fb-4fd5a088086a",
                  "parentUUID": "25562409-a15e-4d22-976e-a978b2bae82b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong calculate method, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong calculate method, then user got response error",
                  "timedOut": false,
                  "duration": 724,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {},
                  "uuid": "4369dd80-796e-4eda-807f-a9c7a4c0f136",
                  "parentUUID": "25562409-a15e-4d22-976e-a978b2bae82b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input deduction value with string, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input deduction value with string, then user got response error",
                  "timedOut": false,
                  "duration": 778,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {},
                  "uuid": "76e8bc59-5fab-42ee-b770-b112978ea6b1",
                  "parentUUID": "25562409-a15e-4d22-976e-a978b2bae82b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6ee1384-0d0b-4d6d-88ff-6684a9ef8a6f",
                "ad39823e-5c00-4cee-a5fb-4fd5a088086a",
                "4369dd80-796e-4eda-807f-a9c7a4c0f136",
                "76e8bc59-5fab-42ee-b770-b112978ea6b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3040,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ce1827c4-1b1e-4764-b90b-dcf83a66a3f6",
              "title": "Get all Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all Deduction when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1972,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getall.getDeductible(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "07f35d0c-6530-4860-b14f-df6c9a0a7dda",
                  "parentUUID": "ce1827c4-1b1e-4764-b90b-dcf83a66a3f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07f35d0c-6530-4860-b14f-df6c9a0a7dda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1972,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "67f3a645-2a85-4506-8f26-3f898bb4ed24",
              "title": "Get Detail Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 748,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(global.deducids, global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "c597d113-e750-45d6-9618-b7d90d5e5cab",
                  "parentUUID": "67f3a645-2a85-4506-8f26-3f898bb4ed24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 1121,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(datas.Deductible.wrong_idDeduc, global.access_Tokens1)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {},
                  "uuid": "fee914c0-880f-493b-bd05-08bdf7a2f76a",
                  "parentUUID": "67f3a645-2a85-4506-8f26-3f898bb4ed24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c597d113-e750-45d6-9618-b7d90d5e5cab",
                "fee914c0-880f-493b-bd05-08bdf7a2f76a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1869,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "8bc07083-d5f8-4ef0-811c-1d148b1254c6",
              "title": "Update Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 747,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method1, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "ca4c3b6c-c816-4701-b894-d4b4aabbd7a8",
                  "parentUUID": "8bc07083-d5f8-4ef0-811c-1d148b1254c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid Deduction id, then user got response error",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input data using invalid Deduction id, then user got response error",
                  "timedOut": false,
                  "duration": 777,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, datas.Deductible.wrong_idDeduc, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Deductible ID Tidak Ditemukan\")",
                  "err": {},
                  "uuid": "0182a86d-558b-40f9-8e05-63a832b7488f",
                  "parentUUID": "8bc07083-d5f8-4ef0-811c-1d148b1254c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu Method then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu Method then user got response 200",
                  "timedOut": false,
                  "duration": 775,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {},
                  "uuid": "5ee5c502-fec9-4c5c-9871-a604f37e77fd",
                  "parentUUID": "8bc07083-d5f8-4ef0-811c-1d148b1254c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu value with string, then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu value with string, then user got response 200",
                  "timedOut": false,
                  "duration": 907,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {},
                  "uuid": "d24f4035-2af8-4ee7-9dda-fe9f45e5707a",
                  "parentUUID": "8bc07083-d5f8-4ef0-811c-1d148b1254c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca4c3b6c-c816-4701-b894-d4b4aabbd7a8",
                "0182a86d-558b-40f9-8e05-63a832b7488f",
                "5ee5c502-fec9-4c5c-9871-a604f37e77fd",
                "d24f4035-2af8-4ee7-9dda-fe9f45e5707a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3206,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c5618e21-e667-4b53-8d64-c28d7701baff",
              "title": "Search Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 734,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Search.searchDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "c1cc3f9c-5e30-48c2-9991-e2ce8e6f0fae",
                  "parentUUID": "c5618e21-e667-4b53-8d64-c28d7701baff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1cc3f9c-5e30-48c2-9991-e2ce8e6f0fae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 734,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "391a3fa0-ff4c-459f-a06d-378763a94c96",
              "title": "Deleted Deduction APi",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "78f73f95-2581-4f60-8187-790d989fd542",
                  "parentUUID": "391a3fa0-ff4c-459f-a06d-378763a94c96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7619b20b-988a-44e6-926f-78dcd5fd0739",
                  "parentUUID": "391a3fa0-ff4c-459f-a06d-378763a94c96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "78f73f95-2581-4f60-8187-790d989fd542",
                "7619b20b-988a-44e6-926f-78dcd5fd0739"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "77051d4d-9c00-47ba-be18-069a09bc064c",
              "title": "Create Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 1090,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\nglobal.idpoc = res.body.data[0].id\n//console.log(\"ini poc : \"+global.idpoc);",
                  "err": {},
                  "uuid": "8cfa404a-09b1-4090-8081-ad661e254ea1",
                  "parentUUID": "77051d4d-9c00-47ba-be18-069a09bc064c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 737,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids1, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\nglobal.idpoc1 = res.body.data[0].id\n//console.log(\"ini poc : \"+global.idpoc);",
                  "err": {},
                  "uuid": "9ebdf594-32f8-4e3d-b0bd-f94c396bf9be",
                  "parentUUID": "77051d4d-9c00-47ba-be18-069a09bc064c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 740,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "a7b33e91-2f48-48fa-a95b-47f7418276da",
                  "parentUUID": "77051d4d-9c00-47ba-be18-069a09bc064c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": false,
                  "duration": 704,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "14c9e3df-2e6d-40a0-9259-45a597c87b4c",
                  "parentUUID": "77051d4d-9c00-47ba-be18-069a09bc064c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 717,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "de73d0b1-555f-4ecd-b2e7-0bab07ed3bf3",
                  "parentUUID": "77051d4d-9c00-47ba-be18-069a09bc064c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8cfa404a-09b1-4090-8081-ad661e254ea1",
                "9ebdf594-32f8-4e3d-b0bd-f94c396bf9be",
                "a7b33e91-2f48-48fa-a95b-47f7418276da",
                "14c9e3df-2e6d-40a0-9259-45a597c87b4c",
                "de73d0b1-555f-4ecd-b2e7-0bab07ed3bf3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3988,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ef8b4828-2b2e-4bb1-8bab-8ea171d95a42",
              "title": "Get all data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Product Contribution when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 2479,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getall.getContribution(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\ncontriId = res.body.data[0].id\nglobal.contripurchase = res.body.data[1].id",
                  "err": {},
                  "uuid": "26b9eb4d-d40e-4d98-844c-89e2de558147",
                  "parentUUID": "ef8b4828-2b2e-4bb1-8bab-8ea171d95a42",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26b9eb4d-d40e-4d98-844c-89e2de558147"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2479,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "73c680e6-f2bf-4dd5-a523-8613cdd5ea21",
              "title": "Get detail Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 868,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, global.serviceids)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {},
                  "uuid": "b49f60fb-c257-4bd1-b90e-6362810c2613",
                  "parentUUID": "73c680e6-f2bf-4dd5-a523-8613cdd5ea21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 762,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {},
                  "uuid": "7c8b1cc7-92bb-4a4c-9257-13ddeb339a96",
                  "parentUUID": "73c680e6-f2bf-4dd5-a523-8613cdd5ea21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b49f60fb-c257-4bd1-b90e-6362810c2613",
                "7c8b1cc7-92bb-4a4c-9257-13ddeb339a96"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1630,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "f99ed105-da02-4327-8486-074f1e1e7bb5",
              "title": "Update data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 802,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Update.updateContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.contribution.isPopular.false, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee, contriId)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {},
                  "uuid": "5a87ad9f-0fb4-4c74-bd08-f31f7ad6fc7e",
                  "parentUUID": "f99ed105-da02-4327-8486-074f1e1e7bb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 768,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "be597807-addf-49c8-b5fd-b67cabe5e257",
                  "parentUUID": "f99ed105-da02-4327-8486-074f1e1e7bb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": false,
                  "duration": 768,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "b4cc0b04-4c2d-471a-b498-2d564ca141d8",
                  "parentUUID": "f99ed105-da02-4327-8486-074f1e1e7bb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 813,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "ffcf8f90-9c43-411e-9e85-aaf65e766e8b",
                  "parentUUID": "f99ed105-da02-4327-8486-074f1e1e7bb5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a87ad9f-0fb4-4c74-bd08-f31f7ad6fc7e",
                "be597807-addf-49c8-b5fd-b67cabe5e257",
                "b4cc0b04-4c2d-471a-b498-2d564ca141d8",
                "ffcf8f90-9c43-411e-9e85-aaf65e766e8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3151,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "cd953ed3-0ab9-4548-8d05-bc64b78c8c6f",
              "title": "Delete Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5c9f4640-c111-4cdd-b369-395f051bcc3b",
                  "parentUUID": "cd953ed3-0ab9-4548-8d05-bc64b78c8c6f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "cb450091-afe9-41d6-9433-4d60f000a8f7",
                  "parentUUID": "cd953ed3-0ab9-4548-8d05-bc64b78c8c6f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "5c9f4640-c111-4cdd-b369-395f051bcc3b",
                "cb450091-afe9-41d6-9433-4d60f000a8f7"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "57791a35-d6d1-41cb-89ad-989d3d0ac4de",
          "title": "Payment Api Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
          "file": "/test/suite3_paymentService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac63215d-232c-4bd3-af68-4fd1fb213c4a",
              "title": "Create Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Provider when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 780,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Provider.createPaymentProvider(global.access_Tokens1, datas.paymentProvider.callback_url, datas.paymentProvider.code, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"code\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"callback_url\").to.equal(datas.paymentProvider.callback_url)\nproviderids = res.body.data[0].id",
                  "err": {},
                  "uuid": "4b3d58fb-d525-4df4-a57b-6487bd13c280",
                  "parentUUID": "ac63215d-232c-4bd3-af68-4fd1fb213c4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b3d58fb-d525-4df4-a57b-6487bd13c280"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 780,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "3e7cc2cb-a8e1-4b2e-adac-4b4640e2d420",
              "title": "Get all Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Payment Provider when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1210,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Provider.getPaymentProvider(global.access_Tokens1)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"code\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"callback_url\").exist\nid1 = res.body.data[1].id",
                  "err": {},
                  "uuid": "fb093e86-3825-4fd9-8588-5b904901407c",
                  "parentUUID": "3e7cc2cb-a8e1-4b2e-adac-4b4640e2d420",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb093e86-3825-4fd9-8588-5b904901407c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1210,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1b17188d-23da-4021-9cd4-28743bcf4fec",
              "title": "Get detail payment provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 741,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, providerids)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "0e560687-b322-4586-bf90-d6573bc04c39",
                  "parentUUID": "1b17188d-23da-4021-9cd4-28743bcf4fec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 749,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID)\nassert(res.status).to.equal(500)",
                  "err": {},
                  "uuid": "fd648166-e5ef-4929-94ad-e16c529a1a41",
                  "parentUUID": "1b17188d-23da-4021-9cd4-28743bcf4fec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e560687-b322-4586-bf90-d6573bc04c39",
                "fd648166-e5ef-4929-94ad-e16c529a1a41"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1490,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e931cc0c-2e8c-476e-a38b-1be96da4c380",
              "title": "Update Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 751,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, providerids, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"Failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "c38026a7-36e9-4131-9389-ad63eea428cf",
                  "parentUUID": "e931cc0c-2e8c-476e-a38b-1be96da4c380",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 744,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID, datas.paymentProvider.callback_url, datas.paymentProvider.wrongCode, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "6a698c0a-89e6-492b-95c6-e3249f9e6173",
                  "parentUUID": "e931cc0c-2e8c-476e-a38b-1be96da4c380",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using existing code, then user got response error",
                  "timedOut": false,
                  "duration": 773,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "96d430ef-7743-426e-b06e-ac93c74fad97",
                  "parentUUID": "e931cc0c-2e8c-476e-a38b-1be96da4c380",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid authorization, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid authorization, then user got response error",
                  "timedOut": false,
                  "duration": 706,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(datas.paymentProvider.invalid_auth, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(401)",
                  "err": {},
                  "uuid": "359aa98c-4803-4c01-98c7-103805451841",
                  "parentUUID": "e931cc0c-2e8c-476e-a38b-1be96da4c380",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c38026a7-36e9-4131-9389-ad63eea428cf",
                "6a698c0a-89e6-492b-95c6-e3249f9e6173",
                "96d430ef-7743-426e-b06e-ac93c74fad97",
                "359aa98c-4803-4c01-98c7-103805451841"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2974,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "46a34313-e893-4203-b01c-d0c7849f49fe",
              "title": "Delete payment Provider API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a2e5832b-39df-4607-88d2-17f1c0339b3b",
                  "parentUUID": "46a34313-e893-4203-b01c-d0c7849f49fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d976c5ba-0760-4816-adab-1eeb81823c0b",
                  "parentUUID": "46a34313-e893-4203-b01c-d0c7849f49fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "e0489b5d-d79c-4956-99a1-21d944510317",
                  "parentUUID": "46a34313-e893-4203-b01c-d0c7849f49fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "a2e5832b-39df-4607-88d2-17f1c0339b3b",
                "d976c5ba-0760-4816-adab-1eeb81823c0b",
                "e0489b5d-d79c-4956-99a1-21d944510317"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "da927df5-d4e9-4f9e-9fc0-e5e3ee039efb",
              "title": "Create Payment Option API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 2206,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bankName =  [\"shopeepay\", \"qris\", \"gopay\"]\nfor (let x in bankName) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, 'EWALLET', datas.Deductible.description, datas.paymentOption.fixfee, bankName[x], 0, providerids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(bankName[x])\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nglobal.idpaoption = res.body.data[0].id\nidpaoption3 = res.body.data[0].name\n\n}",
                  "err": {},
                  "uuid": "9718dc8e-db4a-434d-974d-c2fb6e919142",
                  "parentUUID": "da927df5-d4e9-4f9e-9fc0-e5e3ee039efb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 6337,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bankName =  [\"mandiri\", \"cimb\", \"mega\", \"bni\", \"bca\", \"permata\", \"bri\", \"maybank\"]\nfor (let x in bankName) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, \"BANK_TRANSFER\", datas.Deductible.description, 0 , bankName[x] , datas.paymentOption.persenfee , id1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(bankName[x])\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nglobal.idpaoption1 = res.body.data[0].id\nglobal.bankname = res.body.data[0].name\n}",
                  "err": {},
                  "uuid": "b0787d56-72a5-4c2a-9651-bb83cee0e166",
                  "parentUUID": "da927df5-d4e9-4f9e-9fc0-e5e3ee039efb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong category, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input wrong category, then user got response error",
                  "timedOut": false,
                  "duration": 779,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, datas.paymentOption.wrong_category, datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,0 , id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"kategori tidak valid\")",
                  "err": {},
                  "uuid": "e8a3e55e-be71-4c30-9940-d7716ed6f344",
                  "parentUUID": "da927df5-d4e9-4f9e-9fc0-e5e3ee039efb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input provider id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input provider id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 751,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {},
                  "uuid": "552f316d-5946-487d-a000-a0670424ce9b",
                  "parentUUID": "da927df5-d4e9-4f9e-9fc0-e5e3ee039efb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input persen fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 754,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "9e41161a-ce82-4f79-a774-d899f533ad2f",
                  "parentUUID": "da927df5-d4e9-4f9e-9fc0-e5e3ee039efb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input fix fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 726,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "fa5ba9a6-a896-4e8d-9a9d-33d0d8595d3b",
                  "parentUUID": "da927df5-d4e9-4f9e-9fc0-e5e3ee039efb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9718dc8e-db4a-434d-974d-c2fb6e919142",
                "b0787d56-72a5-4c2a-9651-bb83cee0e166",
                "e8a3e55e-be71-4c30-9940-d7716ed6f344",
                "552f316d-5946-487d-a000-a0670424ce9b",
                "9e41161a-ce82-4f79-a774-d899f533ad2f",
                "fa5ba9a6-a896-4e8d-9a9d-33d0d8595d3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11553,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "fb1830f1-b57b-43db-8b74-b90b7fbdc23d",
              "title": "Get all payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all payment option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 3881,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Option.getPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nidpo = res.body.data[0].id\nidpo1 = res.body.data[1].id\nidpo2 = res.body.data[2].id\nidpo3 = res.body.data[3].id\n//console.log(idpo);\n//console.log(idpo1);\n//console.log(idpo2);",
                  "err": {},
                  "uuid": "c870bafc-ef43-4ed5-bcd8-a8b603df5e4c",
                  "parentUUID": "fb1830f1-b57b-43db-8b74-b90b7fbdc23d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c870bafc-ef43-4ed5-bcd8-a8b603df5e4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3881,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "fee7568b-05f9-472a-a672-ac6ee4e035e5",
              "title": "Get Detail payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 722,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, idpo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist",
                  "err": {},
                  "uuid": "8197a9b2-0092-40fb-b41f-a6ef3d1284c9",
                  "parentUUID": "fee7568b-05f9-472a-a672-ac6ee4e035e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 721,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)",
                  "err": {},
                  "uuid": "2eea2054-54a0-4164-89af-d3e6a7962e15",
                  "parentUUID": "fee7568b-05f9-472a-a672-ac6ee4e035e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8197a9b2-0092-40fb-b41f-a6ef3d1284c9",
                "2eea2054-54a0-4164-89af-d3e6a7962e15"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1443,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "b569d007-f9b3-4023-a20f-092b6818846d",
              "title": "Update Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 797,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"EWALLET\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "5681a01a-f942-44ce-8653-018ee725cca3",
                  "parentUUID": "b569d007-f9b3-4023-a20f-092b6818846d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 799,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"BANK_TRANSFER\", datas.Deductible.description, datas.paymentOption.fixfee , datas.paymentOption.name , 0 , id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "326e69a8-f410-4a6e-90e1-6af49ef9b709",
                  "parentUUID": "b569d007-f9b3-4023-a20f-092b6818846d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 733,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {},
                  "uuid": "268f3041-a369-443f-994e-51a005617cc7",
                  "parentUUID": "b569d007-f9b3-4023-a20f-092b6818846d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input persen fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 728,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "e457e36f-8ec0-45f6-9414-ead6f1625378",
                  "parentUUID": "b569d007-f9b3-4023-a20f-092b6818846d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input fix fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 729,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "1e00dc5b-8d8f-491f-8c8b-4a5a575298b5",
                  "parentUUID": "b569d007-f9b3-4023-a20f-092b6818846d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 712,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name , 0 , id1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {},
                  "uuid": "f403e82b-5aa3-4b00-ab89-bee7c7875854",
                  "parentUUID": "b569d007-f9b3-4023-a20f-092b6818846d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5681a01a-f942-44ce-8653-018ee725cca3",
                "326e69a8-f410-4a6e-90e1-6af49ef9b709",
                "268f3041-a369-443f-994e-51a005617cc7",
                "e457e36f-8ec0-45f6-9414-ead6f1625378",
                "1e00dc5b-8d8f-491f-8c8b-4a5a575298b5",
                "f403e82b-5aa3-4b00-ab89-bee7c7875854"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4498,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1f9b22a5-c061-465a-a263-56c9906644ba",
              "title": "Delete Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ae02b2de-3afe-471d-a7aa-92af8e8b13d9",
                  "parentUUID": "1f9b22a5-c061-465a-a263-56c9906644ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b3e54819-819d-40fb-997b-d241dbaf94af",
                  "parentUUID": "1f9b22a5-c061-465a-a263-56c9906644ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "11ced3a2-02b0-438a-8965-658f406b6237",
                  "parentUUID": "1f9b22a5-c061-465a-a263-56c9906644ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c15c8b5e-62e7-45ff-bf86-0cc3ad4c5fc2",
                  "parentUUID": "1f9b22a5-c061-465a-a263-56c9906644ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "ae02b2de-3afe-471d-a7aa-92af8e8b13d9",
                "b3e54819-819d-40fb-997b-d241dbaf94af",
                "11ced3a2-02b0-438a-8965-658f406b6237",
                "c15c8b5e-62e7-45ff-bf86-0cc3ad4c5fc2"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ca3b7684-f4f6-49e0-aaeb-3cd99d6d0947",
              "title": "Create Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 738,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.idpaoption, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nglobal.ppoid = res.body.data[0].id\nglobal.payment_option_id = res.body.data[0].payment_option_id\nglobal.service_group_id = res.body.data[0].service_group_id\n//console.log(\"ini ppoids : \"+global.ppoid);\n//console.log(\"ini payment_option_id : \"+global.payment_option_id);\n//console.log(\"ini service_group_id : \"+global.service_group_id);",
                  "err": {},
                  "uuid": "638899f9-bc14-4175-aada-bbffe4558c86",
                  "parentUUID": "ca3b7684-f4f6-49e0-aaeb-3cd99d6d0947",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 775,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.idpaoption1, global.serviceids1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nglobal.ppoid1 = res.body.data[0].id\nglobal.payment_option_id1 = res.body.data[0].payment_option_id\nglobal.service_group_id1 = res.body.data[0].service_group_id\n//console.log(\"ini ppoids : \"+global.ppoid);\n//console.log(\"ini payment_option_id : \"+global.payment_option_id);\n//console.log(\"ini service_group_id : \"+global.service_group_id);",
                  "err": {},
                  "uuid": "32e0ec80-f84b-4d4a-a0c7-e5acda3072dd",
                  "parentUUID": "ca3b7684-f4f6-49e0-aaeb-3cd99d6d0947",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input service group id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input service group id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "bcf513f8-3198-4c9b-ae08-3adcb6ad1592",
                  "parentUUID": "ca3b7684-f4f6-49e0-aaeb-3cd99d6d0947",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 722,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, global.idsgforppo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\")",
                  "err": {},
                  "uuid": "56b94c4c-59cd-4c58-8d33-7d91e4ad68f2",
                  "parentUUID": "ca3b7684-f4f6-49e0-aaeb-3cd99d6d0947",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "638899f9-bc14-4175-aada-bbffe4558c86",
                "32e0ec80-f84b-4d4a-a0c7-e5acda3072dd",
                "56b94c4c-59cd-4c58-8d33-7d91e4ad68f2"
              ],
              "failures": [],
              "pending": [
                "bcf513f8-3198-4c9b-ae08-3adcb6ad1592"
              ],
              "skipped": [],
              "duration": 2235,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "cffb4c4a-76fa-4a47-9a7a-13d7444a54bf",
              "title": "Get all Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1679,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPO.getProductPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nidppo0 = res.body.data[0].id\nidppo1 = res.body.data[1].id\nidppo2 = res.body.data[2].id",
                  "err": {},
                  "uuid": "ce2ec15b-23b8-4df7-a42c-e5d973b7bf18",
                  "parentUUID": "cffb4c4a-76fa-4a47-9a7a-13d7444a54bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce2ec15b-23b8-4df7-a42c-e5d973b7bf18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1679,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "abb0421a-b8ab-4f73-9125-490dac8d277c",
              "title": "Get all Product Payment Option with Service Group Id",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 735,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nidppo = res.body.data[0].id",
                  "err": {},
                  "uuid": "9e4e9865-3923-4f9d-aec2-862b3cce21ef",
                  "parentUUID": "abb0421a-b8ab-4f73-9125-490dac8d277c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid sg id, then user got response error",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user input invalid sg id, then user got response error",
                  "timedOut": false,
                  "duration": 1196,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "fcee5a5b-4618-4b17-a963-a8822ffe21a5",
                  "parentUUID": "abb0421a-b8ab-4f73-9125-490dac8d277c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e4e9865-3923-4f9d-aec2-862b3cce21ef",
                "fcee5a5b-4618-4b17-a963-a8822ffe21a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1931,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "8d4b9b52-34f3-4065-a43e-97fcaa9addc4",
              "title": "Get detail Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 788,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, idppo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {},
                  "uuid": "c0750070-60c0-4caf-896d-d14367b848a9",
                  "parentUUID": "8d4b9b52-34f3-4065-a43e-97fcaa9addc4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 770,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {},
                  "uuid": "66125184-2807-4296-8685-5a63160db586",
                  "parentUUID": "8d4b9b52-34f3-4065-a43e-97fcaa9addc4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0750070-60c0-4caf-896d-d14367b848a9",
                "66125184-2807-4296-8685-5a63160db586"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1558,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "f56573ef-a30e-4a2c-a927-1a12dfabe994",
              "title": "Update Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 754,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, global.payment_option_id, global.service_group_id, global.ppoid)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {},
                  "uuid": "58716952-d3d3-49cf-9b6c-c2c0c7f22dbd",
                  "parentUUID": "f56573ef-a30e-4a2c-a927-1a12dfabe994",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 760,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.payment_option_id, global.service_group_id, global.ppoid)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {},
                  "uuid": "84815ca4-ffb4-4103-b482-e1be8a1bce6c",
                  "parentUUID": "f56573ef-a30e-4a2c-a927-1a12dfabe994",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PPO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PPO id, then user got response error",
                  "timedOut": false,
                  "duration": 783,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, idpo, idsgforppo, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {},
                  "uuid": "bfe848bd-162d-4312-bfd8-76f575b31446",
                  "parentUUID": "f56573ef-a30e-4a2c-a927-1a12dfabe994",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid SG id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid SG id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "6a576df0-4f07-4d33-a9ae-adafff20405f",
                  "parentUUID": "f56573ef-a30e-4a2c-a927-1a12dfabe994",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PO id, then user got response error",
                  "timedOut": false,
                  "duration": 733,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, idsgforppo, idppo)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "36f4c11c-6024-435b-bc85-3abdd8159bac",
                  "parentUUID": "f56573ef-a30e-4a2c-a927-1a12dfabe994",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58716952-d3d3-49cf-9b6c-c2c0c7f22dbd",
                "84815ca4-ffb4-4103-b482-e1be8a1bce6c",
                "bfe848bd-162d-4312-bfd8-76f575b31446",
                "36f4c11c-6024-435b-bc85-3abdd8159bac"
              ],
              "failures": [],
              "pending": [
                "6a576df0-4f07-4d33-a9ae-adafff20405f"
              ],
              "skipped": [],
              "duration": 3030,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "8b12aaf6-6909-4935-8d7b-92f37b9b4f73",
              "title": "Get Payment Option Page",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get page payment with valid token and service group, then user got response 200/OK",
                  "fullTitle": "Payment Api Service Get Payment Option Page when user hit api get page payment with valid token and service group, then user got response 200/OK",
                  "timedOut": false,
                  "duration": 854,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getaPage.getPaymentOptionPage(global.access_Tokens1, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"category\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"description\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"image_url\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"percentage_fee\").exist",
                  "err": {},
                  "uuid": "2ace2ae4-154d-40f3-b620-c92e8c43b306",
                  "parentUUID": "8b12aaf6-6909-4935-8d7b-92f37b9b4f73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ace2ae4-154d-40f3-b620-c92e8c43b306"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 854,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1a8b41ac-d99d-4418-b90a-b558632598cb",
              "title": "Delete Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9358894b-7c5a-4af4-bf29-8569e797f6b3",
                  "parentUUID": "1a8b41ac-d99d-4418-b90a-b558632598cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d431a5f9-4cf1-49ef-a51f-d858b6cff00e",
                  "parentUUID": "1a8b41ac-d99d-4418-b90a-b558632598cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5160599a-16a9-4111-947c-ad3050273b7d",
                  "parentUUID": "1a8b41ac-d99d-4418-b90a-b558632598cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7f7c78f6-0c15-4b98-aa75-26c58b5778c3",
                  "parentUUID": "1a8b41ac-d99d-4418-b90a-b558632598cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "9358894b-7c5a-4af4-bf29-8569e797f6b3",
                "d431a5f9-4cf1-49ef-a51f-d858b6cff00e",
                "5160599a-16a9-4111-947c-ad3050273b7d",
                "7f7c78f6-0c15-4b98-aa75-26c58b5778c3"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "e69d93db-c5e7-45c7-a65d-c0eac92b7603",
          "title": "Purchase Service API",
          "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
          "file": "/test/suite4_purchase.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "048b100a-53c2-4621-aedb-b1e36094d3d8",
              "title": "Create Health Declaration",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create HD using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 888,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.true, global.serviceids, datas.purchase.type)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('type').to.equal('FIRST_TIME')\nassert(res.body.data[0]).to.have.property('status').to.equal('DRAFT_HEALTH_DECLARATION')\nassert(res.body.data[0].health_declaration_json).to.have.property('age').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('medical').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('job').exist\nglobal.idpurcahse = res.body.data[0].purchase_id\n//console.log(\"ini purchase id : \"+global.idpurcahse",
                  "err": {},
                  "uuid": "6e8ebddd-f3a5-482a-bedc-3be6a3d5b41a",
                  "parentUUID": "048b100a-53c2-4621-aedb-b1e36094d3d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 746,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.true, global.serviceids1, datas.purchase.type)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('type').to.equal('FIRST_TIME')\nassert(res.body.data[0]).to.have.property('status').to.equal('DRAFT_HEALTH_DECLARATION')\nassert(res.body.data[0].health_declaration_json).to.have.property('age').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('medical').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('job').exist\nglobal.idpurcahse1 = res.body.data[0].purchase_id\n//console.log(\"ini purchase id : \"+global.idpurcahse",
                  "err": {},
                  "uuid": "e573ecc3-0735-4263-b4ed-1644c5472cb1",
                  "parentUUID": "048b100a-53c2-4621-aedb-b1e36094d3d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD with value age = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD with value age = false, then user got response error",
                  "timedOut": false,
                  "duration": 823,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.false, datas.purchase.job.true, datas.purchase.medical.true, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "330a0c41-8282-4054-aa0a-ff498fa96766",
                  "parentUUID": "048b100a-53c2-4621-aedb-b1e36094d3d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD  with value job = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD  with value job = false, then user got response error",
                  "timedOut": false,
                  "duration": 789,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.false, datas.purchase.medical.true, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "a0aa126a-af47-4596-936c-875280faf97c",
                  "parentUUID": "048b100a-53c2-4621-aedb-b1e36094d3d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD  with value medical = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD  with value medical = false, then user got response error",
                  "timedOut": false,
                  "duration": 742,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.false, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "056a86a8-b5de-4e0e-bbd8-e76fd349ed81",
                  "parentUUID": "048b100a-53c2-4621-aedb-b1e36094d3d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e8ebddd-f3a5-482a-bedc-3be6a3d5b41a",
                "e573ecc3-0735-4263-b4ed-1644c5472cb1",
                "330a0c41-8282-4054-aa0a-ff498fa96766",
                "a0aa126a-af47-4596-936c-875280faf97c",
                "056a86a8-b5de-4e0e-bbd8-e76fd349ed81"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3988,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5cfbad80-2037-437b-bcb2-1254bf0ab1b8",
              "title": "Create KYC",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create kyc using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 770,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.validdobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {},
                  "uuid": "d0fa541c-5275-452d-b198-314a808b7a0f",
                  "parentUUID": "5cfbad80-2037-437b-bcb2-1254bf0ab1b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 850,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.validdobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {},
                  "uuid": "76fc6663-adf3-4f02-b6e8-a28bc2d15ee1",
                  "parentUUID": "5cfbad80-2037-437b-bcb2-1254bf0ab1b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using min dob(17th 180hr), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using min dob(17th 180hr), then user got response error",
                  "timedOut": false,
                  "duration": 831,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.minDobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Kamu harus berusia 18 - 55 tahun untuk jadi anggota\")",
                  "err": {},
                  "uuid": "0374d930-290a-427c-aa3b-d29588025c54",
                  "parentUUID": "5cfbad80-2037-437b-bcb2-1254bf0ab1b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using max dob(55th 181hr), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using max dob(55th 181hr), then user got response error",
                  "timedOut": false,
                  "duration": 890,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.maxDobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Kamu harus berusia 18 - 55 tahun untuk jadi anggota\")",
                  "err": {},
                  "uuid": "e3ba82be-0aeb-44ca-a6d2-3bb9f7dbce68",
                  "parentUUID": "5cfbad80-2037-437b-bcb2-1254bf0ab1b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using max dob(more than 16 digit), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using max dob(more than 16 digit), then user got response error",
                  "timedOut": false,
                  "duration": 750,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.valid_dob, datas.KYC.email, datas.KYC.fullname, datas.KYC.max_ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").exist",
                  "err": {},
                  "uuid": "ff4fc008-6538-4b05-a2da-a46131789570",
                  "parentUUID": "5cfbad80-2037-437b-bcb2-1254bf0ab1b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using min dob(less than 16 digit), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using min dob(less than 16 digit), then user got response error",
                  "timedOut": false,
                  "duration": 764,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.valid_dob, datas.KYC.email, datas.KYC.fullname, datas.KYC.min_ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").exist",
                  "err": {},
                  "uuid": "f8af2bb5-0f4d-4ebb-9fd8-f70bbb2fa5d4",
                  "parentUUID": "5cfbad80-2037-437b-bcb2-1254bf0ab1b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0fa541c-5275-452d-b198-314a808b7a0f",
                "76fc6663-adf3-4f02-b6e8-a28bc2d15ee1",
                "0374d930-290a-427c-aa3b-d29588025c54",
                "e3ba82be-0aeb-44ca-a6d2-3bb9f7dbce68",
                "ff4fc008-6538-4b05-a2da-a46131789570",
                "f8af2bb5-0f4d-4ebb-9fd8-f70bbb2fa5d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4855,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "811ac187-0e71-41c7-8cb1-e96786e37b6b",
              "title": "Create Beneficiary",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Beneficiary when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 896,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createbenef.createBeneficiary(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.benef.inform.true, datas.KYC.ktp, datas.KYC.phone, datas.benef.relation, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {},
                  "uuid": "384e718f-ca6c-4b95-80d7-9e13d8c197a2",
                  "parentUUID": "811ac187-0e71-41c7-8cb1-e96786e37b6b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Beneficiary when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 1131,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createbenef.createBeneficiary(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.benef.inform.true, datas.KYC.ktp, datas.KYC.phone, datas.benef.relation, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {},
                  "uuid": "7ed16558-73a2-4c88-a9ce-924cfcc5c863",
                  "parentUUID": "811ac187-0e71-41c7-8cb1-e96786e37b6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "384e718f-ca6c-4b95-80d7-9e13d8c197a2",
                "7ed16558-73a2-4c88-a9ce-924cfcc5c863"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2027,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "b6b846e0-0e12-455d-8098-f474178ae0db",
              "title": "Create Payment",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create payment using donation true, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation true, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 853,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, true, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('status').to.equal('PURCHASED')\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {},
                  "uuid": "bb8c6be7-f979-4b34-adbc-d0f254d3bcc0",
                  "parentUUID": "b6b846e0-0e12-455d-8098-f474178ae0db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create payment using donation true, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation true, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 738,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, true, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('status').to.equal('PURCHASED')\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {},
                  "uuid": "be4a23e7-cb99-479e-b8a6-fa3f8fa9a6c2",
                  "parentUUID": "b6b846e0-0e12-455d-8098-f474178ae0db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create payment using donation False, then user got response error",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation False, then user got response error",
                  "timedOut": false,
                  "duration": 717,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, false, global.idpurcahse)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "c14cc02d-8d28-4eda-b9ad-2763d8b14fbb",
                  "parentUUID": "b6b846e0-0e12-455d-8098-f474178ae0db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb8c6be7-f979-4b34-adbc-d0f254d3bcc0",
                "be4a23e7-cb99-479e-b8a6-fa3f8fa9a6c2",
                "c14cc02d-8d28-4eda-b9ad-2763d8b14fbb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2308,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "247314b9-a4d2-41e4-a1e9-78797c0e68a8",
              "title": "Get Data Summary",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user get data api get summary using valid purchase id, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Get Data Summary when user get data api get summary using valid purchase id, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 720,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getSummary.getSummary(global.access_Tokens1, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('status').exist\nassert(res.body.data[0]).to.have.property('type').exist\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {},
                  "uuid": "c6794d33-1449-4945-ab2b-291e2b6f8b99",
                  "parentUUID": "247314b9-a4d2-41e4-a1e9-78797c0e68a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user get data api get summary using invalid purchase id, then user got response error",
                  "fullTitle": "Purchase Service API Get Data Summary when user get data api get summary using invalid purchase id, then user got response error",
                  "timedOut": false,
                  "duration": 827,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getSummary.getSummary(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "907258ad-c287-42c5-8061-369c90c7948d",
                  "parentUUID": "247314b9-a4d2-41e4-a1e9-78797c0e68a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6794d33-1449-4945-ab2b-291e2b6f8b99",
                "907258ad-c287-42c5-8061-369c90c7948d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1547,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "d40509b5-cb50-4916-bc04-164b4baf9d32",
          "title": "API Calculation Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite5_calculation.js",
          "file": "/test/suite5_calculation.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "90c874a9-9393-4e91-8f85-5fe039ac1d0c",
              "title": "Get Calculate Payment",
              "fullFile": "/home/runner/work/flash/flash/test/suite5_calculation.js",
              "file": "/test/suite5_calculation.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: calucated in \"Get Calculate Payment\"",
                  "fullTitle": "API Calculation Service Get Calculate Payment \"before all\" hook: calucated in \"Get Calculate Payment\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "persenfee = datas.paymentOption.persenfee / 100\nfixfee = datas.paymentOption.fixfee\ntotalFeepersen = datas.calcu.contributeFee  * persenfee\ntotalFeefixfee = fixfee\ntotalpayment = datas.calcu.contributeFee + totalFeepersen\ntotalpayment1 = datas.calcu.contributeFee + totalFeefixfee",
                  "err": {},
                  "uuid": "8aeafbd2-a997-485b-9d15-268dbf417311",
                  "parentUUID": "90c874a9-9393-4e91-8f85-5fe039ac1d0c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "fullTitle": "API Calculation Service Get Calculate Payment when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 839,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await calcu.calcu(global.access_Tokens1, datas.calcu.contributeFee, global.ppoid)\nif(res.status !== 200) {\n    console.log(\"failed  : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(totalFeefixfee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(totalpayment1)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.calcu.contributeFee)\n//console.log(res.text);",
                  "err": {},
                  "uuid": "dd154fb8-747f-4642-8df1-f03a78ef8d75",
                  "parentUUID": "90c874a9-9393-4e91-8f85-5fe039ac1d0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "fullTitle": "API Calculation Service Get Calculate Payment when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 764,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await calcu.calcu(global.access_Tokens1, datas.calcu.contributeFee, datas.calcu.ppoidpersen)\nif(res.status !== 200) {\n    console.log(\"failed  : \"+res.text);\n}\n//console.log(res.text);\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(totalFeepersen)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(totalpayment)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.calcu.contributeFee)",
                  "err": {},
                  "uuid": "9c0bc48b-1836-4fc8-b5d0-50fd68d9052d",
                  "parentUUID": "90c874a9-9393-4e91-8f85-5fe039ac1d0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd154fb8-747f-4642-8df1-f03a78ef8d75",
                "9c0bc48b-1836-4fc8-b5d0-50fd68d9052d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1603,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "891bdedf-c392-4276-89c7-1049ec60d1fd",
          "title": "API Checkout Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite6_checkout.js",
          "file": "/test/suite6_checkout.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f3f5b2f9-af39-4bec-b079-1e6ffe5700a6",
              "title": "Checkout/Capture Purchase",
              "fullFile": "/home/runner/work/flash/flash/test/suite6_checkout.js",
              "file": "/test/suite6_checkout.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: calucated in \"Checkout/Capture Purchase\"",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase \"before all\" hook: calucated in \"Checkout/Capture Purchase\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "ujrah = datas.service_Group.ujrah / 100\nujrah1 = datas.service_Group.ujrah1 / 100\npersenfee = datas.paymentOption.persenfee / 100\npersen_total_fee = datas.contribution.contriFee * persenfee\nfixfee_total_fee = datas.paymentOption.fixfee\ntotal_ujrah = ujrah * datas.contribution.contriFee\ntotal_ujrah1 = ujrah1 * datas.contribution.contriFee\ntotal_tabaru = datas.contribution.contriFee - total_ujrah\ntotal_tabaru1 = datas.contribution.contriFee - total_ujrah1\nP_total_payment = datas.contribution.contriFee + persen_total_fee\nF_total_payment = datas.contribution.contriFee + fixfee_total_fee",
                  "err": {},
                  "uuid": "c9b8eb39-1ec6-460c-af5e-2607a3d208b6",
                  "parentUUID": "f3f5b2f9-af39-4bec-b079-1e6ffe5700a6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 1972,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi, global.idpaoption, global.idpoc, global.idpurcahse, global.serviceids)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nglobal.ppids = res.body.data[0].id\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(datas.paymentOption.fixfee)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(fixfee_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(F_total_payment)\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"paid_at\")\nassert(res.body.data[0].actions[0]).to.have.property(\"name\").exist\nassert(res.body.data[0].actions[0]).to.have.property(\"method\").exist\nassert(res.body.data[0].actions[0]).to.have.property(\"url\").exist\nassert(res.body.data[0]).to.have.property(\"va_numbers\")\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist",
                  "err": {},
                  "uuid": "e16c9703-7ca9-42a2-bc43-1b3641c9a064",
                  "parentUUID": "f3f5b2f9-af39-4bec-b079-1e6ffe5700a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "after(async function checkouts() {\n    this.timeout(5000); \n    const res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi1, global.idpaoption1, global.idpoc1, global.idpurcahse1, global.serviceids1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi1)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids1)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption1)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse1)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc1)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(datas.paymentOption.persenfee)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru1)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah1)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(persen_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(P_total_payment)\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"paid_at\")\nassert(res.body.data[0]).to.have.property(\"actions\")\nassert(res.body.data[0].va_numbers[0]).to.have.property(\"bank\").to.equal(\"permata\")\nassert(res.body.data[0].va_numbers[0]).to.have.property(\"va_number\").exist\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist\n\n\n\n\n});",
                  "err": {},
                  "uuid": "0b24b568-9e2c-437e-a57d-de9449445a2b",
                  "parentUUID": "f3f5b2f9-af39-4bec-b079-1e6ffe5700a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e16c9703-7ca9-42a2-bc43-1b3641c9a064",
                "0b24b568-9e2c-437e-a57d-de9449445a2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1972,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "467dbfb3-1edd-4493-9b59-cd09b5079896",
          "title": "API Product Payment",
          "fullFile": "/home/runner/work/flash/flash/test/suite7_PayementCancel.js",
          "file": "/test/suite7_PayementCancel.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4b6429ce-eabf-480a-801f-4c1d9b015923",
              "title": "Payment Cancel",
              "fullFile": "/home/runner/work/flash/flash/test/suite7_PayementCancel.js",
              "file": "/test/suite7_PayementCancel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api payment cancel, then status on table product payment will be cancel.",
                  "fullTitle": "API Product Payment Payment Cancel when user hit api payment cancel, then status on table product payment will be cancel.",
                  "timedOut": false,
                  "duration": 867,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cancel.canceled(global.access_Tokens1, global.ppids)\nassert(res.status).to.equal(200)\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(datas.paymentOption.fixfee)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(fixfee_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(F_total_payment)",
                  "err": {},
                  "uuid": "b023991d-f2a8-4c43-98fb-be94b7f9f32b",
                  "parentUUID": "4b6429ce-eabf-480a-801f-4c1d9b015923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api payment cancel using status expired, then got response error",
                  "fullTitle": "API Product Payment Payment Cancel when user hit api payment cancel using status expired, then got response error",
                  "timedOut": false,
                  "duration": 1262,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cancel.canceled(global.access_Tokens1, datas.status.ppid_expired)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "0bc6c123-afa9-4d49-b614-f01a1ddced4e",
                  "parentUUID": "4b6429ce-eabf-480a-801f-4c1d9b015923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api payment cancel using status paid, then got response error",
                  "fullTitle": "API Product Payment Payment Cancel when user hit api payment cancel using status paid, then got response error",
                  "timedOut": false,
                  "duration": 1345,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cancel.canceled(global.access_Tokens1, datas.status.ppid_paid)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "b407ce79-cfc9-47c2-b585-ed1e8ec24110",
                  "parentUUID": "4b6429ce-eabf-480a-801f-4c1d9b015923",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b023991d-f2a8-4c43-98fb-be94b7f9f32b",
                "0bc6c123-afa9-4d49-b614-f01a1ddced4e",
                "b407ce79-cfc9-47c2-b585-ed1e8ec24110"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3474,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "652b9740-b4c0-41b9-9079-582bb9731417",
              "title": "Payment Status",
              "fullFile": "/home/runner/work/flash/flash/test/suite7_PayementCancel.js",
              "file": "/test/suite7_PayementCancel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api payment status, then user will be see sumarry payment",
                  "fullTitle": "API Product Payment Payment Status when user hit api payment status, then user will be see sumarry payment",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "after(async function statuspayment()  {\n    const res = await status.statuss(global.access_Tokens1, global.ppids)\n    assert(res.status).to.equal(200)\n    //console.log(res.text);\n    assert(res.body.data[0]).to.have.property(\"id\").exist\n    assert(res.body.data[0]).to.have.property(\"display_name\").exist\n    assert(res.body.data[0]).to.have.property(\"total_fee\").exist\n    assert(res.body.data[0]).to.have.property(\"total_payment\").exist\n    assert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\n    assert(res.body.data[0]).to.have.property(\"status\").exist\n    assert(res.body.data[0]).to.have.property(\"image_url\").exist\n    assert(res.body.data[0]).to.have.property(\"expired_at\").exist\n});",
                  "err": {},
                  "uuid": "d1a42daf-422d-4c93-8576-2d823311b134",
                  "parentUUID": "652b9740-b4c0-41b9-9079-582bb9731417",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1a42daf-422d-4c93-8576-2d823311b134"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-07-01-2022",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "test-07-01-2022"
      },
      "version": "6.2.0"
    }
  }
}