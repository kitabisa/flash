{
  "stats": {
    "suites": 59,
    "tests": 137,
    "passes": 114,
    "pending": 21,
    "failures": 2,
    "start": "2022-07-11T00:21:29.028Z",
    "end": "2022-07-11T00:23:11.835Z",
    "duration": 102807,
    "testsRegistered": 137,
    "passPercent": 98.27586206896551,
    "pendingPercent": 15.328467153284672,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5f864c84-29d9-467b-bb6c-4210883f6f59",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after all\" hook: checkouts in \"{root}\"",
          "fullTitle": "\"after all\" hook: checkouts in \"{root}\"",
          "timedOut": false,
          "duration": 2839,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "this.timeout(5000); \nconst res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi1, global.idpaoption1, global.idpoc1, global.idpurcahse1, global.serviceids1)\n            if(res.status !== 200){\nconsole.log(\"failed : \"+res.text);\n            }\n            assert(res.status).to.equal(200)\n            //console.log(res.text);\n            assert(res.body.data[0]).to.have.property(\"id\").exist\n            assert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi1)\n            assert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids1)\n            assert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption1)\n            assert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse1)\n            assert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc1)\n            assert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(datas.paymentOption.persenfee)\n            assert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(0)\n            assert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\n            assert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru1)\n            assert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah1)\n            assert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(persen_total_fee)\n            assert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(P_total_payment)\n            assert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\n            assert(res.body.data[0]).to.have.property(\"status\").exist\n            assert(res.body.data[0]).to.have.property(\"paid_at\")\n            assert(res.body.data[0]).to.have.property(\"actions\")\n            assert(res.body.data[0].va_numbers[0]).to.have.property(\"bank\").to.equal(\"permata\")\n            assert(res.body.data[0].va_numbers[0]).to.have.property(\"va_number\").exist\n            assert(res.body.data[0]).to.have.property(\"expired_at\").exist",
          "err": {},
          "uuid": "edc9180d-d183-4158-ba5f-074c40159227",
          "parentUUID": "5f864c84-29d9-467b-bb6c-4210883f6f59",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook: statuspayment in \"{root}\"",
          "fullTitle": "\"after all\" hook: statuspayment in \"{root}\"",
          "timedOut": false,
          "duration": 590,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const res = await status.statuss(global.access_Tokens1, global.ppids)\nassert(res.status).to.equal(200)\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").exist\nassert(res.body.data[0]).to.have.property(\"total_payment\").exist\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"image_url\").exist\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist",
          "err": {},
          "uuid": "7c085d8f-f863-457a-bff9-fcc748e180c1",
          "parentUUID": "5f864c84-29d9-467b-bb6c-4210883f6f59",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "acfd6723-658c-436c-a84c-6e40b9d24082",
          "title": "Exchange Token API",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: pre_request in \"Exchange Token API\"",
              "fullTitle": "Exchange Token API \"before all\" hook: pre_request in \"Exchange Token API\"",
              "timedOut": false,
              "duration": 2169,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "username = ['ario16@gmail.com', 'ario10@gmail.com']\ntoken1 = []\ntoken2 = []\nfor (const user in username) {\n    const rd = await wong.wongAccount(username[user])\n    console.log('Status Code wong :', rd.status);\n    if (username[user] == `ario16@gmail.com`) {\n        const res = rd.body.data[0].token\n        token1.push(res)\n        global.token1 = token1\n    } else {\n        const res1 = rd.body.data[0].token\n        token2.push(res1)\n        global.token2 = token2\n    }\n}",
              "err": {},
              "uuid": "0e5a92d7-63f4-4c05-875c-0d9182d168cf",
              "parentUUID": "acfd6723-658c-436c-a84c-6e40b9d24082",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "when user input valid token then user got response 200",
              "fullTitle": "Exchange Token API when user input valid token then user got response 200",
              "timedOut": false,
              "duration": 1979,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "tokens = [global.token1, global.token2]\ntokens1 = []\ntokens2 = []\nfor (const x in tokens) {\n    res = await exchange_token.exchangeTokenAccount(tokens[x]);\n    if (tokens[x] == global.token1) {\n        const res1 = res.body.data[0].access_token\n        tokens1.push(res1)\n        global.access_Tokens1 = tokens1\n    } else {\n        const res2 = res.body.data[0].access_token\n        tokens2.push(res2)\n        global.access_Tokens2 = tokens2\n    }\n    assert(res.status).to.equal(200);\n    assert(res.body.data[0]).to.have.property('access_token')\n    assert(res.body.data[0]).to.have.property('refresh_token')\n    assert(res.body.data[0]).to.have.property('expires_in')\n    \n}\n//console.log(global.access_Tokens1);",
              "err": {},
              "uuid": "197cf20e-acd6-4a36-b4b4-4f9486c6bd12",
              "parentUUID": "acfd6723-658c-436c-a84c-6e40b9d24082",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when user input wrong token, then user got response error",
              "fullTitle": "Exchange Token API when user input wrong token, then user got response error",
              "timedOut": false,
              "duration": 1460,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1bXhfUFZiQ3lTV2o5SG5MRHJ0bEJ3X1BLTnlFcVJtWTNpQ3BSMTBlMFpvIn0.eyJleHAiOjE2NTI4OTEwNTEsImlhdCI6MTY1Mjg1NTA1MSwianRpIjoiYmMwMzhiZWUtYzNhNi00YjYxLTlkZjMtYmQ3NjExZWQwMTI0IiwiaXNzIjoiaHR0cDovL2tleWNsb2FrLnN0Zy5rdC5qZy9hdXRoL3JlYWxtcy9raXRhamFnYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNTY5ZjM5NS1iZWUxLTQxMzItOWYzZS1lZDM3ODAyMzY2ODMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrb25nIiwic2Vzc2lvbl9zdGF0ZSI6ImYwZWU1YzI3LTliODYtNDg1Mi1iYmE2LTI1M2ZkN2RlZDFkMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1raXRhamFnYSIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiJmMGVlNWMyNy05Yjg2LTQ4NTItYmJhNi0yNTNmZDdkZWQxZDAiLCJraXRhYmlzYV91c2VyX2lkIjoiNSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiS2l0YWphZ2EgVGVzdCBBamEiLCJraXRhYmlzYV9zZWNvbmRhcnlfaWQiOiI1NDk0ZTg3ODQ2MTJjMWY1ZDNhODI4ZjAyYWNkNzRmNSIsInBob25lX251bWJlciI6IjYyODEyMzQ1Njc4OTAiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJraXRhamFnYS10ZXN0QGtpdGFqYWdhLmlkIiwiZ2l2ZW5fbmFtZSI6IktpdGFqYWdhIiwiZmFtaWx5X')\nassert(res.status).to.equal(502)",
              "err": {},
              "uuid": "39ceb671-adf6-437c-9e47-b7397cba8b29",
              "parentUUID": "acfd6723-658c-436c-a84c-6e40b9d24082",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when user input empty token, then user got response error",
              "fullTitle": "Exchange Token API when user input empty token, then user got response error",
              "timedOut": false,
              "duration": 578,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('')\nassert(res.status).to.equal(401)",
              "err": {},
              "uuid": "e1324334-f5c5-47d5-8179-c0ee615fa605",
              "parentUUID": "acfd6723-658c-436c-a84c-6e40b9d24082",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "197cf20e-acd6-4a36-b4b4-4f9486c6bd12",
            "39ceb671-adf6-437c-9e47-b7397cba8b29",
            "e1324334-f5c5-47d5-8179-c0ee615fa605"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4017,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "e4da3be9-cbc3-4e61-8407-56ba312604f9",
          "title": "Get user info",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": false,
              "duration": 654,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)",
              "err": {},
              "uuid": "3f236431-3591-4239-97f1-b8fbbf734e2f",
              "parentUUID": "e4da3be9-cbc3-4e61-8407-56ba312604f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": false,
              "duration": 598,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens2)\nassert(res.status).to.equal(404)",
              "err": {},
              "uuid": "9c0a8833-4e38-4490-9229-c15a516b8cb8",
              "parentUUID": "e4da3be9-cbc3-4e61-8407-56ba312604f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f236431-3591-4239-97f1-b8fbbf734e2f",
            "9c0a8833-4e38-4490-9229-c15a516b8cb8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1252,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "acacc524-33d6-47a8-ad5b-d330424a8eb7",
          "title": "API Service Group",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "30e13ac1-cb0e-4c69-bddb-d9de216d8240",
              "title": "Create Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 593,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.serviceids = res.body.data[0].id\nglobal.names = res.body.data[0].name\nglobal.desc = res.body.data[0].description\nglobal.codes = res.body.data[0].code\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\n//console.log(\"ini id sg : \"+global.serviceids);",
                  "err": {},
                  "uuid": "38588666-9224-4ce0-8411-28b4100a1d85",
                  "parentUUID": "30e13ac1-cb0e-4c69-bddb-d9de216d8240",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 610,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code1, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah1)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.serviceids1 = res.body.data[0].id\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\n//console.log(\"ini id sg : \"+global.serviceids1);",
                  "err": {},
                  "uuid": "64e4b816-842c-4bd3-b6d5-2ad46fee5c9e",
                  "parentUUID": "30e13ac1-cb0e-4c69-bddb-d9de216d8240",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input existing data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input existing data, then user got response error",
                  "timedOut": false,
                  "duration": 598,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', 'Alda', 'this is triger from automation tools', datas.service_Group.ujrah)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "898497a8-f50f-4549-8889-03f0b29893d1",
                  "parentUUID": "30e13ac1-cb0e-4c69-bddb-d9de216d8240",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 646,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "456d1f6f-b88f-47b2-9202-3521e2f4f699",
                  "parentUUID": "30e13ac1-cb0e-4c69-bddb-d9de216d8240",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38588666-9224-4ce0-8411-28b4100a1d85",
                "64e4b816-842c-4bd3-b6d5-2ad46fee5c9e",
                "898497a8-f50f-4549-8889-03f0b29893d1",
                "456d1f6f-b88f-47b2-9202-3521e2f4f699"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2447,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "f920a505-2c42-4d0b-baae-c30791f5b779",
              "title": "Get All Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Service Group when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1604,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll.getallServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ids1 = res.body.data[1].id\nids2 = res.body.data[2].id\nglobal.idsgforppo = res.body.data[3].id\nglobal.idsgpuchase = res.body.data[4].id\nglobal.names1 = res.body.data[1].name\nglobal.desc1 = res.body.data[1].description\nglobal.codes1 = res.body.data[1].code",
                  "err": {},
                  "uuid": "c2cd32ba-61d5-4d44-a2dc-730f190413d4",
                  "parentUUID": "f920a505-2c42-4d0b-baae-c30791f5b779",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2cd32ba-61d5-4d44-a2dc-730f190413d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1604,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "16ab5ff7-7e99-4598-932a-e4069df21715",
              "title": "Get All Public Service Group ",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Public Service Group  when user hit api get all public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1155,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAllpublic.getallpublicServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "f48cea2f-0fe8-4f7d-980c-3e47a0c13083",
                  "parentUUID": "16ab5ff7-7e99-4598-932a-e4069df21715",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f48cea2f-0fe8-4f7d-980c-3e47a0c13083"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1155,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c9311105-cae0-4360-9528-1cc972f65fca",
              "title": "Get Detail Public Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 605,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, global.serviceids)\nif(res.status !==200){\n    console.log(\"getdetailpublic data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "8c683c4b-b0d9-4a05-b900-41905ef0cf7c",
                  "parentUUID": "c9311105-cae0-4360-9528-1cc972f65fca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail public with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 609,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {},
                  "uuid": "e4ff84e6-9f05-4874-a018-bb26e8fb5473",
                  "parentUUID": "c9311105-cae0-4360-9528-1cc972f65fca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c683c4b-b0d9-4a05-b900-41905ef0cf7c",
                "e4ff84e6-9f05-4874-a018-bb26e8fb5473"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1214,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "f54c5018-ee2f-4bde-969a-5d4056df955a",
              "title": "Get Detail Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 579,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, global.serviceids)\nif(res.status !==200){\n    console.log(\"getdetail data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "601da10d-08c0-41f1-82e8-0095615e775b",
                  "parentUUID": "f54c5018-ee2f-4bde-969a-5d4056df955a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 622,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {},
                  "uuid": "d6d55987-a5d5-41b6-8751-2c4f42923dae",
                  "parentUUID": "f54c5018-ee2f-4bde-969a-5d4056df955a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "601da10d-08c0-41f1-82e8-0095615e775b",
                "d6d55987-a5d5-41b6-8751-2c4f42923dae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1201,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "68e0d721-a131-4070-98e0-28146bec8722",
              "title": "Update Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 647,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "b5e73daf-21a8-46e2-9221-cb2dcdf43073",
                  "parentUUID": "68e0d721-a131-4070-98e0-28146bec8722",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different code and same description and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different code and same description and same name then user got response 200",
                  "timedOut": false,
                  "duration": 589,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, datas.service_Group.code, global.names, global.desc, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "e4dcc5b3-38d0-48ea-acf6-81ac84796357",
                  "parentUUID": "68e0d721-a131-4070-98e0-28146bec8722",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different name and same code then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different name and same code then user got response 200",
                  "timedOut": false,
                  "duration": 619,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes, datas.service_Group.name, global.desc, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "d1792400-1521-403d-a7fb-b51396287483",
                  "parentUUID": "68e0d721-a131-4070-98e0-28146bec8722",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different description and same code and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different description and same code and same name then user got response 200",
                  "timedOut": false,
                  "duration": 592,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes, global.names, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "2063ed62-43e0-476f-9f94-4c9d89b16402",
                  "parentUUID": "68e0d721-a131-4070-98e0-28146bec8722",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input same data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input same data, then user got response error",
                  "timedOut": false,
                  "duration": 643,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes1, global.names1, global.desc1, datas.service_Group.ujrah)   \nassert(res.status).to.equal(500)",
                  "err": {},
                  "uuid": "7192a760-37d8-4cb7-9a2f-322fe76ac414",
                  "parentUUID": "68e0d721-a131-4070-98e0-28146bec8722",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 584,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.ids1, global.codes, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nassert(res.status).to.equal(500)",
                  "err": {},
                  "uuid": "1023c147-7abc-43b1-8ee7-f319e6c0e294",
                  "parentUUID": "68e0d721-a131-4070-98e0-28146bec8722",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5e73daf-21a8-46e2-9221-cb2dcdf43073",
                "e4dcc5b3-38d0-48ea-acf6-81ac84796357",
                "d1792400-1521-403d-a7fb-b51396287483",
                "2063ed62-43e0-476f-9f94-4c9d89b16402",
                "7192a760-37d8-4cb7-9a2f-322fe76ac414",
                "1023c147-7abc-43b1-8ee7-f319e6c0e294"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3674,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1409e28a-e491-4df6-95bf-a8e96d55fd99",
              "title": "Delete data Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a29add43-81b0-4a51-bd0d-4612c08eb187",
                  "parentUUID": "1409e28a-e491-4df6-95bf-a8e96d55fd99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "1ff2296b-188f-4162-b4ff-63e84b4f9552",
                  "parentUUID": "1409e28a-e491-4df6-95bf-a8e96d55fd99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "a29add43-81b0-4a51-bd0d-4612c08eb187",
                "1ff2296b-188f-4162-b4ff-63e84b4f9552"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "5fcaecc9-3c0a-44e0-bc1e-61e21b9dc841",
          "title": "API Extension Clause",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b2af7ec7-6ee4-45bf-ade3-b3b5be430a3a",
              "title": "Create ExtensionClause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Create ExtensionClause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 610,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_create.createExtensionClause(global.access_Tokens1, datas.Extension_clause.code, datas.service_Group.name, datas.service_Group.description, global.codes)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(true)\nglobal.ECids = res.body.data[0].id",
                  "err": {},
                  "uuid": "9319f331-ef24-4b1e-b846-e91ec8034608",
                  "parentUUID": "b2af7ec7-6ee4-45bf-ade3-b3b5be430a3a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9319f331-ef24-4b1e-b846-e91ec8034608"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 610,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ef4f2e0d-a411-4648-8e5f-458f5da58120",
              "title": "Get all data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Extension Clause when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 3065,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getall.getallExtensionClause(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ECids1 = res.body.data[1].id\nglobal.ECserviceCode1 = res.body.data[1].service_group_code\nglobal.code1 = res.body.data[1].code\nglobal.name1 = res.body.data[1].name\nglobal.code2 = res.body.data[0].code\nglobal.name2 = res.body.data[0].name\nglobal.ECserviceCode2 = res.body.data[0].service_group_code\nglobal.desc2 = res.body.data[0].description",
                  "err": {},
                  "uuid": "a8553eee-a521-48fb-af5e-edfea3442577",
                  "parentUUID": "ef4f2e0d-a411-4648-8e5f-458f5da58120",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8553eee-a521-48fb-af5e-edfea3442577"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3065,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5443d08c-fd39-4d56-a23d-c22bead9b283",
              "title": "Delete data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "755a512b-3a1b-413a-ae94-37080489a3ae",
                  "parentUUID": "5443d08c-fd39-4d56-a23d-c22bead9b283",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "066e37c0-1ed4-402c-b948-ccabd61552f5",
                  "parentUUID": "5443d08c-fd39-4d56-a23d-c22bead9b283",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "755a512b-3a1b-413a-ae94-37080489a3ae",
                "066e37c0-1ed4-402c-b948-ccabd61552f5"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a3519bfa-9764-4e52-8654-e66ac9b3f1de",
              "title": "Get Detail Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 613,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, global.ECids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").to.equal(global.ECids)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(true)",
                  "err": {},
                  "uuid": "430cc6c7-fda7-4e72-bdc8-9548940adfbc",
                  "parentUUID": "a3519bfa-9764-4e52-8654-e66ac9b3f1de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 635,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, datas.Extension_clause.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc.id).to.equal('error data tidak ditemukan')",
                  "err": {},
                  "uuid": "d623a2b0-fe87-4f75-9886-87be0847d85c",
                  "parentUUID": "a3519bfa-9764-4e52-8654-e66ac9b3f1de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "430cc6c7-fda7-4e72-bdc8-9548940adfbc",
                "d623a2b0-fe87-4f75-9886-87be0847d85c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1248,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "f7ddb315-4b90-4718-aac9-30192b342470",
              "title": "update data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause update data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 635,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Update.updateExtensionClause(global.access_Tokens1, global.ECids, global.code1, global.name1, datas.Extension_clause.description, global.ECserviceCode1)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "58d6899a-2e86-4614-8816-ed8b85369c58",
                  "parentUUID": "f7ddb315-4b90-4718-aac9-30192b342470",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58d6899a-2e86-4614-8816-ed8b85369c58"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 635,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "413d6bf3-b503-4b95-9874-5262cd5cb12d",
              "title": "Search data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 1176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name1)\nif(res.status !== 200){\n    console.log(\"error search EC\" +res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "b26c5b31-6071-4212-b2db-22457f01f038",
                  "parentUUID": "413d6bf3-b503-4b95-9874-5262cd5cb12d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid service group, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using invalid service group, then user got response error",
                  "timedOut": false,
                  "duration": 582,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, datas.Extension_clause.invalid_service_group_code, global.code1, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "343c471d-af7e-4b0b-b1ce-a4d51e73d46e",
                  "parentUUID": "413d6bf3-b503-4b95-9874-5262cd5cb12d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_code and with same service group and same name, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_code and with same service group and same name, then user got response error",
                  "timedOut": false,
                  "duration": 575,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code2, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "fa5576d9-d726-4a2f-80ce-a11ee5d2770b",
                  "parentUUID": "413d6bf3-b503-4b95-9874-5262cd5cb12d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_name and with same service group and same code, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_name and with same service group and same code, then user got response error",
                  "timedOut": false,
                  "duration": 669,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name2)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "ed6b223b-7a89-46b2-a664-e854deb9bcf6",
                  "parentUUID": "413d6bf3-b503-4b95-9874-5262cd5cb12d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b26c5b31-6071-4212-b2db-22457f01f038",
                "343c471d-af7e-4b0b-b1ce-a4d51e73d46e",
                "fa5576d9-d726-4a2f-80ce-a11ee5d2770b",
                "ed6b223b-7a89-46b2-a664-e854deb9bcf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3002,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e1315587-ec4d-4516-b863-a9968939509e",
              "title": "Create Deductible API",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Deductible API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 646,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.deducids = res.body.data[0].id",
                  "err": {},
                  "uuid": "35694608-f18b-4223-8983-24e15d991c94",
                  "parentUUID": "e1315587-ec4d-4516-b863-a9968939509e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong service group, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong service group, then user got response error",
                  "timedOut": false,
                  "duration": 655,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, datas.Deductible.service_code, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Service Group Code Tidak Ditemukan\")",
                  "err": {},
                  "uuid": "2bc53117-6866-42b4-913c-472e81b2639f",
                  "parentUUID": "e1315587-ec4d-4516-b863-a9968939509e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong calculate method, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong calculate method, then user got response error",
                  "timedOut": false,
                  "duration": 601,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {},
                  "uuid": "83157393-acfd-431c-a3c3-4f506c528c6a",
                  "parentUUID": "e1315587-ec4d-4516-b863-a9968939509e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input deduction value with string, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input deduction value with string, then user got response error",
                  "timedOut": false,
                  "duration": 590,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {},
                  "uuid": "83cff446-a57d-40b7-8e08-2e7724745414",
                  "parentUUID": "e1315587-ec4d-4516-b863-a9968939509e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35694608-f18b-4223-8983-24e15d991c94",
                "2bc53117-6866-42b4-913c-472e81b2639f",
                "83157393-acfd-431c-a3c3-4f506c528c6a",
                "83cff446-a57d-40b7-8e08-2e7724745414"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2492,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a50c7594-e374-4772-9573-70eb712c44c0",
              "title": "Get all Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all Deduction when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1447,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getall.getDeductible(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "6e3324f6-090e-4021-b926-ba6610c63ca2",
                  "parentUUID": "a50c7594-e374-4772-9573-70eb712c44c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e3324f6-090e-4021-b926-ba6610c63ca2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1447,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "b5b6404c-87bc-48e4-aca8-d2d4d250b875",
              "title": "Get Detail Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 578,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(global.deducids, global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "cc07d5be-9208-48bc-bdb0-14508f1c33d4",
                  "parentUUID": "b5b6404c-87bc-48e4-aca8-d2d4d250b875",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 581,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(datas.Deductible.wrong_idDeduc, global.access_Tokens1)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {},
                  "uuid": "efa669a9-7cf3-47b6-9804-a9cb1b0a7984",
                  "parentUUID": "b5b6404c-87bc-48e4-aca8-d2d4d250b875",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc07d5be-9208-48bc-bdb0-14508f1c33d4",
                "efa669a9-7cf3-47b6-9804-a9cb1b0a7984"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1159,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7a1ae128-862a-4033-a10d-1cefd27d0f28",
              "title": "Update Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 579,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method1, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "36aade44-a91d-406c-b672-3326b9482797",
                  "parentUUID": "7a1ae128-862a-4033-a10d-1cefd27d0f28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid Deduction id, then user got response error",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input data using invalid Deduction id, then user got response error",
                  "timedOut": false,
                  "duration": 643,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, datas.Deductible.wrong_idDeduc, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Deductible ID Tidak Ditemukan\")",
                  "err": {},
                  "uuid": "a16c9ea2-663c-404c-821d-b5dd5534f1f3",
                  "parentUUID": "7a1ae128-862a-4033-a10d-1cefd27d0f28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu Method then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu Method then user got response 200",
                  "timedOut": false,
                  "duration": 590,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {},
                  "uuid": "97442ffc-71d4-4912-9892-a99bb5a5196b",
                  "parentUUID": "7a1ae128-862a-4033-a10d-1cefd27d0f28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu value with string, then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu value with string, then user got response 200",
                  "timedOut": false,
                  "duration": 661,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {},
                  "uuid": "cfa43bb6-1047-4325-a2d8-7c7dc1cbf17b",
                  "parentUUID": "7a1ae128-862a-4033-a10d-1cefd27d0f28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "36aade44-a91d-406c-b672-3326b9482797",
                "a16c9ea2-663c-404c-821d-b5dd5534f1f3",
                "97442ffc-71d4-4912-9892-a99bb5a5196b",
                "cfa43bb6-1047-4325-a2d8-7c7dc1cbf17b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2473,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e855fddf-ef4e-469c-87ac-400fed7efd68",
              "title": "Search Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 660,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Search.searchDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "d12b11c4-fab4-4c23-86ac-af66907172ab",
                  "parentUUID": "e855fddf-ef4e-469c-87ac-400fed7efd68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d12b11c4-fab4-4c23-86ac-af66907172ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 660,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "73fbecbc-ca6c-43b6-823e-7456c83271d8",
              "title": "Deleted Deduction APi",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "38289b4a-46c6-430b-b1b9-a865b372205c",
                  "parentUUID": "73fbecbc-ca6c-43b6-823e-7456c83271d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "62b1066b-8adf-4d22-833b-37be91a5bf84",
                  "parentUUID": "73fbecbc-ca6c-43b6-823e-7456c83271d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "38289b4a-46c6-430b-b1b9-a865b372205c",
                "62b1066b-8adf-4d22-833b-37be91a5bf84"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "6ad67563-5342-4cbe-9595-384b2e25bfed",
              "title": "Create Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 618,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\nglobal.idpoc = res.body.data[0].id\n//console.log(\"ini poc : \"+global.idpoc);",
                  "err": {},
                  "uuid": "d9e7916b-25ef-4c73-979c-ac714bf85f35",
                  "parentUUID": "6ad67563-5342-4cbe-9595-384b2e25bfed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 584,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids1, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\nglobal.idpoc1 = res.body.data[0].id\n//console.log(\"ini poc : \"+global.idpoc);",
                  "err": {},
                  "uuid": "c45433a2-e80c-48de-8aa4-61ed372c3403",
                  "parentUUID": "6ad67563-5342-4cbe-9595-384b2e25bfed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 600,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "42b76ae6-a1a7-4e9e-a8f4-5a1a0026611e",
                  "parentUUID": "6ad67563-5342-4cbe-9595-384b2e25bfed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": false,
                  "duration": 683,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "89de9b37-a325-4a8c-88d3-78fb494bbd35",
                  "parentUUID": "6ad67563-5342-4cbe-9595-384b2e25bfed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 592,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "a15abaab-1cd3-493d-a1dc-5a5f8dedf267",
                  "parentUUID": "6ad67563-5342-4cbe-9595-384b2e25bfed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9e7916b-25ef-4c73-979c-ac714bf85f35",
                "c45433a2-e80c-48de-8aa4-61ed372c3403",
                "42b76ae6-a1a7-4e9e-a8f4-5a1a0026611e",
                "89de9b37-a325-4a8c-88d3-78fb494bbd35",
                "a15abaab-1cd3-493d-a1dc-5a5f8dedf267"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3077,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "02fce6bc-3a94-47de-8b8a-a3b8a99cce7e",
              "title": "Get all data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Product Contribution when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 2531,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getall.getContribution(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\ncontriId = res.body.data[0].id\nglobal.contripurchase = res.body.data[1].id",
                  "err": {},
                  "uuid": "1389f74a-4ec4-4766-8397-8ced1ea172b2",
                  "parentUUID": "02fce6bc-3a94-47de-8b8a-a3b8a99cce7e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1389f74a-4ec4-4766-8397-8ced1ea172b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2531,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "3b8fa930-c618-4365-b73a-0267656d9980",
              "title": "Get detail Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 615,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, global.serviceids)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {},
                  "uuid": "7f658677-e752-4c94-89cf-26a190df0c06",
                  "parentUUID": "3b8fa930-c618-4365-b73a-0267656d9980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 625,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {},
                  "uuid": "bff86cd9-b884-492b-9de1-5d04c039d966",
                  "parentUUID": "3b8fa930-c618-4365-b73a-0267656d9980",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f658677-e752-4c94-89cf-26a190df0c06",
                "bff86cd9-b884-492b-9de1-5d04c039d966"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1240,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "180928f8-fa41-4064-8a4f-11ab97549ece",
              "title": "Update data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 709,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Update.updateContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.contribution.isPopular.false, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee, contriId)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {},
                  "uuid": "a62b30c9-71cd-4ba3-b3b5-babab21e5e26",
                  "parentUUID": "180928f8-fa41-4064-8a4f-11ab97549ece",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 610,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "3e3bcdd5-f4e0-48cd-9c72-b9223957d915",
                  "parentUUID": "180928f8-fa41-4064-8a4f-11ab97549ece",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": false,
                  "duration": 600,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "b04f6117-8286-4726-91bb-70b0e8634b55",
                  "parentUUID": "180928f8-fa41-4064-8a4f-11ab97549ece",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 714,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "8dc8296a-f585-4668-969e-94f6f8fb9bfa",
                  "parentUUID": "180928f8-fa41-4064-8a4f-11ab97549ece",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a62b30c9-71cd-4ba3-b3b5-babab21e5e26",
                "3e3bcdd5-f4e0-48cd-9c72-b9223957d915",
                "b04f6117-8286-4726-91bb-70b0e8634b55",
                "8dc8296a-f585-4668-969e-94f6f8fb9bfa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2633,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "b62097c5-2b9a-4e3b-9414-bc2fbc5d7a45",
              "title": "Delete Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d9893bee-3055-40d1-9f8d-d6b96f36abfe",
                  "parentUUID": "b62097c5-2b9a-4e3b-9414-bc2fbc5d7a45",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "1b5bf3c9-fcbd-490d-af92-62ba5df148fc",
                  "parentUUID": "b62097c5-2b9a-4e3b-9414-bc2fbc5d7a45",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "d9893bee-3055-40d1-9f8d-d6b96f36abfe",
                "1b5bf3c9-fcbd-490d-af92-62ba5df148fc"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "c950fae2-4159-46fa-80fd-39867baa60d9",
          "title": "Payment Api Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
          "file": "/test/suite3_paymentService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e6d2a9ad-ae75-4f5c-be4c-8494c8c601e3",
              "title": "Create Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Provider when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 609,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Provider.createPaymentProvider(global.access_Tokens1, datas.paymentProvider.callback_url, datas.paymentProvider.code, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"code\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"callback_url\").to.equal(datas.paymentProvider.callback_url)\nproviderids = res.body.data[0].id",
                  "err": {},
                  "uuid": "3506a6c9-5e7b-4f10-8094-771c0ed02792",
                  "parentUUID": "e6d2a9ad-ae75-4f5c-be4c-8494c8c601e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3506a6c9-5e7b-4f10-8094-771c0ed02792"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 609,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "24cc2b16-74eb-4b57-a647-f116a268d399",
              "title": "Get all Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Payment Provider when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 949,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Provider.getPaymentProvider(global.access_Tokens1)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"code\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"callback_url\").exist\nid1 = res.body.data[1].id",
                  "err": {},
                  "uuid": "7e9a78e8-7316-4209-9fd3-2ff79c43b06b",
                  "parentUUID": "24cc2b16-74eb-4b57-a647-f116a268d399",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e9a78e8-7316-4209-9fd3-2ff79c43b06b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 949,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c04373a1-3199-45e6-8316-ae0d860dae34",
              "title": "Get detail payment provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 678,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, providerids)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "2db118f4-fd4f-4e3d-9c45-eca27f444489",
                  "parentUUID": "c04373a1-3199-45e6-8316-ae0d860dae34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 594,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID)\nassert(res.status).to.equal(500)",
                  "err": {},
                  "uuid": "c73a3dbb-c8c2-4207-9393-82c4d05c5d83",
                  "parentUUID": "c04373a1-3199-45e6-8316-ae0d860dae34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2db118f4-fd4f-4e3d-9c45-eca27f444489",
                "c73a3dbb-c8c2-4207-9393-82c4d05c5d83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1272,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ea95820f-8ac7-4cf9-8038-d35327c26b11",
              "title": "Update Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 603,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, providerids, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"Failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "1ecdb412-fbf4-4665-a82c-c0636e9f3846",
                  "parentUUID": "ea95820f-8ac7-4cf9-8038-d35327c26b11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 593,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID, datas.paymentProvider.callback_url, datas.paymentProvider.wrongCode, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "df6a882c-f9d1-4494-9c30-8b47a3e32672",
                  "parentUUID": "ea95820f-8ac7-4cf9-8038-d35327c26b11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using existing code, then user got response error",
                  "timedOut": false,
                  "duration": 583,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "4a0a4c77-5266-4cff-a8d6-c927fc36e9ed",
                  "parentUUID": "ea95820f-8ac7-4cf9-8038-d35327c26b11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid authorization, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid authorization, then user got response error",
                  "timedOut": false,
                  "duration": 577,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(datas.paymentProvider.invalid_auth, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(401)",
                  "err": {},
                  "uuid": "f44b7772-b4b8-4d9c-bfeb-83fb03a5c106",
                  "parentUUID": "ea95820f-8ac7-4cf9-8038-d35327c26b11",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ecdb412-fbf4-4665-a82c-c0636e9f3846",
                "df6a882c-f9d1-4494-9c30-8b47a3e32672",
                "4a0a4c77-5266-4cff-a8d6-c927fc36e9ed",
                "f44b7772-b4b8-4d9c-bfeb-83fb03a5c106"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2356,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "9ca60bad-67d2-4c63-a39d-dc59343f1ef7",
              "title": "Delete payment Provider API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d21722b0-43a1-4772-90af-1bceb96947c4",
                  "parentUUID": "9ca60bad-67d2-4c63-a39d-dc59343f1ef7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "db46458a-0f7e-465d-a515-e302f9330d12",
                  "parentUUID": "9ca60bad-67d2-4c63-a39d-dc59343f1ef7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f98ebe23-1c62-49ee-bc27-f6e72f3b6137",
                  "parentUUID": "9ca60bad-67d2-4c63-a39d-dc59343f1ef7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "d21722b0-43a1-4772-90af-1bceb96947c4",
                "db46458a-0f7e-465d-a515-e302f9330d12",
                "f98ebe23-1c62-49ee-bc27-f6e72f3b6137"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "b7519434-f485-4832-a10f-9727753673ee",
              "title": "Create Payment Option API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 1894,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bankName =  [\"shopeepay\", \"qris\", \"gopay\"]\nfor (let x in bankName) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, 'EWALLET', datas.Deductible.description, datas.paymentOption.fixfee, bankName[x], 0, providerids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(bankName[x])\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nglobal.idpaoption = res.body.data[0].id\nidpaoption3 = res.body.data[0].name\n\n}",
                  "err": {},
                  "uuid": "d28f1f8f-bd57-4fed-800e-16ca5a748292",
                  "parentUUID": "b7519434-f485-4832-a10f-9727753673ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 5048,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bankName =  [\"mandiri\", \"cimb\", \"mega\", \"bni\", \"bca\", \"permata\", \"bri\", \"maybank\"]\nfor (let x in bankName) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, \"BANK_TRANSFER\", datas.Deductible.description, 0 , bankName[x] , datas.paymentOption.persenfee , id1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(bankName[x])\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nglobal.idpaoption1 = res.body.data[0].id\nglobal.bankname = res.body.data[0].name\n}",
                  "err": {},
                  "uuid": "0eb00300-b988-40b0-a8cc-1ed6ac76bc20",
                  "parentUUID": "b7519434-f485-4832-a10f-9727753673ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong category, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input wrong category, then user got response error",
                  "timedOut": false,
                  "duration": 578,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, datas.paymentOption.wrong_category, datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,0 , id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"kategori tidak valid\")",
                  "err": {},
                  "uuid": "f7be3ac0-9514-4018-b0a3-4b027dedfc8f",
                  "parentUUID": "b7519434-f485-4832-a10f-9727753673ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input provider id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input provider id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 575,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {},
                  "uuid": "8ed86813-8ecd-4fca-aa9e-2459dac4560c",
                  "parentUUID": "b7519434-f485-4832-a10f-9727753673ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input persen fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 582,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "d99a0bc4-eb3d-4f50-8bab-b0a220685312",
                  "parentUUID": "b7519434-f485-4832-a10f-9727753673ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input fix fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 606,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "ea83af2f-e6c3-4c9e-8a12-1ea16caa4c75",
                  "parentUUID": "b7519434-f485-4832-a10f-9727753673ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d28f1f8f-bd57-4fed-800e-16ca5a748292",
                "0eb00300-b988-40b0-a8cc-1ed6ac76bc20",
                "f7be3ac0-9514-4018-b0a3-4b027dedfc8f",
                "8ed86813-8ecd-4fca-aa9e-2459dac4560c",
                "d99a0bc4-eb3d-4f50-8bab-b0a220685312",
                "ea83af2f-e6c3-4c9e-8a12-1ea16caa4c75"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9283,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "66ef26df-70ac-45ce-b67a-f82c87ecd383",
              "title": "Get all payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all payment option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 6910,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Option.getPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nidpo = res.body.data[0].id\nidpo1 = res.body.data[1].id\nidpo2 = res.body.data[2].id\nidpo3 = res.body.data[3].id\n//console.log(idpo);\n//console.log(idpo1);\n//console.log(idpo2);",
                  "err": {},
                  "uuid": "8549bfb0-b17f-4db1-a5d7-f8ce16c0ccaa",
                  "parentUUID": "66ef26df-70ac-45ce-b67a-f82c87ecd383",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8549bfb0-b17f-4db1-a5d7-f8ce16c0ccaa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6910,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "b2d370c3-aa06-4e44-88c3-42779a8fb47e",
              "title": "Get Detail payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 647,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, idpo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist",
                  "err": {},
                  "uuid": "90412bb2-aa49-47e4-a295-adda60ca28c5",
                  "parentUUID": "b2d370c3-aa06-4e44-88c3-42779a8fb47e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 588,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)",
                  "err": {},
                  "uuid": "4769c043-05f9-4dfe-84f0-17e393d7920f",
                  "parentUUID": "b2d370c3-aa06-4e44-88c3-42779a8fb47e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90412bb2-aa49-47e4-a295-adda60ca28c5",
                "4769c043-05f9-4dfe-84f0-17e393d7920f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1235,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ea7fd491-cb38-4013-a5ad-618e29afcca2",
              "title": "Update Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 615,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"EWALLET\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "28cdf143-a9c3-4101-8b4e-2888ab43bef9",
                  "parentUUID": "ea7fd491-cb38-4013-a5ad-618e29afcca2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 628,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"BANK_TRANSFER\", datas.Deductible.description, datas.paymentOption.fixfee , datas.paymentOption.name , 0 , id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "d46f344e-4ae3-4839-8bbf-933267fd71b7",
                  "parentUUID": "ea7fd491-cb38-4013-a5ad-618e29afcca2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 583,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {},
                  "uuid": "cace4b92-6eb4-4131-94eb-730c2a7980a9",
                  "parentUUID": "ea7fd491-cb38-4013-a5ad-618e29afcca2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input persen fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 619,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "de71096e-ae6d-4681-920b-9c83f9fd0c40",
                  "parentUUID": "ea7fd491-cb38-4013-a5ad-618e29afcca2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input fix fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 598,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "ecb4f069-8c5e-492e-b078-e0f0727e5200",
                  "parentUUID": "ea7fd491-cb38-4013-a5ad-618e29afcca2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 607,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name , 0 , id1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {},
                  "uuid": "90475d04-7595-4c51-98d0-58730f881cc3",
                  "parentUUID": "ea7fd491-cb38-4013-a5ad-618e29afcca2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28cdf143-a9c3-4101-8b4e-2888ab43bef9",
                "d46f344e-4ae3-4839-8bbf-933267fd71b7",
                "cace4b92-6eb4-4131-94eb-730c2a7980a9",
                "de71096e-ae6d-4681-920b-9c83f9fd0c40",
                "ecb4f069-8c5e-492e-b078-e0f0727e5200",
                "90475d04-7595-4c51-98d0-58730f881cc3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3650,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e48d6818-24e0-447b-8efd-7bda45706afe",
              "title": "Delete Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3a01d1ce-0842-4987-afcd-ae7e4704bd94",
                  "parentUUID": "e48d6818-24e0-447b-8efd-7bda45706afe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "aab8ace1-adad-4e14-9eb5-582021e0313b",
                  "parentUUID": "e48d6818-24e0-447b-8efd-7bda45706afe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "0c209b74-9abb-42cc-9ae0-21dd342fe1bf",
                  "parentUUID": "e48d6818-24e0-447b-8efd-7bda45706afe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "89dfd1be-8608-47fb-8714-52c003c6fb8b",
                  "parentUUID": "e48d6818-24e0-447b-8efd-7bda45706afe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "3a01d1ce-0842-4987-afcd-ae7e4704bd94",
                "aab8ace1-adad-4e14-9eb5-582021e0313b",
                "0c209b74-9abb-42cc-9ae0-21dd342fe1bf",
                "89dfd1be-8608-47fb-8714-52c003c6fb8b"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "3b36ac0c-e262-479c-90bc-73a6da573dd7",
              "title": "Create Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 625,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.idpaoption, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nglobal.ppoid = res.body.data[0].id\nglobal.payment_option_id = res.body.data[0].payment_option_id\nglobal.service_group_id = res.body.data[0].service_group_id\n//console.log(\"ini ppoids : \"+global.ppoid);\n//console.log(\"ini payment_option_id : \"+global.payment_option_id);\n//console.log(\"ini service_group_id : \"+global.service_group_id);",
                  "err": {},
                  "uuid": "273e784a-28de-4e73-aaa3-0adb0db51132",
                  "parentUUID": "3b36ac0c-e262-479c-90bc-73a6da573dd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 597,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.idpaoption1, global.serviceids1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nglobal.ppoid1 = res.body.data[0].id\nglobal.payment_option_id1 = res.body.data[0].payment_option_id\nglobal.service_group_id1 = res.body.data[0].service_group_id\n//console.log(\"ini ppoids : \"+global.ppoid);\n//console.log(\"ini payment_option_id : \"+global.payment_option_id);\n//console.log(\"ini service_group_id : \"+global.service_group_id);",
                  "err": {},
                  "uuid": "773807ed-6703-4330-8ee4-d412852871c1",
                  "parentUUID": "3b36ac0c-e262-479c-90bc-73a6da573dd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input service group id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input service group id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5a96b247-eccd-40d7-ba04-22295109a12b",
                  "parentUUID": "3b36ac0c-e262-479c-90bc-73a6da573dd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 580,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, global.idsgforppo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\")",
                  "err": {},
                  "uuid": "fcbbfdf0-6c78-494e-8be5-24c0ba94d42c",
                  "parentUUID": "3b36ac0c-e262-479c-90bc-73a6da573dd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "273e784a-28de-4e73-aaa3-0adb0db51132",
                "773807ed-6703-4330-8ee4-d412852871c1",
                "fcbbfdf0-6c78-494e-8be5-24c0ba94d42c"
              ],
              "failures": [],
              "pending": [
                "5a96b247-eccd-40d7-ba04-22295109a12b"
              ],
              "skipped": [],
              "duration": 1802,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c9c8c79d-e669-47b1-8e76-d48b8a83407a",
              "title": "Get all Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1271,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPO.getProductPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nidppo0 = res.body.data[0].id\nidppo1 = res.body.data[1].id\nidppo2 = res.body.data[2].id",
                  "err": {},
                  "uuid": "80b4524c-2c5e-4f47-b274-01698d67fab8",
                  "parentUUID": "c9c8c79d-e669-47b1-8e76-d48b8a83407a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80b4524c-2c5e-4f47-b274-01698d67fab8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1271,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1d8d344b-fc8f-48ad-84f7-531663bb5967",
              "title": "Get all Product Payment Option with Service Group Id",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 630,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nidppo = res.body.data[0].id",
                  "err": {},
                  "uuid": "4d579a16-5f2f-42e5-b3ad-3024c6808ed5",
                  "parentUUID": "1d8d344b-fc8f-48ad-84f7-531663bb5967",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid sg id, then user got response error",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user input invalid sg id, then user got response error",
                  "timedOut": false,
                  "duration": 963,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "4b671ae0-c7cb-4e45-96f7-082dfb257dac",
                  "parentUUID": "1d8d344b-fc8f-48ad-84f7-531663bb5967",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d579a16-5f2f-42e5-b3ad-3024c6808ed5",
                "4b671ae0-c7cb-4e45-96f7-082dfb257dac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1593,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7190e4dd-ff12-423c-8df4-90681168945b",
              "title": "Get detail Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 591,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, idppo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {},
                  "uuid": "4a0c2b34-f92a-4007-9d8d-8e0a0266edb4",
                  "parentUUID": "7190e4dd-ff12-423c-8df4-90681168945b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 717,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {},
                  "uuid": "b8383ab5-28b7-49ab-ab3b-6e1eb2b3c822",
                  "parentUUID": "7190e4dd-ff12-423c-8df4-90681168945b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a0c2b34-f92a-4007-9d8d-8e0a0266edb4",
                "b8383ab5-28b7-49ab-ab3b-6e1eb2b3c822"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1308,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "80eea7af-e712-44ac-a815-ddb525c1cd77",
              "title": "Update Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 666,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, global.payment_option_id, global.service_group_id, global.ppoid)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {},
                  "uuid": "0bde3dd6-36c5-4a86-b567-04d65369dfb0",
                  "parentUUID": "80eea7af-e712-44ac-a815-ddb525c1cd77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 788,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.payment_option_id, global.service_group_id, global.ppoid)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {},
                  "uuid": "8f8ca15a-ceca-4105-be3b-b80b5fcdfdb6",
                  "parentUUID": "80eea7af-e712-44ac-a815-ddb525c1cd77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PPO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PPO id, then user got response error",
                  "timedOut": false,
                  "duration": 607,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, idpo, idsgforppo, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {},
                  "uuid": "be797109-36ad-49dc-ad49-bcc3781bccf5",
                  "parentUUID": "80eea7af-e712-44ac-a815-ddb525c1cd77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid SG id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid SG id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f9fdb22d-5b72-490b-9875-ea244af6c45d",
                  "parentUUID": "80eea7af-e712-44ac-a815-ddb525c1cd77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PO id, then user got response error",
                  "timedOut": false,
                  "duration": 759,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, idsgforppo, idppo)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "3ebc8ef8-342f-402b-8ad1-10ea205cd157",
                  "parentUUID": "80eea7af-e712-44ac-a815-ddb525c1cd77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0bde3dd6-36c5-4a86-b567-04d65369dfb0",
                "8f8ca15a-ceca-4105-be3b-b80b5fcdfdb6",
                "be797109-36ad-49dc-ad49-bcc3781bccf5",
                "3ebc8ef8-342f-402b-8ad1-10ea205cd157"
              ],
              "failures": [],
              "pending": [
                "f9fdb22d-5b72-490b-9875-ea244af6c45d"
              ],
              "skipped": [],
              "duration": 2820,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "29ba5dc1-4cdb-4886-acba-ed1539c799b1",
              "title": "Get Payment Option Page",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get page payment with valid token and service group, then user got response 200/OK",
                  "fullTitle": "Payment Api Service Get Payment Option Page when user hit api get page payment with valid token and service group, then user got response 200/OK",
                  "timedOut": false,
                  "duration": 664,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getaPage.getPaymentOptionPage(global.access_Tokens1, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"category\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"description\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"image_url\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"percentage_fee\").exist",
                  "err": {},
                  "uuid": "391181fa-0f32-44e9-8935-df4e5554a12a",
                  "parentUUID": "29ba5dc1-4cdb-4886-acba-ed1539c799b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "391181fa-0f32-44e9-8935-df4e5554a12a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 664,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "045a8551-5b8a-4825-80c2-af5c1f9fe321",
              "title": "Delete Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "17ef666a-9a57-4750-b791-3b71d67961e1",
                  "parentUUID": "045a8551-5b8a-4825-80c2-af5c1f9fe321",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4a335edf-c4ab-4e13-a03b-227cb8fb290b",
                  "parentUUID": "045a8551-5b8a-4825-80c2-af5c1f9fe321",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7622a8a7-3d22-4585-a7d5-525e407b9a12",
                  "parentUUID": "045a8551-5b8a-4825-80c2-af5c1f9fe321",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4d821530-b29f-411a-ad27-46d6fac52362",
                  "parentUUID": "045a8551-5b8a-4825-80c2-af5c1f9fe321",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "17ef666a-9a57-4750-b791-3b71d67961e1",
                "4a335edf-c4ab-4e13-a03b-227cb8fb290b",
                "7622a8a7-3d22-4585-a7d5-525e407b9a12",
                "4d821530-b29f-411a-ad27-46d6fac52362"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "a30b3f38-4a8a-4d53-b6e1-987f2b818184",
          "title": "Purchase Service API",
          "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
          "file": "/test/suite4_purchase.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "24b6c781-f9f5-4d3c-bac2-4bb4d8b6d7b1",
              "title": "Create Health Declaration",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create HD using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 598,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.true, global.serviceids, datas.purchase.type)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('type').to.equal('FIRST_TIME')\nassert(res.body.data[0]).to.have.property('status').to.equal('DRAFT_HEALTH_DECLARATION')\nassert(res.body.data[0].health_declaration_json).to.have.property('age').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('medical').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('job').exist\nglobal.idpurcahse = res.body.data[0].purchase_id\n//console.log(\"ini purchase id : \"+global.idpurcahse",
                  "err": {},
                  "uuid": "cfea4d74-4e08-4fb7-b83b-e2ae46ae34d6",
                  "parentUUID": "24b6c781-f9f5-4d3c-bac2-4bb4d8b6d7b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 609,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.true, global.serviceids1, datas.purchase.type)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('type').to.equal('FIRST_TIME')\nassert(res.body.data[0]).to.have.property('status').to.equal('DRAFT_HEALTH_DECLARATION')\nassert(res.body.data[0].health_declaration_json).to.have.property('age').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('medical').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('job').exist\nglobal.idpurcahse1 = res.body.data[0].purchase_id\n//console.log(\"ini purchase id : \"+global.idpurcahse",
                  "err": {},
                  "uuid": "eb43a565-f1f9-4390-a3ee-9aff1fcb5b1c",
                  "parentUUID": "24b6c781-f9f5-4d3c-bac2-4bb4d8b6d7b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD with value age = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD with value age = false, then user got response error",
                  "timedOut": false,
                  "duration": 637,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.false, datas.purchase.job.true, datas.purchase.medical.true, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "48b0b1d3-3daa-4fdb-93ce-deafa26d4b34",
                  "parentUUID": "24b6c781-f9f5-4d3c-bac2-4bb4d8b6d7b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD  with value job = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD  with value job = false, then user got response error",
                  "timedOut": false,
                  "duration": 637,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.false, datas.purchase.medical.true, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "5e2a4902-1ed1-4abe-b323-76c123447996",
                  "parentUUID": "24b6c781-f9f5-4d3c-bac2-4bb4d8b6d7b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD  with value medical = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD  with value medical = false, then user got response error",
                  "timedOut": false,
                  "duration": 602,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.false, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "c46bba83-e7e8-4b71-b516-0c73795d6679",
                  "parentUUID": "24b6c781-f9f5-4d3c-bac2-4bb4d8b6d7b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cfea4d74-4e08-4fb7-b83b-e2ae46ae34d6",
                "eb43a565-f1f9-4390-a3ee-9aff1fcb5b1c",
                "48b0b1d3-3daa-4fdb-93ce-deafa26d4b34",
                "5e2a4902-1ed1-4abe-b323-76c123447996",
                "c46bba83-e7e8-4b71-b516-0c73795d6679"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3083,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "57b2ba21-24d5-461d-8cbb-33967832b942",
              "title": "Create KYC",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create kyc using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 584,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.validdobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {},
                  "uuid": "332e3829-19d7-45f0-ab20-3954a3093a38",
                  "parentUUID": "57b2ba21-24d5-461d-8cbb-33967832b942",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 603,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.validdobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {},
                  "uuid": "7ec40642-b418-41ab-9638-ce5b8bbd8f23",
                  "parentUUID": "57b2ba21-24d5-461d-8cbb-33967832b942",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using min dob(17th 180hr), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using min dob(17th 180hr), then user got response error",
                  "timedOut": false,
                  "duration": 572,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.minDobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Kamu harus berusia 18 - 55 tahun untuk jadi anggota\")",
                  "err": {},
                  "uuid": "535f2848-db6e-442f-9170-5cac6e03fdc7",
                  "parentUUID": "57b2ba21-24d5-461d-8cbb-33967832b942",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using max dob(55th 181hr), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using max dob(55th 181hr), then user got response error",
                  "timedOut": false,
                  "duration": 594,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.maxDobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Kamu harus berusia 18 - 55 tahun untuk jadi anggota\")",
                  "err": {},
                  "uuid": "a14b9900-997f-42d0-84b7-ab3b5679e90e",
                  "parentUUID": "57b2ba21-24d5-461d-8cbb-33967832b942",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using max dob(more than 16 digit), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using max dob(more than 16 digit), then user got response error",
                  "timedOut": false,
                  "duration": 592,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.valid_dob, datas.KYC.email, datas.KYC.fullname, datas.KYC.max_ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").exist",
                  "err": {},
                  "uuid": "7701cc6b-6c31-425f-b029-e191ac5817f4",
                  "parentUUID": "57b2ba21-24d5-461d-8cbb-33967832b942",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using min dob(less than 16 digit), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using min dob(less than 16 digit), then user got response error",
                  "timedOut": false,
                  "duration": 652,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.valid_dob, datas.KYC.email, datas.KYC.fullname, datas.KYC.min_ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").exist",
                  "err": {},
                  "uuid": "f478e0b1-ae8b-4112-82b1-201ae96ce2d8",
                  "parentUUID": "57b2ba21-24d5-461d-8cbb-33967832b942",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "332e3829-19d7-45f0-ab20-3954a3093a38",
                "7ec40642-b418-41ab-9638-ce5b8bbd8f23",
                "535f2848-db6e-442f-9170-5cac6e03fdc7",
                "a14b9900-997f-42d0-84b7-ab3b5679e90e",
                "7701cc6b-6c31-425f-b029-e191ac5817f4",
                "f478e0b1-ae8b-4112-82b1-201ae96ce2d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3597,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "77bc08ee-353a-4d89-be33-825e63ea58a1",
              "title": "Create Beneficiary",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Beneficiary when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 595,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createbenef.createBeneficiary(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.benef.inform.true, datas.KYC.ktp, datas.KYC.phone, datas.benef.relation, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {},
                  "uuid": "68a330f7-0d02-431a-9f41-127a0fa3f98f",
                  "parentUUID": "77bc08ee-353a-4d89-be33-825e63ea58a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Beneficiary when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 654,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createbenef.createBeneficiary(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.benef.inform.true, datas.KYC.ktp, datas.KYC.phone, datas.benef.relation, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {},
                  "uuid": "6b2dcb15-9ff1-4e66-80ce-c0e4f01d40b1",
                  "parentUUID": "77bc08ee-353a-4d89-be33-825e63ea58a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68a330f7-0d02-431a-9f41-127a0fa3f98f",
                "6b2dcb15-9ff1-4e66-80ce-c0e4f01d40b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1249,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "55592886-2a32-4e0c-b4cf-b22c4d4051fa",
              "title": "Create Payment",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create payment using donation true, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation true, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 608,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, true, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('status').to.equal('PURCHASED')\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {},
                  "uuid": "58acb525-58a3-4322-af21-69fba47d3285",
                  "parentUUID": "55592886-2a32-4e0c-b4cf-b22c4d4051fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create payment using donation true, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation true, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 630,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, true, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('status').to.equal('PURCHASED')\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {},
                  "uuid": "f2302434-3b87-453d-b248-44f0b07f9ff6",
                  "parentUUID": "55592886-2a32-4e0c-b4cf-b22c4d4051fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create payment using donation False, then user got response error",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation False, then user got response error",
                  "timedOut": false,
                  "duration": 673,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, false, global.idpurcahse)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "0e4cc602-83a8-4b95-9d79-e31ccb3583ae",
                  "parentUUID": "55592886-2a32-4e0c-b4cf-b22c4d4051fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58acb525-58a3-4322-af21-69fba47d3285",
                "f2302434-3b87-453d-b248-44f0b07f9ff6",
                "0e4cc602-83a8-4b95-9d79-e31ccb3583ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1911,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "95aa4a2a-7079-4e52-9207-3e90ccbdef0f",
              "title": "Get Data Summary",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user get data api get summary using valid purchase id, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Get Data Summary when user get data api get summary using valid purchase id, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 786,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getSummary.getSummary(global.access_Tokens1, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('status').exist\nassert(res.body.data[0]).to.have.property('type').exist\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "AssertionError: expected { purchase_data: { …(7) }, …(3) } to have property 'id'",
                    "estack": "AssertionError: expected { purchase_data: { …(7) }, …(3) } to have property 'id'\n    at Context.<anonymous> (test/suite4_purchase.js:184:46)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": null
                  },
                  "uuid": "385edd2f-4b78-40d7-9603-13cd0f180ecb",
                  "parentUUID": "95aa4a2a-7079-4e52-9207-3e90ccbdef0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user get data api get summary using invalid purchase id, then user got response error",
                  "fullTitle": "Purchase Service API Get Data Summary when user get data api get summary using invalid purchase id, then user got response error",
                  "timedOut": false,
                  "duration": 707,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getSummary.getSummary(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 400",
                    "estack": "AssertionError: expected 404 to equal 400\n    at Context.<anonymous> (test/suite4_purchase.js:196:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 404\n+ 400\n"
                  },
                  "uuid": "46967e04-f754-4d68-b013-f22ae5f3bd92",
                  "parentUUID": "95aa4a2a-7079-4e52-9207-3e90ccbdef0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "385edd2f-4b78-40d7-9603-13cd0f180ecb",
                "46967e04-f754-4d68-b013-f22ae5f3bd92"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1493,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "33c12ed0-9f3e-4005-bb95-887aef9a5c63",
          "title": "API Calculation Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite5_calculation.js",
          "file": "/test/suite5_calculation.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1f2e96ea-4f68-4625-b403-177b9e00e337",
              "title": "Get Calculate Payment",
              "fullFile": "/home/runner/work/flash/flash/test/suite5_calculation.js",
              "file": "/test/suite5_calculation.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: calucated in \"Get Calculate Payment\"",
                  "fullTitle": "API Calculation Service Get Calculate Payment \"before all\" hook: calucated in \"Get Calculate Payment\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "persenfee = datas.paymentOption.persenfee / 100\nfixfee = datas.paymentOption.fixfee\ntotalFeepersen = datas.calcu.contributeFee  * persenfee\ntotalFeefixfee = fixfee\ntotalpayment = datas.calcu.contributeFee + totalFeepersen\ntotalpayment1 = datas.calcu.contributeFee + totalFeefixfee",
                  "err": {},
                  "uuid": "a0e88715-115e-4a53-9322-f490ce1bdf33",
                  "parentUUID": "1f2e96ea-4f68-4625-b403-177b9e00e337",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "fullTitle": "API Calculation Service Get Calculate Payment when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 643,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await calcu.calcu(global.access_Tokens1, datas.calcu.contributeFee, global.ppoid)\nif(res.status !== 200) {\n    console.log(\"failed  : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(totalFeefixfee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(totalpayment1)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.calcu.contributeFee)\n//console.log(res.text);",
                  "err": {},
                  "uuid": "0daa4d15-0dcf-44d4-add0-9adf6298766d",
                  "parentUUID": "1f2e96ea-4f68-4625-b403-177b9e00e337",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "fullTitle": "API Calculation Service Get Calculate Payment when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 581,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await calcu.calcu(global.access_Tokens1, datas.calcu.contributeFee, datas.calcu.ppoidpersen)\nif(res.status !== 200) {\n    console.log(\"failed  : \"+res.text);\n}\n//console.log(res.text);\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(totalFeepersen)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(totalpayment)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.calcu.contributeFee)",
                  "err": {},
                  "uuid": "6f516c11-b7fb-4f67-a747-72211a131917",
                  "parentUUID": "1f2e96ea-4f68-4625-b403-177b9e00e337",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0daa4d15-0dcf-44d4-add0-9adf6298766d",
                "6f516c11-b7fb-4f67-a747-72211a131917"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1224,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "012a9260-1b43-4ff2-b53b-73430afa7144",
          "title": "API Checkout Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite6_checkout.js",
          "file": "/test/suite6_checkout.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "14599e7a-6638-484b-ba3f-f66c191c80d6",
              "title": "Checkout/Capture Purchase",
              "fullFile": "/home/runner/work/flash/flash/test/suite6_checkout.js",
              "file": "/test/suite6_checkout.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: calucated in \"Checkout/Capture Purchase\"",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase \"before all\" hook: calucated in \"Checkout/Capture Purchase\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "ujrah = datas.service_Group.ujrah / 100\nujrah1 = datas.service_Group.ujrah1 / 100\npersenfee = datas.paymentOption.persenfee / 100\npersen_total_fee = datas.contribution.contriFee * persenfee\nfixfee_total_fee = datas.paymentOption.fixfee\ntotal_ujrah = ujrah * datas.contribution.contriFee\ntotal_ujrah1 = ujrah1 * datas.contribution.contriFee\ntotal_tabaru = datas.contribution.contriFee - total_ujrah\ntotal_tabaru1 = datas.contribution.contriFee - total_ujrah1\nP_total_payment = datas.contribution.contriFee + persen_total_fee\nF_total_payment = datas.contribution.contriFee + fixfee_total_fee",
                  "err": {},
                  "uuid": "89451d25-1e68-4987-a7be-e17caba024d5",
                  "parentUUID": "14599e7a-6638-484b-ba3f-f66c191c80d6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 2612,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi, global.idpaoption, global.idpoc, global.idpurcahse, global.serviceids)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nglobal.ppids = res.body.data[0].id\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(datas.paymentOption.fixfee)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(fixfee_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(F_total_payment)\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"paid_at\")\nassert(res.body.data[0].actions[0]).to.have.property(\"name\").exist\nassert(res.body.data[0].actions[0]).to.have.property(\"method\").exist\nassert(res.body.data[0].actions[0]).to.have.property(\"url\").exist\nassert(res.body.data[0]).to.have.property(\"va_numbers\")\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist",
                  "err": {},
                  "uuid": "3deb95f0-729c-4027-b6c3-46bd16c4fe29",
                  "parentUUID": "14599e7a-6638-484b-ba3f-f66c191c80d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "after(async function checkouts() {\n    this.timeout(5000); \n    const res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi1, global.idpaoption1, global.idpoc1, global.idpurcahse1, global.serviceids1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi1)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids1)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption1)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse1)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc1)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(datas.paymentOption.persenfee)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru1)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah1)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(persen_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(P_total_payment)\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"paid_at\")\nassert(res.body.data[0]).to.have.property(\"actions\")\nassert(res.body.data[0].va_numbers[0]).to.have.property(\"bank\").to.equal(\"permata\")\nassert(res.body.data[0].va_numbers[0]).to.have.property(\"va_number\").exist\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist\n\n\n\n\n});",
                  "err": {},
                  "uuid": "77851f95-c113-451b-b22c-f65a77323268",
                  "parentUUID": "14599e7a-6638-484b-ba3f-f66c191c80d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3deb95f0-729c-4027-b6c3-46bd16c4fe29",
                "77851f95-c113-451b-b22c-f65a77323268"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2612,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "7810d443-c6c6-46a7-887c-50e9df2577c2",
          "title": "API Product Payment",
          "fullFile": "/home/runner/work/flash/flash/test/suite7_PayementCancel.js",
          "file": "/test/suite7_PayementCancel.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9eb82678-73af-4fba-965d-d83b6a93100d",
              "title": "Payment Cancel",
              "fullFile": "/home/runner/work/flash/flash/test/suite7_PayementCancel.js",
              "file": "/test/suite7_PayementCancel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api payment cancel, then status on table product payment will be cancel.",
                  "fullTitle": "API Product Payment Payment Cancel when user hit api payment cancel, then status on table product payment will be cancel.",
                  "timedOut": false,
                  "duration": 824,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cancel.canceled(global.access_Tokens1, global.ppids)\nassert(res.status).to.equal(200)\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(datas.paymentOption.fixfee)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(fixfee_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(F_total_payment)",
                  "err": {},
                  "uuid": "33e062f5-4478-4578-96da-99e98ceabb82",
                  "parentUUID": "9eb82678-73af-4fba-965d-d83b6a93100d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api payment cancel using status expired, then got response error",
                  "fullTitle": "API Product Payment Payment Cancel when user hit api payment cancel using status expired, then got response error",
                  "timedOut": false,
                  "duration": 1367,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cancel.canceled(global.access_Tokens1, datas.status.ppid_expired)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "fe5d1d3d-5554-4d83-8435-d412bfb52435",
                  "parentUUID": "9eb82678-73af-4fba-965d-d83b6a93100d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api payment cancel using status paid, then got response error",
                  "fullTitle": "API Product Payment Payment Cancel when user hit api payment cancel using status paid, then got response error",
                  "timedOut": false,
                  "duration": 1193,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cancel.canceled(global.access_Tokens1, datas.status.ppid_paid)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "ca49edbb-4bd0-4560-8166-3fd5006e60ab",
                  "parentUUID": "9eb82678-73af-4fba-965d-d83b6a93100d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33e062f5-4478-4578-96da-99e98ceabb82",
                "fe5d1d3d-5554-4d83-8435-d412bfb52435",
                "ca49edbb-4bd0-4560-8166-3fd5006e60ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3384,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "674aa98e-ef62-4549-b841-efbb9eff6e9c",
              "title": "Payment Status",
              "fullFile": "/home/runner/work/flash/flash/test/suite7_PayementCancel.js",
              "file": "/test/suite7_PayementCancel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api payment status, then user will be see sumarry payment",
                  "fullTitle": "API Product Payment Payment Status when user hit api payment status, then user will be see sumarry payment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "after(async function statuspayment()  {\n    const res = await status.statuss(global.access_Tokens1, global.ppids)\n    assert(res.status).to.equal(200)\n    //console.log(res.text);\n    assert(res.body.data[0]).to.have.property(\"id\").exist\n    assert(res.body.data[0]).to.have.property(\"display_name\").exist\n    assert(res.body.data[0]).to.have.property(\"total_fee\").exist\n    assert(res.body.data[0]).to.have.property(\"total_payment\").exist\n    assert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\n    assert(res.body.data[0]).to.have.property(\"status\").exist\n    assert(res.body.data[0]).to.have.property(\"image_url\").exist\n    assert(res.body.data[0]).to.have.property(\"expired_at\").exist\n});",
                  "err": {},
                  "uuid": "30bc58ad-fdda-4429-8ec3-6effc1c75207",
                  "parentUUID": "674aa98e-ef62-4549-b841-efbb9eff6e9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30bc58ad-fdda-4429-8ec3-6effc1c75207"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-07-11-2022",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "test-07-11-2022"
      },
      "version": "6.2.0"
    }
  }
}