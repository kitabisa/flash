{
  "stats": {
    "suites": 59,
    "tests": 137,
    "passes": 75,
    "pending": 21,
    "failures": 41,
    "start": "2022-07-14T00:24:57.535Z",
    "end": "2022-07-14T00:26:40.442Z",
    "duration": 102907,
    "testsRegistered": 137,
    "passPercent": 64.65517241379311,
    "pendingPercent": 15.328467153284672,
    "other": 1,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "87e494f4-484e-4b16-b2ae-b560da0e169a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after all\" hook: checkouts in \"{root}\"",
          "fullTitle": "\"after all\" hook: checkouts in \"{root}\"",
          "timedOut": false,
          "duration": 728,
          "state": "failed",
          "speed": null,
          "pass": false,
          "fail": true,
          "pending": false,
          "context": null,
          "code": "this.timeout(5000); \nconst res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi1, global.idpaoption1, global.idpoc1, global.idpurcahse1, global.serviceids1)\n            if(res.status !== 200){\nconsole.log(\"failed : \"+res.text);\n            }\n            assert(res.status).to.equal(200)\n            //console.log(res.text);\n            assert(res.body.data[0]).to.have.property(\"id\").exist\n            assert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi1)\n            assert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids1)\n            assert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption1)\n            assert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse1)\n            assert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc1)\n            assert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(datas.paymentOption.persenfee)\n            assert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(0)\n            assert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\n            assert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru1)\n            assert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah1)\n            assert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(persen_total_fee)\n            assert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(P_total_payment)\n            assert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\n            assert(res.body.data[0]).to.have.property(\"status\").exist\n            assert(res.body.data[0]).to.have.property(\"paid_at\")\n            assert(res.body.data[0]).to.have.property(\"actions\")\n            assert(res.body.data[0].va_numbers[0]).to.have.property(\"bank\").to.equal(\"permata\")\n            assert(res.body.data[0].va_numbers[0]).to.have.property(\"va_number\").exist\n            assert(res.body.data[0]).to.have.property(\"expired_at\").exist",
          "err": {
            "message": "AssertionError: expected 400 to equal 200",
            "estack": "AssertionError: expected 400 to equal 200\n    at Context.checkouts (test/suite6_checkout.js:67:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
            "diff": "- 400\n+ 200\n"
          },
          "uuid": "7dbbc289-16b1-4623-89e7-af93a2df3832",
          "parentUUID": "87e494f4-484e-4b16-b2ae-b560da0e169a",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook: statuspayment",
          "fullTitle": "\"after all\" hook: statuspayment",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const res = await status.statuss(global.access_Tokens1, global.ppids)\nassert(res.status).to.equal(200)\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").exist\nassert(res.body.data[0]).to.have.property(\"total_payment\").exist\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"image_url\").exist\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist",
          "err": {},
          "uuid": "3a0ea134-9ff8-46e2-b202-c12f5226209a",
          "parentUUID": "87e494f4-484e-4b16-b2ae-b560da0e169a",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "9b88774b-627e-4e74-8f8c-14c0bb045f81",
          "title": "Exchange Token API",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: pre_request in \"Exchange Token API\"",
              "fullTitle": "Exchange Token API \"before all\" hook: pre_request in \"Exchange Token API\"",
              "timedOut": false,
              "duration": 2145,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "username = ['ario16@gmail.com', 'ario10@gmail.com']\ntoken1 = []\ntoken2 = []\nfor (const user in username) {\n    const rd = await wong.wongAccount(username[user])\n    console.log('Status Code wong :', rd.status);\n    if (username[user] == `ario16@gmail.com`) {\n        const res = rd.body.data[0].token\n        token1.push(res)\n        global.token1 = token1\n    } else {\n        const res1 = rd.body.data[0].token\n        token2.push(res1)\n        global.token2 = token2\n    }\n}",
              "err": {},
              "uuid": "f2b60584-5ddd-4729-99a8-2ae103392f96",
              "parentUUID": "9b88774b-627e-4e74-8f8c-14c0bb045f81",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "when user input valid token then user got response 200",
              "fullTitle": "Exchange Token API when user input valid token then user got response 200",
              "timedOut": false,
              "duration": 1891,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "tokens = [global.token1, global.token2]\ntokens1 = []\ntokens2 = []\nfor (const x in tokens) {\n    res = await exchange_token.exchangeTokenAccount(tokens[x]);\n    if (tokens[x] == global.token1) {\n        const res1 = res.body.data[0].access_token\n        tokens1.push(res1)\n        global.access_Tokens1 = tokens1\n    } else {\n        const res2 = res.body.data[0].access_token\n        tokens2.push(res2)\n        global.access_Tokens2 = tokens2\n    }\n    assert(res.status).to.equal(200);\n    assert(res.body.data[0]).to.have.property('access_token')\n    assert(res.body.data[0]).to.have.property('refresh_token')\n    assert(res.body.data[0]).to.have.property('expires_in')\n    \n}\n//console.log(global.access_Tokens1);",
              "err": {},
              "uuid": "d13d6419-a509-4e1b-a6f9-93965bb13fb1",
              "parentUUID": "9b88774b-627e-4e74-8f8c-14c0bb045f81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when user input wrong token, then user got response error",
              "fullTitle": "Exchange Token API when user input wrong token, then user got response error",
              "timedOut": false,
              "duration": 1165,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1bXhfUFZiQ3lTV2o5SG5MRHJ0bEJ3X1BLTnlFcVJtWTNpQ3BSMTBlMFpvIn0.eyJleHAiOjE2NTI4OTEwNTEsImlhdCI6MTY1Mjg1NTA1MSwianRpIjoiYmMwMzhiZWUtYzNhNi00YjYxLTlkZjMtYmQ3NjExZWQwMTI0IiwiaXNzIjoiaHR0cDovL2tleWNsb2FrLnN0Zy5rdC5qZy9hdXRoL3JlYWxtcy9raXRhamFnYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNTY5ZjM5NS1iZWUxLTQxMzItOWYzZS1lZDM3ODAyMzY2ODMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrb25nIiwic2Vzc2lvbl9zdGF0ZSI6ImYwZWU1YzI3LTliODYtNDg1Mi1iYmE2LTI1M2ZkN2RlZDFkMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1raXRhamFnYSIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiJmMGVlNWMyNy05Yjg2LTQ4NTItYmJhNi0yNTNmZDdkZWQxZDAiLCJraXRhYmlzYV91c2VyX2lkIjoiNSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiS2l0YWphZ2EgVGVzdCBBamEiLCJraXRhYmlzYV9zZWNvbmRhcnlfaWQiOiI1NDk0ZTg3ODQ2MTJjMWY1ZDNhODI4ZjAyYWNkNzRmNSIsInBob25lX251bWJlciI6IjYyODEyMzQ1Njc4OTAiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJraXRhamFnYS10ZXN0QGtpdGFqYWdhLmlkIiwiZ2l2ZW5fbmFtZSI6IktpdGFqYWdhIiwiZmFtaWx5X')\nassert(res.status).to.equal(502)",
              "err": {},
              "uuid": "27b0fcdb-d9d7-4e5b-b6c2-ac77b28c8045",
              "parentUUID": "9b88774b-627e-4e74-8f8c-14c0bb045f81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when user input empty token, then user got response error",
              "fullTitle": "Exchange Token API when user input empty token, then user got response error",
              "timedOut": false,
              "duration": 875,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('')\nassert(res.status).to.equal(401)",
              "err": {},
              "uuid": "70f42011-8837-43b4-8292-311d090271d6",
              "parentUUID": "9b88774b-627e-4e74-8f8c-14c0bb045f81",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d13d6419-a509-4e1b-a6f9-93965bb13fb1",
            "27b0fcdb-d9d7-4e5b-b6c2-ac77b28c8045",
            "70f42011-8837-43b4-8292-311d090271d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3931,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "a1ce74e5-fbe4-4731-a354-e6d2341ce44b",
          "title": "Get user info",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": false,
              "duration": 873,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)",
              "err": {
                "message": "AssertionError: expected 400 to equal 200",
                "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite1_accountService.js:67:31)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "44af9335-2c59-4e0f-9999-9200abcfff24",
              "parentUUID": "a1ce74e5-fbe4-4731-a354-e6d2341ce44b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": false,
              "duration": 709,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens2)\nassert(res.status).to.equal(404)",
              "err": {
                "message": "AssertionError: expected 400 to equal 404",
                "estack": "AssertionError: expected 400 to equal 404\n    at Context.<anonymous> (test/suite1_accountService.js:71:31)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 400\n+ 404\n"
              },
              "uuid": "98641e8f-48bb-4775-941b-4a84dfae88a9",
              "parentUUID": "a1ce74e5-fbe4-4731-a354-e6d2341ce44b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "44af9335-2c59-4e0f-9999-9200abcfff24",
            "98641e8f-48bb-4775-941b-4a84dfae88a9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1582,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "c2fea155-b93e-4a9f-a5f2-017da69292fe",
          "title": "API Service Group",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fe06131f-e97a-4fb6-b081-714216820357",
              "title": "Create Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 673,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.serviceids = res.body.data[0].id\nglobal.names = res.body.data[0].name\nglobal.desc = res.body.data[0].description\nglobal.codes = res.body.data[0].code\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\n//console.log(\"ini id sg : \"+global.serviceids);",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:61:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "7bde14af-94bb-48db-a2ee-c31301fa3d9a",
                  "parentUUID": "fe06131f-e97a-4fb6-b081-714216820357",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 764,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code1, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah1)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.serviceids1 = res.body.data[0].id\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\n//console.log(\"ini id sg : \"+global.serviceids1);",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:78:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "413820f2-ea65-4369-8dd9-3a31066a9c76",
                  "parentUUID": "fe06131f-e97a-4fb6-b081-714216820357",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input existing data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input existing data, then user got response error",
                  "timedOut": false,
                  "duration": 771,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', 'Alda', 'this is triger from automation tools', datas.service_Group.ujrah)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "df4b8561-2ec8-43be-852c-dc7c13b76cf8",
                  "parentUUID": "fe06131f-e97a-4fb6-b081-714216820357",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 750,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "6102b77c-2bd7-4162-bcf4-38eb63d429d0",
                  "parentUUID": "fe06131f-e97a-4fb6-b081-714216820357",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df4b8561-2ec8-43be-852c-dc7c13b76cf8",
                "6102b77c-2bd7-4162-bcf4-38eb63d429d0"
              ],
              "failures": [
                "7bde14af-94bb-48db-a2ee-c31301fa3d9a",
                "413820f2-ea65-4369-8dd9-3a31066a9c76"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2958,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "37ad55a7-c737-4e04-af97-7192b08d7a99",
              "title": "Get All Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Service Group when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1945,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll.getallServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ids1 = res.body.data[1].id\nids2 = res.body.data[2].id\nglobal.idsgforppo = res.body.data[3].id\nglobal.idsgpuchase = res.body.data[4].id\nglobal.names1 = res.body.data[1].name\nglobal.desc1 = res.body.data[1].description\nglobal.codes1 = res.body.data[1].code",
                  "err": {},
                  "uuid": "b77ff7a3-ea6f-4dd2-afdb-0549106f04e1",
                  "parentUUID": "37ad55a7-c737-4e04-af97-7192b08d7a99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b77ff7a3-ea6f-4dd2-afdb-0549106f04e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1945,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1b947275-d562-4975-96b9-e944036bf3b4",
              "title": "Get All Public Service Group ",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Public Service Group  when user hit api get all public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 2353,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAllpublic.getallpublicServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "416459d0-83f1-446c-ad15-f3f8e4c7345b",
                  "parentUUID": "1b947275-d562-4975-96b9-e944036bf3b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "416459d0-83f1-446c-ad15-f3f8e4c7345b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2353,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a6724da7-48b5-4915-ab85-d0151460d7cd",
              "title": "Get Detail Public Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 672,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, global.serviceids)\nif(res.status !==200){\n    console.log(\"getdetailpublic data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:139:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "137a9516-9d81-42ad-bb06-8ed0744d91a4",
                  "parentUUID": "a6724da7-48b5-4915-ab85-d0151460d7cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail public with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 684,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {},
                  "uuid": "b2a2a594-bfac-44fa-9410-54155f2f9c71",
                  "parentUUID": "a6724da7-48b5-4915-ab85-d0151460d7cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2a2a594-bfac-44fa-9410-54155f2f9c71"
              ],
              "failures": [
                "137a9516-9d81-42ad-bb06-8ed0744d91a4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1356,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1b428e24-4a67-4513-a738-f00e1ec37543",
              "title": "Get Detail Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 764,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, global.serviceids)\nif(res.status !==200){\n    console.log(\"getdetail data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:159:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "1f2857a3-6797-4dac-822a-ce611a295f96",
                  "parentUUID": "1b428e24-4a67-4513-a738-f00e1ec37543",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 676,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {},
                  "uuid": "1ae9379e-25de-4428-bf29-35dad461f86d",
                  "parentUUID": "1b428e24-4a67-4513-a738-f00e1ec37543",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ae9379e-25de-4428-bf29-35dad461f86d"
              ],
              "failures": [
                "1f2857a3-6797-4dac-822a-ce611a295f96"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1440,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "cbaf7587-f831-4116-bd22-09a7a643d797",
              "title": "Update Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 782,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:179:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "8d394573-81b5-41cb-a8d3-e0d31a49a70c",
                  "parentUUID": "cbaf7587-f831-4116-bd22-09a7a643d797",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different code and same description and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different code and same description and same name then user got response 200",
                  "timedOut": false,
                  "duration": 753,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, datas.service_Group.code, global.names, global.desc, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:191:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "5b2bfbcc-29cd-42e5-ab90-48ab050dbd37",
                  "parentUUID": "cbaf7587-f831-4116-bd22-09a7a643d797",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different name and same code then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different name and same code then user got response 200",
                  "timedOut": false,
                  "duration": 703,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes, datas.service_Group.name, global.desc, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:203:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "95853edf-dba9-45b2-bbbf-3aef5637a3ac",
                  "parentUUID": "cbaf7587-f831-4116-bd22-09a7a643d797",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different description and same code and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different description and same code and same name then user got response 200",
                  "timedOut": false,
                  "duration": 662,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes, global.names, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:215:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "66cd4831-b5a0-4f0f-9787-5566af50bb17",
                  "parentUUID": "cbaf7587-f831-4116-bd22-09a7a643d797",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input same data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input same data, then user got response error",
                  "timedOut": false,
                  "duration": 666,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes1, global.names1, global.desc1, datas.service_Group.ujrah)   \nassert(res.status).to.equal(500)",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 500",
                    "estack": "AssertionError: expected 400 to equal 500\n    at Context.<anonymous> (test/suite2_productService.js:224:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 500\n"
                  },
                  "uuid": "eb935b00-0f01-4e2f-9a30-e8b445fe32d4",
                  "parentUUID": "cbaf7587-f831-4116-bd22-09a7a643d797",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 664,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.ids1, global.codes, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nassert(res.status).to.equal(500)",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 500",
                    "estack": "AssertionError: expected 400 to equal 500\n    at Context.<anonymous> (test/suite2_productService.js:228:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 500\n"
                  },
                  "uuid": "3f4ce26d-570d-479b-989b-db58278f2719",
                  "parentUUID": "cbaf7587-f831-4116-bd22-09a7a643d797",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8d394573-81b5-41cb-a8d3-e0d31a49a70c",
                "5b2bfbcc-29cd-42e5-ab90-48ab050dbd37",
                "95853edf-dba9-45b2-bbbf-3aef5637a3ac",
                "66cd4831-b5a0-4f0f-9787-5566af50bb17",
                "eb935b00-0f01-4e2f-9a30-e8b445fe32d4",
                "3f4ce26d-570d-479b-989b-db58278f2719"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4230,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "77fbf719-0aeb-4031-8327-0e1429453d65",
              "title": "Delete data Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9c842b78-c960-47dc-817d-366a3a7c9f1b",
                  "parentUUID": "77fbf719-0aeb-4031-8327-0e1429453d65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f7b3a93f-7bf5-467f-abf7-5dc1b4d3cf60",
                  "parentUUID": "77fbf719-0aeb-4031-8327-0e1429453d65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "9c842b78-c960-47dc-817d-366a3a7c9f1b",
                "f7b3a93f-7bf5-467f-abf7-5dc1b4d3cf60"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "c29165e7-1b94-42c6-807c-44e310d4d57b",
          "title": "API Extension Clause",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e2fc4e0f-e2ce-4682-be05-12f6a2ee0e69",
              "title": "Create ExtensionClause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Create ExtensionClause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 745,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_create.createExtensionClause(global.access_Tokens1, datas.Extension_clause.code, datas.service_Group.name, datas.service_Group.description, global.codes)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(true)\nglobal.ECids = res.body.data[0].id",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:251:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "4a3c2e97-c451-4eb9-9228-23220298b925",
                  "parentUUID": "e2fc4e0f-e2ce-4682-be05-12f6a2ee0e69",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4a3c2e97-c451-4eb9-9228-23220298b925"
              ],
              "pending": [],
              "skipped": [],
              "duration": 745,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "54759c2d-8d9f-4332-9c30-3360daab2d8f",
              "title": "Get all data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Extension Clause when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1520,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getall.getallExtensionClause(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ECids1 = res.body.data[1].id\nglobal.ECserviceCode1 = res.body.data[1].service_group_code\nglobal.code1 = res.body.data[1].code\nglobal.name1 = res.body.data[1].name\nglobal.code2 = res.body.data[0].code\nglobal.name2 = res.body.data[0].name\nglobal.ECserviceCode2 = res.body.data[0].service_group_code\nglobal.desc2 = res.body.data[0].description",
                  "err": {},
                  "uuid": "2e49b48f-7656-4f3e-a9fb-8237bdfb327f",
                  "parentUUID": "54759c2d-8d9f-4332-9c30-3360daab2d8f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e49b48f-7656-4f3e-a9fb-8237bdfb327f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1520,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d97088ce-b7d8-49a7-8ea5-405fca098b48",
              "title": "Delete data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f6b35769-ec0a-468b-aea0-20e50eab8654",
                  "parentUUID": "d97088ce-b7d8-49a7-8ea5-405fca098b48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9433e639-28d8-4004-83e1-e99c275091b3",
                  "parentUUID": "d97088ce-b7d8-49a7-8ea5-405fca098b48",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "f6b35769-ec0a-468b-aea0-20e50eab8654",
                "9433e639-28d8-4004-83e1-e99c275091b3"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "2405f8eb-87dc-468e-b189-66efa58fb389",
              "title": "Get Detail Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 662,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, global.ECids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").to.equal(global.ECids)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(true)",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:297:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "f9068bc1-2284-48b5-8d6a-bff78df1b551",
                  "parentUUID": "2405f8eb-87dc-468e-b189-66efa58fb389",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 659,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, datas.Extension_clause.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc.id).to.equal('error data tidak ditemukan')",
                  "err": {},
                  "uuid": "b373d237-b04c-4c7a-a9d6-095e46b03d3a",
                  "parentUUID": "2405f8eb-87dc-468e-b189-66efa58fb389",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b373d237-b04c-4c7a-a9d6-095e46b03d3a"
              ],
              "failures": [
                "f9068bc1-2284-48b5-8d6a-bff78df1b551"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1321,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5d27f41e-3477-46ab-b94e-1a5a8ad17917",
              "title": "update data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause update data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 687,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Update.updateExtensionClause(global.access_Tokens1, global.ECids, global.code1, global.name1, datas.Extension_clause.description, global.ECserviceCode1)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:315:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "7343dcb2-e0f5-4e72-88dd-80f21478f991",
                  "parentUUID": "5d27f41e-3477-46ab-b94e-1a5a8ad17917",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7343dcb2-e0f5-4e72-88dd-80f21478f991"
              ],
              "pending": [],
              "skipped": [],
              "duration": 687,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "b4c5bd46-9ccf-4845-b8f6-4d7acb05b413",
              "title": "Search data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 1526,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name1)\nif(res.status !== 200){\n    console.log(\"error search EC\" +res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "2fe4f2dd-3182-41ee-80e7-c03af2c21ab7",
                  "parentUUID": "b4c5bd46-9ccf-4845-b8f6-4d7acb05b413",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid service group, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using invalid service group, then user got response error",
                  "timedOut": false,
                  "duration": 744,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, datas.Extension_clause.invalid_service_group_code, global.code1, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "eaa91a3d-44a0-42ab-ba98-c9aaf9ba6482",
                  "parentUUID": "b4c5bd46-9ccf-4845-b8f6-4d7acb05b413",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_code and with same service group and same name, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_code and with same service group and same name, then user got response error",
                  "timedOut": false,
                  "duration": 661,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code2, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "aa73cc11-5435-4ea8-b571-3d7b5565907d",
                  "parentUUID": "b4c5bd46-9ccf-4845-b8f6-4d7acb05b413",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_name and with same service group and same code, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_name and with same service group and same code, then user got response error",
                  "timedOut": false,
                  "duration": 666,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name2)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "1b3e4e1a-d1ac-47b2-81a2-6bb795bca5f1",
                  "parentUUID": "b4c5bd46-9ccf-4845-b8f6-4d7acb05b413",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fe4f2dd-3182-41ee-80e7-c03af2c21ab7",
                "eaa91a3d-44a0-42ab-ba98-c9aaf9ba6482",
                "aa73cc11-5435-4ea8-b571-3d7b5565907d",
                "1b3e4e1a-d1ac-47b2-81a2-6bb795bca5f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3597,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0509915f-38b3-48f1-9271-6a5a720b244e",
              "title": "Create Deductible API",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Deductible API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 704,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.deducids = res.body.data[0].id",
                  "err": {},
                  "uuid": "67567fa1-b060-42dc-b96b-84c517ed7e80",
                  "parentUUID": "0509915f-38b3-48f1-9271-6a5a720b244e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong service group, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong service group, then user got response error",
                  "timedOut": false,
                  "duration": 684,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, datas.Deductible.service_code, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Service Group Code Tidak Ditemukan\")",
                  "err": {},
                  "uuid": "3327ea14-f86d-4e62-bb09-5d1f34c6dd7a",
                  "parentUUID": "0509915f-38b3-48f1-9271-6a5a720b244e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong calculate method, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong calculate method, then user got response error",
                  "timedOut": false,
                  "duration": 775,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {},
                  "uuid": "ed18d404-ebee-4160-925d-a8063466a140",
                  "parentUUID": "0509915f-38b3-48f1-9271-6a5a720b244e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input deduction value with string, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input deduction value with string, then user got response error",
                  "timedOut": false,
                  "duration": 690,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {},
                  "uuid": "3b80fbb8-631c-4162-a3d6-610bce6ed69c",
                  "parentUUID": "0509915f-38b3-48f1-9271-6a5a720b244e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67567fa1-b060-42dc-b96b-84c517ed7e80",
                "3327ea14-f86d-4e62-bb09-5d1f34c6dd7a",
                "ed18d404-ebee-4160-925d-a8063466a140",
                "3b80fbb8-631c-4162-a3d6-610bce6ed69c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2853,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a4516516-1ce1-4804-acc6-1b6b877c2f29",
              "title": "Get all Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all Deduction when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1798,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getall.getDeductible(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "2266985a-b422-4b19-8ca6-807a750c44ff",
                  "parentUUID": "a4516516-1ce1-4804-acc6-1b6b877c2f29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2266985a-b422-4b19-8ca6-807a750c44ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1798,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "00a7adb4-2976-48dd-b70e-ccbe21ab3a9b",
              "title": "Get Detail Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 725,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(global.deducids, global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "4c956952-9d34-4c3b-bd11-ebdc1af57e93",
                  "parentUUID": "00a7adb4-2976-48dd-b70e-ccbe21ab3a9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 668,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(datas.Deductible.wrong_idDeduc, global.access_Tokens1)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {},
                  "uuid": "8a94a566-1db3-470c-957b-0e64f545984b",
                  "parentUUID": "00a7adb4-2976-48dd-b70e-ccbe21ab3a9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c956952-9d34-4c3b-bd11-ebdc1af57e93",
                "8a94a566-1db3-470c-957b-0e64f545984b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1393,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "aa2017e3-a1d3-4f07-8ffd-22ee56cdbd73",
              "title": "Update Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 733,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method1, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "93a62fea-251b-434e-aa4a-ca5b0f41f988",
                  "parentUUID": "aa2017e3-a1d3-4f07-8ffd-22ee56cdbd73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid Deduction id, then user got response error",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input data using invalid Deduction id, then user got response error",
                  "timedOut": false,
                  "duration": 750,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, datas.Deductible.wrong_idDeduc, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Deductible ID Tidak Ditemukan\")",
                  "err": {},
                  "uuid": "166cb6b7-b683-41d0-8707-cef7fc46a0cc",
                  "parentUUID": "aa2017e3-a1d3-4f07-8ffd-22ee56cdbd73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu Method then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu Method then user got response 200",
                  "timedOut": false,
                  "duration": 656,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {},
                  "uuid": "1e033ec2-625c-45fd-8c7e-2f2f86277cc8",
                  "parentUUID": "aa2017e3-a1d3-4f07-8ffd-22ee56cdbd73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu value with string, then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu value with string, then user got response 200",
                  "timedOut": false,
                  "duration": 689,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {},
                  "uuid": "b160af00-6495-4dc5-9953-9980650fec44",
                  "parentUUID": "aa2017e3-a1d3-4f07-8ffd-22ee56cdbd73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93a62fea-251b-434e-aa4a-ca5b0f41f988",
                "166cb6b7-b683-41d0-8707-cef7fc46a0cc",
                "1e033ec2-625c-45fd-8c7e-2f2f86277cc8",
                "b160af00-6495-4dc5-9953-9980650fec44"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2828,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "160aef6a-58f6-4662-abef-4c7a65571323",
              "title": "Search Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 667,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Search.searchDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "abdcba31-046f-4154-a2cb-57873f9dae21",
                  "parentUUID": "160aef6a-58f6-4662-abef-4c7a65571323",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abdcba31-046f-4154-a2cb-57873f9dae21"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 667,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1f594c48-de9f-4930-abfe-92692ff1d549",
              "title": "Deleted Deduction APi",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "61bca97b-390f-4a31-9221-f2bc0ac0e849",
                  "parentUUID": "1f594c48-de9f-4930-abfe-92692ff1d549",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "76d23f68-e22f-4fd4-8e33-50b10a7bd621",
                  "parentUUID": "1f594c48-de9f-4930-abfe-92692ff1d549",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "61bca97b-390f-4a31-9221-f2bc0ac0e849",
                "76d23f68-e22f-4fd4-8e33-50b10a7bd621"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e5800d1c-c8e6-4305-a658-eab52ea4d4bd",
              "title": "Create Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 665,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\nglobal.idpoc = res.body.data[0].id\n//console.log(\"ini poc : \"+global.idpoc);",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:496:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "fc785cc7-5521-45b6-b012-f0ca5d6d92ca",
                  "parentUUID": "e5800d1c-c8e6-4305-a658-eab52ea4d4bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 661,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids1, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\nglobal.idpoc1 = res.body.data[0].id\n//console.log(\"ini poc : \"+global.idpoc);",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:515:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "68ad6552-5003-41b4-97ac-260e1030f133",
                  "parentUUID": "e5800d1c-c8e6-4305-a658-eab52ea4d4bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 732,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "f146f596-f98a-4a93-89bb-eb76742b7e90",
                  "parentUUID": "e5800d1c-c8e6-4305-a658-eab52ea4d4bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": false,
                  "duration": 665,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "924b7715-b373-4fca-925a-fe1f8f817998",
                  "parentUUID": "e5800d1c-c8e6-4305-a658-eab52ea4d4bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 671,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "695d212d-50a8-41a4-829c-de6d24703169",
                  "parentUUID": "e5800d1c-c8e6-4305-a658-eab52ea4d4bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f146f596-f98a-4a93-89bb-eb76742b7e90",
                "924b7715-b373-4fca-925a-fe1f8f817998",
                "695d212d-50a8-41a4-829c-de6d24703169"
              ],
              "failures": [
                "fc785cc7-5521-45b6-b012-f0ca5d6d92ca",
                "68ad6552-5003-41b4-97ac-260e1030f133"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3394,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "01728870-4e59-462a-a6e9-4285740206f2",
              "title": "Get all data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Product Contribution when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1677,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getall.getContribution(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\ncontriId = res.body.data[0].id\nglobal.contripurchase = res.body.data[1].id",
                  "err": {},
                  "uuid": "1808642c-372f-4c50-b3e1-586c7f81fd52",
                  "parentUUID": "01728870-4e59-462a-a6e9-4285740206f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1808642c-372f-4c50-b3e1-586c7f81fd52"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1677,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "4618c0ef-6d3f-464f-8949-2543049de776",
              "title": "Get detail Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 671,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, global.serviceids)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:569:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "b16d2788-6312-42b7-8e9c-41c589101e5f",
                  "parentUUID": "4618c0ef-6d3f-464f-8949-2543049de776",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 688,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {},
                  "uuid": "0184b234-8ade-44bf-9712-619e63dd1d0a",
                  "parentUUID": "4618c0ef-6d3f-464f-8949-2543049de776",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0184b234-8ade-44bf-9712-619e63dd1d0a"
              ],
              "failures": [
                "b16d2788-6312-42b7-8e9c-41c589101e5f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1359,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "9ac6c39f-dfec-462b-985f-a09e03fb281f",
              "title": "Update data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 701,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Update.updateContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.contribution.isPopular.false, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee, contriId)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/suite2_productService.js:593:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "a00a7c64-61f7-4fee-bb50-16d38796772f",
                  "parentUUID": "9ac6c39f-dfec-462b-985f-a09e03fb281f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 734,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "aebe53d6-a344-43d3-88b7-e3edc09bb1e0",
                  "parentUUID": "9ac6c39f-dfec-462b-985f-a09e03fb281f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": false,
                  "duration": 720,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "424c6d0e-a840-47a4-8501-988f7e2eaf4f",
                  "parentUUID": "9ac6c39f-dfec-462b-985f-a09e03fb281f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": false,
                  "duration": 681,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "a0a84c1f-da9e-440b-96a2-49e606360d33",
                  "parentUUID": "9ac6c39f-dfec-462b-985f-a09e03fb281f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aebe53d6-a344-43d3-88b7-e3edc09bb1e0",
                "424c6d0e-a840-47a4-8501-988f7e2eaf4f",
                "a0a84c1f-da9e-440b-96a2-49e606360d33"
              ],
              "failures": [
                "a00a7c64-61f7-4fee-bb50-16d38796772f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2836,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "281d606e-7749-442a-90e3-ad422e0f9d41",
              "title": "Delete Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a407e705-e65a-44bc-b210-c650d78875e0",
                  "parentUUID": "281d606e-7749-442a-90e3-ad422e0f9d41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7519f0e8-82da-4fb4-b966-eb269792e516",
                  "parentUUID": "281d606e-7749-442a-90e3-ad422e0f9d41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "a407e705-e65a-44bc-b210-c650d78875e0",
                "7519f0e8-82da-4fb4-b966-eb269792e516"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "0a865767-e80c-4bae-a3e6-f6ff46d85ca4",
          "title": "Payment Api Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
          "file": "/test/suite3_paymentService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "17776edb-cb8b-4e67-83a3-ac3a0b6fd7f5",
              "title": "Create Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Provider when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 674,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Provider.createPaymentProvider(global.access_Tokens1, datas.paymentProvider.callback_url, datas.paymentProvider.code, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"code\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"callback_url\").to.equal(datas.paymentProvider.callback_url)\nproviderids = res.body.data[0].id",
                  "err": {},
                  "uuid": "cb69fa8c-9e7e-442f-949c-19721e25052c",
                  "parentUUID": "17776edb-cb8b-4e67-83a3-ac3a0b6fd7f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb69fa8c-9e7e-442f-949c-19721e25052c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 674,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "95a7c186-cfb6-4f7f-9b3a-895eb997aa16",
              "title": "Get all Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Payment Provider when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1151,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Provider.getPaymentProvider(global.access_Tokens1)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"code\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"callback_url\").exist\nid1 = res.body.data[1].id",
                  "err": {},
                  "uuid": "debc890b-5033-4a2f-a05d-5641559a275d",
                  "parentUUID": "95a7c186-cfb6-4f7f-9b3a-895eb997aa16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "debc890b-5033-4a2f-a05d-5641559a275d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1151,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "960cc7da-d8da-4b82-92aa-796f7711ce36",
              "title": "Get detail payment provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 662,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, providerids)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "763da573-af16-462f-9fcb-71b16b3a3487",
                  "parentUUID": "960cc7da-d8da-4b82-92aa-796f7711ce36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 675,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID)\nassert(res.status).to.equal(500)",
                  "err": {},
                  "uuid": "0a5a0db0-fc19-4ae4-93d3-435a952d9abf",
                  "parentUUID": "960cc7da-d8da-4b82-92aa-796f7711ce36",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "763da573-af16-462f-9fcb-71b16b3a3487",
                "0a5a0db0-fc19-4ae4-93d3-435a952d9abf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1337,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "295f88a0-d29e-404b-af8d-5898756f6e13",
              "title": "Update Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 752,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, providerids, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"Failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "0db95cf4-92f5-42d4-b2df-79144fc254ed",
                  "parentUUID": "295f88a0-d29e-404b-af8d-5898756f6e13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 679,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID, datas.paymentProvider.callback_url, datas.paymentProvider.wrongCode, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "8bbb4bfe-93f4-4b9c-8c2a-eecf680b27ce",
                  "parentUUID": "295f88a0-d29e-404b-af8d-5898756f6e13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using existing code, then user got response error",
                  "timedOut": false,
                  "duration": 692,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "dd46c2c1-c367-4b71-b24c-b5a344fe14a1",
                  "parentUUID": "295f88a0-d29e-404b-af8d-5898756f6e13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid authorization, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid authorization, then user got response error",
                  "timedOut": false,
                  "duration": 707,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(datas.paymentProvider.invalid_auth, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(401)",
                  "err": {},
                  "uuid": "15d3508c-1f49-43f9-a7b6-61aff2da2431",
                  "parentUUID": "295f88a0-d29e-404b-af8d-5898756f6e13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0db95cf4-92f5-42d4-b2df-79144fc254ed",
                "8bbb4bfe-93f4-4b9c-8c2a-eecf680b27ce",
                "dd46c2c1-c367-4b71-b24c-b5a344fe14a1",
                "15d3508c-1f49-43f9-a7b6-61aff2da2431"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2830,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "20ea1551-2917-4963-ad07-f5832b3cd6f0",
              "title": "Delete payment Provider API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "297b6e68-5e64-46d2-803e-984b0369ca25",
                  "parentUUID": "20ea1551-2917-4963-ad07-f5832b3cd6f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9ef07f8a-e231-44f6-84b5-ad52be0b5335",
                  "parentUUID": "20ea1551-2917-4963-ad07-f5832b3cd6f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "94e952e4-8306-4c3f-9283-4812c3d41fab",
                  "parentUUID": "20ea1551-2917-4963-ad07-f5832b3cd6f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "297b6e68-5e64-46d2-803e-984b0369ca25",
                "9ef07f8a-e231-44f6-84b5-ad52be0b5335",
                "94e952e4-8306-4c3f-9283-4812c3d41fab"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "148a924f-cafa-436d-9ef2-daa58b6ababf",
              "title": "Create Payment Option API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 2068,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bankName =  [\"shopeepay\", \"qris\", \"gopay\"]\nfor (let x in bankName) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, 'EWALLET', datas.Deductible.description, datas.paymentOption.fixfee, bankName[x], 0, providerids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(bankName[x])\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nglobal.idpaoption = res.body.data[0].id\nidpaoption3 = res.body.data[0].name\n\n}",
                  "err": {},
                  "uuid": "627887c4-5c32-4f78-95e3-78c3ff1d9e7d",
                  "parentUUID": "148a924f-cafa-436d-9ef2-daa58b6ababf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 5465,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bankName =  [\"mandiri\", \"cimb\", \"mega\", \"bni\", \"bca\", \"permata\", \"bri\", \"maybank\"]\nfor (let x in bankName) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, \"BANK_TRANSFER\", datas.Deductible.description, 0 , bankName[x] , datas.paymentOption.persenfee , id1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(bankName[x])\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nglobal.idpaoption1 = res.body.data[0].id\nglobal.bankname = res.body.data[0].name\n}",
                  "err": {},
                  "uuid": "ceaccbd9-d68d-4c29-8cb3-70d3ac87a964",
                  "parentUUID": "148a924f-cafa-436d-9ef2-daa58b6ababf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong category, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input wrong category, then user got response error",
                  "timedOut": false,
                  "duration": 662,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, datas.paymentOption.wrong_category, datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,0 , id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"kategori tidak valid\")",
                  "err": {},
                  "uuid": "aea88afd-0c89-4934-8517-433f34153c01",
                  "parentUUID": "148a924f-cafa-436d-9ef2-daa58b6ababf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input provider id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input provider id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 690,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {},
                  "uuid": "a43f88ba-f0f1-4656-ae07-bf244c5e698b",
                  "parentUUID": "148a924f-cafa-436d-9ef2-daa58b6ababf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input persen fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 675,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "63ae3c88-9955-4a73-866e-cc4a206cfc3d",
                  "parentUUID": "148a924f-cafa-436d-9ef2-daa58b6ababf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input fix fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 744,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "ce4b9213-3aad-4f82-af4f-b955ca70de92",
                  "parentUUID": "148a924f-cafa-436d-9ef2-daa58b6ababf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "627887c4-5c32-4f78-95e3-78c3ff1d9e7d",
                "ceaccbd9-d68d-4c29-8cb3-70d3ac87a964",
                "aea88afd-0c89-4934-8517-433f34153c01",
                "a43f88ba-f0f1-4656-ae07-bf244c5e698b",
                "63ae3c88-9955-4a73-866e-cc4a206cfc3d",
                "ce4b9213-3aad-4f82-af4f-b955ca70de92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10304,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e40e60fd-6a3a-423e-8c09-6e2ff727b027",
              "title": "Get all payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all payment option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 4484,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Option.getPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nidpo = res.body.data[0].id\nidpo1 = res.body.data[1].id\nidpo2 = res.body.data[2].id\nidpo3 = res.body.data[3].id\n//console.log(idpo);\n//console.log(idpo1);\n//console.log(idpo2);",
                  "err": {},
                  "uuid": "e31048cf-6019-4e46-b23e-8520754b0fc4",
                  "parentUUID": "e40e60fd-6a3a-423e-8c09-6e2ff727b027",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e31048cf-6019-4e46-b23e-8520754b0fc4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4484,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "4a6f28dd-4023-43ea-8068-5198c457472a",
              "title": "Get Detail payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 735,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, idpo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist",
                  "err": {},
                  "uuid": "d4f47b58-6768-49b2-976e-6e2fd1f723dd",
                  "parentUUID": "4a6f28dd-4023-43ea-8068-5198c457472a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 685,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)",
                  "err": {},
                  "uuid": "7dad1583-46ae-498a-9a30-6ab25092a896",
                  "parentUUID": "4a6f28dd-4023-43ea-8068-5198c457472a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d4f47b58-6768-49b2-976e-6e2fd1f723dd",
                "7dad1583-46ae-498a-9a30-6ab25092a896"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1420,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "6389fe51-113e-48c9-8ae2-1f7bef030e80",
              "title": "Update Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 746,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"EWALLET\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "c96cecd3-647b-4a43-83f9-dc7176e53888",
                  "parentUUID": "6389fe51-113e-48c9-8ae2-1f7bef030e80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 767,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"BANK_TRANSFER\", datas.Deductible.description, datas.paymentOption.fixfee , datas.paymentOption.name , 0 , id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "0997d4bc-c7bf-4209-a53e-647f57b44dae",
                  "parentUUID": "6389fe51-113e-48c9-8ae2-1f7bef030e80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 672,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {},
                  "uuid": "2967822b-73a7-4777-82b2-ff7d4638a0be",
                  "parentUUID": "6389fe51-113e-48c9-8ae2-1f7bef030e80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input persen fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 816,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "80bda632-14af-4c0b-b784-bf9e48e2f7fb",
                  "parentUUID": "6389fe51-113e-48c9-8ae2-1f7bef030e80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input fix fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 668,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {},
                  "uuid": "5c1ca795-68f7-44d1-bcdc-1d76e38d68c5",
                  "parentUUID": "6389fe51-113e-48c9-8ae2-1f7bef030e80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 681,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name , 0 , id1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {},
                  "uuid": "f3c2d5f8-e61d-42d9-ab4e-074cdb838cdd",
                  "parentUUID": "6389fe51-113e-48c9-8ae2-1f7bef030e80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c96cecd3-647b-4a43-83f9-dc7176e53888",
                "0997d4bc-c7bf-4209-a53e-647f57b44dae",
                "2967822b-73a7-4777-82b2-ff7d4638a0be",
                "80bda632-14af-4c0b-b784-bf9e48e2f7fb",
                "5c1ca795-68f7-44d1-bcdc-1d76e38d68c5",
                "f3c2d5f8-e61d-42d9-ab4e-074cdb838cdd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4350,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "13158df3-4d9c-4ded-9de9-ecec2cb2db6a",
              "title": "Delete Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "78b08a9f-4d11-40e0-896c-401d989ffbc1",
                  "parentUUID": "13158df3-4d9c-4ded-9de9-ecec2cb2db6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "37a01894-bcc1-47e5-bcba-9e7a3575019d",
                  "parentUUID": "13158df3-4d9c-4ded-9de9-ecec2cb2db6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "20608bc4-c4eb-4b78-ba44-bacf9a857018",
                  "parentUUID": "13158df3-4d9c-4ded-9de9-ecec2cb2db6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c39a7798-34e6-47f5-9548-076e71cbf752",
                  "parentUUID": "13158df3-4d9c-4ded-9de9-ecec2cb2db6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "78b08a9f-4d11-40e0-896c-401d989ffbc1",
                "37a01894-bcc1-47e5-bcba-9e7a3575019d",
                "20608bc4-c4eb-4b78-ba44-bacf9a857018",
                "c39a7798-34e6-47f5-9548-076e71cbf752"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7e4f3c28-23dd-4b8a-be79-9271ff6e456f",
              "title": "Create Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 654,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.idpaoption, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nglobal.ppoid = res.body.data[0].id\nglobal.payment_option_id = res.body.data[0].payment_option_id\nglobal.service_group_id = res.body.data[0].service_group_id\n//console.log(\"ini ppoids : \"+global.ppoid);\n//console.log(\"ini payment_option_id : \"+global.payment_option_id);\n//console.log(\"ini service_group_id : \"+global.service_group_id);",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:270:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "7bea1112-3a13-4efd-ae68-06c355709017",
                  "parentUUID": "7e4f3c28-23dd-4b8a-be79-9271ff6e456f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 664,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.idpaoption1, global.serviceids1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nglobal.ppoid1 = res.body.data[0].id\nglobal.payment_option_id1 = res.body.data[0].payment_option_id\nglobal.service_group_id1 = res.body.data[0].service_group_id\n//console.log(\"ini ppoids : \"+global.ppoid);\n//console.log(\"ini payment_option_id : \"+global.payment_option_id);\n//console.log(\"ini service_group_id : \"+global.service_group_id);",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:287:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "3ad1081b-89b2-42a2-8944-25fcf5e4e5f5",
                  "parentUUID": "7e4f3c28-23dd-4b8a-be79-9271ff6e456f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input service group id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input service group id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "e38df72d-8c74-4330-9075-deb5c74bca97",
                  "parentUUID": "7e4f3c28-23dd-4b8a-be79-9271ff6e456f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 707,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, global.idsgforppo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\")",
                  "err": {},
                  "uuid": "2d577f9d-0c2d-40a1-8aef-4b3de73dd737",
                  "parentUUID": "7e4f3c28-23dd-4b8a-be79-9271ff6e456f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d577f9d-0c2d-40a1-8aef-4b3de73dd737"
              ],
              "failures": [
                "7bea1112-3a13-4efd-ae68-06c355709017",
                "3ad1081b-89b2-42a2-8944-25fcf5e4e5f5"
              ],
              "pending": [
                "e38df72d-8c74-4330-9075-deb5c74bca97"
              ],
              "skipped": [],
              "duration": 2025,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "2708f2f7-c813-471f-8c54-050c492e57e4",
              "title": "Get all Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1556,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPO.getProductPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nidppo0 = res.body.data[0].id\nidppo1 = res.body.data[1].id\nidppo2 = res.body.data[2].id",
                  "err": {},
                  "uuid": "f8ec8e7d-f68c-4540-8884-1003be1443e2",
                  "parentUUID": "2708f2f7-c813-471f-8c54-050c492e57e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8ec8e7d-f68c-4540-8884-1003be1443e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1556,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c58073e8-6e01-40b7-817a-9d9cbbf7bcd6",
              "title": "Get all Product Payment Option with Service Group Id",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 667,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nidppo = res.body.data[0].id",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:334:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "f04081bf-a97d-46d1-bb8d-2f2ab9888bce",
                  "parentUUID": "c58073e8-6e01-40b7-817a-9d9cbbf7bcd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid sg id, then user got response error",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user input invalid sg id, then user got response error",
                  "timedOut": false,
                  "duration": 1068,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "10452fdc-f6ff-4618-a4b9-05d5dcba137c",
                  "parentUUID": "c58073e8-6e01-40b7-817a-9d9cbbf7bcd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10452fdc-f6ff-4618-a4b9-05d5dcba137c"
              ],
              "failures": [
                "f04081bf-a97d-46d1-bb8d-2f2ab9888bce"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1735,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d6410476-3a58-48ba-ae87-4efb4184badd",
              "title": "Get detail Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, idppo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {
                    "message": "ReferenceError: idppo is not defined",
                    "estack": "ReferenceError: idppo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:351:98)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "c82364ef-0bbe-4595-af20-72769640a13c",
                  "parentUUID": "d6410476-3a58-48ba-ae87-4efb4184badd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 672,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {},
                  "uuid": "91b170ba-76f6-41eb-b356-dc58299b2816",
                  "parentUUID": "d6410476-3a58-48ba-ae87-4efb4184badd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91b170ba-76f6-41eb-b356-dc58299b2816"
              ],
              "failures": [
                "c82364ef-0bbe-4595-af20-72769640a13c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 672,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "715f03a7-9b65-4071-8158-6b8f76daee9e",
              "title": "Update Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 714,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, global.payment_option_id, global.service_group_id, global.ppoid)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:375:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "87b11fa4-16b9-44ab-a0c8-695702da4f59",
                  "parentUUID": "715f03a7-9b65-4071-8158-6b8f76daee9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 679,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.payment_option_id, global.service_group_id, global.ppoid)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:389:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "a1890132-fb78-40c5-b8bc-e611bdb8c234",
                  "parentUUID": "715f03a7-9b65-4071-8158-6b8f76daee9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PPO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PPO id, then user got response error",
                  "timedOut": false,
                  "duration": 652,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, idpo, idsgforppo, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {},
                  "uuid": "aef19deb-db57-41ea-9764-b4182f587c2d",
                  "parentUUID": "715f03a7-9b65-4071-8158-6b8f76daee9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid SG id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid SG id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "91aa446b-a332-4dd1-a78b-ede46878b196",
                  "parentUUID": "715f03a7-9b65-4071-8158-6b8f76daee9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PO id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, idsgforppo, idppo)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "ReferenceError: idppo is not defined",
                    "estack": "ReferenceError: idppo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:409:284)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "fe74fc5a-9669-498c-82c3-5bc5a84a7c67",
                  "parentUUID": "715f03a7-9b65-4071-8158-6b8f76daee9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aef19deb-db57-41ea-9764-b4182f587c2d"
              ],
              "failures": [
                "87b11fa4-16b9-44ab-a0c8-695702da4f59",
                "a1890132-fb78-40c5-b8bc-e611bdb8c234",
                "fe74fc5a-9669-498c-82c3-5bc5a84a7c67"
              ],
              "pending": [
                "91aa446b-a332-4dd1-a78b-ede46878b196"
              ],
              "skipped": [],
              "duration": 2045,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c5e8ec44-d13a-4648-9f03-4d5928b31f14",
              "title": "Get Payment Option Page",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get page payment with valid token and service group, then user got response 200/OK",
                  "fullTitle": "Payment Api Service Get Payment Option Page when user hit api get page payment with valid token and service group, then user got response 200/OK",
                  "timedOut": false,
                  "duration": 651,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getaPage.getPaymentOptionPage(global.access_Tokens1, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"category\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"description\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"image_url\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"percentage_fee\").exist",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/suite3_paymentService.js:416:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "2dfd6296-859f-4b53-8677-6c84d13f166e",
                  "parentUUID": "c5e8ec44-d13a-4648-9f03-4d5928b31f14",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2dfd6296-859f-4b53-8677-6c84d13f166e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 651,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "a73bca77-d614-448d-8c2e-05e11ff23b27",
              "title": "Delete Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "2ceba486-1da9-4419-8bf9-eaeb3ff63937",
                  "parentUUID": "a73bca77-d614-448d-8c2e-05e11ff23b27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "dd63ffbf-9854-4917-80e4-f55b7dc2ffa5",
                  "parentUUID": "a73bca77-d614-448d-8c2e-05e11ff23b27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "fd465d48-0133-41db-983c-0817e5c8f8a3",
                  "parentUUID": "a73bca77-d614-448d-8c2e-05e11ff23b27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "02daa917-f9a9-471e-bf08-58280b175a11",
                  "parentUUID": "a73bca77-d614-448d-8c2e-05e11ff23b27",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "2ceba486-1da9-4419-8bf9-eaeb3ff63937",
                "dd63ffbf-9854-4917-80e4-f55b7dc2ffa5",
                "fd465d48-0133-41db-983c-0817e5c8f8a3",
                "02daa917-f9a9-471e-bf08-58280b175a11"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "acf62a12-c153-4b14-aa0f-202e27baa6f4",
          "title": "Purchase Service API",
          "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
          "file": "/test/suite4_purchase.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c7b7aefa-365b-474e-8afa-f26cf4cbaa3b",
              "title": "Create Health Declaration",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create HD using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 719,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.true, global.serviceids, datas.purchase.type)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('type').to.equal('FIRST_TIME')\nassert(res.body.data[0]).to.have.property('status').to.equal('DRAFT_HEALTH_DECLARATION')\nassert(res.body.data[0].health_declaration_json).to.have.property('age').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('medical').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('job').exist\nglobal.idpurcahse = res.body.data[0].purchase_id\n//console.log(\"ini purchase id : \"+global.idpurcahse",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:22:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "99220ace-a1af-46a1-9c27-0e22475f5a0f",
                  "parentUUID": "c7b7aefa-365b-474e-8afa-f26cf4cbaa3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 700,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.true, global.serviceids1, datas.purchase.type)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('type').to.equal('FIRST_TIME')\nassert(res.body.data[0]).to.have.property('status').to.equal('DRAFT_HEALTH_DECLARATION')\nassert(res.body.data[0].health_declaration_json).to.have.property('age').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('medical').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('job').exist\nglobal.idpurcahse1 = res.body.data[0].purchase_id\n//console.log(\"ini purchase id : \"+global.idpurcahse",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:42:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "75057081-3709-4c94-83c6-d9735cd7e8ed",
                  "parentUUID": "c7b7aefa-365b-474e-8afa-f26cf4cbaa3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD with value age = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD with value age = false, then user got response error",
                  "timedOut": false,
                  "duration": 650,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.false, datas.purchase.job.true, datas.purchase.medical.true, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "d7867bc9-a192-4a04-b767-fbd74ce47505",
                  "parentUUID": "c7b7aefa-365b-474e-8afa-f26cf4cbaa3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD  with value job = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD  with value job = false, then user got response error",
                  "timedOut": false,
                  "duration": 813,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.false, datas.purchase.medical.true, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "9bda50b5-78ba-4f8e-a84c-4d518ccce04e",
                  "parentUUID": "c7b7aefa-365b-474e-8afa-f26cf4cbaa3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD  with value medical = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD  with value medical = false, then user got response error",
                  "timedOut": false,
                  "duration": 669,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.false, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "abcfc85e-efb3-41f9-b9de-4471663bb705",
                  "parentUUID": "c7b7aefa-365b-474e-8afa-f26cf4cbaa3b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7867bc9-a192-4a04-b767-fbd74ce47505",
                "9bda50b5-78ba-4f8e-a84c-4d518ccce04e",
                "abcfc85e-efb3-41f9-b9de-4471663bb705"
              ],
              "failures": [
                "99220ace-a1af-46a1-9c27-0e22475f5a0f",
                "75057081-3709-4c94-83c6-d9735cd7e8ed"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3551,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5db8aef8-2267-46b6-8644-a900bb0c723d",
              "title": "Create KYC",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create kyc using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 682,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.validdobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:76:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "27fe56c6-b8d1-4cfc-9e8a-9d06858e7117",
                  "parentUUID": "5db8aef8-2267-46b6-8644-a900bb0c723d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 683,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.validdobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:90:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "828a4fb1-6fe3-4bb3-995b-3a6597fb5b27",
                  "parentUUID": "5db8aef8-2267-46b6-8644-a900bb0c723d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using min dob(17th 180hr), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using min dob(17th 180hr), then user got response error",
                  "timedOut": false,
                  "duration": 678,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.minDobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Kamu harus berusia 18 - 55 tahun untuk jadi anggota\")",
                  "err": {
                    "message": "AssertionError: expected 'unmarshall gagal' to equal 'Kamu harus berusia 18 - 55 tahun untu…'",
                    "estack": "AssertionError: expected 'unmarshall gagal' to equal 'Kamu harus berusia 18 - 55 tahun untu…'\n    at Context.<anonymous> (test/suite4_purchase.js:102:70)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- unmarshall gagal\n+ Kamu harus berusia 18 - 55 tahun untuk jadi anggota\n"
                  },
                  "uuid": "e9e8b7fc-71bb-43ae-aa16-b77177fc0944",
                  "parentUUID": "5db8aef8-2267-46b6-8644-a900bb0c723d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using max dob(55th 181hr), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using max dob(55th 181hr), then user got response error",
                  "timedOut": false,
                  "duration": 677,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.maxDobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Kamu harus berusia 18 - 55 tahun untuk jadi anggota\")",
                  "err": {
                    "message": "AssertionError: expected 'unmarshall gagal' to equal 'Kamu harus berusia 18 - 55 tahun untu…'",
                    "estack": "AssertionError: expected 'unmarshall gagal' to equal 'Kamu harus berusia 18 - 55 tahun untu…'\n    at Context.<anonymous> (test/suite4_purchase.js:107:70)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- unmarshall gagal\n+ Kamu harus berusia 18 - 55 tahun untuk jadi anggota\n"
                  },
                  "uuid": "d60ea114-2719-4c39-b1dc-2c6a34f89749",
                  "parentUUID": "5db8aef8-2267-46b6-8644-a900bb0c723d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using max dob(more than 16 digit), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using max dob(more than 16 digit), then user got response error",
                  "timedOut": false,
                  "duration": 665,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.valid_dob, datas.KYC.email, datas.KYC.fullname, datas.KYC.max_ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").exist",
                  "err": {},
                  "uuid": "0bd4a7d7-a774-4e93-b265-191fae47a288",
                  "parentUUID": "5db8aef8-2267-46b6-8644-a900bb0c723d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using min dob(less than 16 digit), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using min dob(less than 16 digit), then user got response error",
                  "timedOut": false,
                  "duration": 656,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.valid_dob, datas.KYC.email, datas.KYC.fullname, datas.KYC.min_ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").exist",
                  "err": {},
                  "uuid": "b4f77daa-c2b6-4769-8daa-634eb6d835d0",
                  "parentUUID": "5db8aef8-2267-46b6-8644-a900bb0c723d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0bd4a7d7-a774-4e93-b265-191fae47a288",
                "b4f77daa-c2b6-4769-8daa-634eb6d835d0"
              ],
              "failures": [
                "27fe56c6-b8d1-4cfc-9e8a-9d06858e7117",
                "828a4fb1-6fe3-4bb3-995b-3a6597fb5b27",
                "e9e8b7fc-71bb-43ae-aa16-b77177fc0944",
                "d60ea114-2719-4c39-b1dc-2c6a34f89749"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4041,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "76275e64-d2f3-4276-a994-f7d836fb97d3",
              "title": "Create Beneficiary",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Beneficiary when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 661,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createbenef.createBeneficiary(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.benef.inform.true, datas.KYC.ktp, datas.KYC.phone, datas.benef.relation, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:127:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "d9d2f257-3c63-48c0-bbc8-bd715410d69b",
                  "parentUUID": "76275e64-d2f3-4276-a994-f7d836fb97d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Beneficiary when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 662,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createbenef.createBeneficiary(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.benef.inform.true, datas.KYC.ktp, datas.KYC.phone, datas.benef.relation, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:141:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "61fab639-f3c2-4a68-b6a7-865958046dba",
                  "parentUUID": "76275e64-d2f3-4276-a994-f7d836fb97d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d9d2f257-3c63-48c0-bbc8-bd715410d69b",
                "61fab639-f3c2-4a68-b6a7-865958046dba"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1323,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "6203bb04-65f9-48ed-b2c9-ce63fcfbd7ac",
              "title": "Create Payment",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create payment using donation true, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation true, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 665,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, true, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('status').to.equal('PURCHASED')\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:157:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "8ed200ef-139f-4081-9cbb-3bfeaeab79a7",
                  "parentUUID": "6203bb04-65f9-48ed-b2c9-ce63fcfbd7ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create payment using donation true, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation true, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 696,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, true, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('status').to.equal('PURCHASED')\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:167:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "33aa849f-c01e-4978-aed6-8169fcd69f38",
                  "parentUUID": "6203bb04-65f9-48ed-b2c9-ce63fcfbd7ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create payment using donation False, then user got response error",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation False, then user got response error",
                  "timedOut": false,
                  "duration": 669,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, false, global.idpurcahse)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "64715542-a934-4fa3-a73a-616430c3a1eb",
                  "parentUUID": "6203bb04-65f9-48ed-b2c9-ce63fcfbd7ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64715542-a934-4fa3-a73a-616430c3a1eb"
              ],
              "failures": [
                "8ed200ef-139f-4081-9cbb-3bfeaeab79a7",
                "33aa849f-c01e-4978-aed6-8169fcd69f38"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2030,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7fdfe477-6059-4891-b400-08f411df54f4",
              "title": "Get Data Summary",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user get data api get summary using valid purchase id, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Get Data Summary when user get data api get summary using valid purchase id, then user got response 200/ok",
                  "timedOut": false,
                  "duration": 656,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getSummary.getSummary(global.access_Tokens1, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('status').exist\nassert(res.body.data[0]).to.have.property('type').exist\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite4_purchase.js:183:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "209cfe3f-7549-4bef-b541-8c739f21f69a",
                  "parentUUID": "7fdfe477-6059-4891-b400-08f411df54f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user get data api get summary using invalid purchase id, then user got response error",
                  "fullTitle": "Purchase Service API Get Data Summary when user get data api get summary using invalid purchase id, then user got response error",
                  "timedOut": false,
                  "duration": 673,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getSummary.getSummary(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "689b0105-3db2-43f5-b1d7-9bbcaac59789",
                  "parentUUID": "7fdfe477-6059-4891-b400-08f411df54f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "689b0105-3db2-43f5-b1d7-9bbcaac59789"
              ],
              "failures": [
                "209cfe3f-7549-4bef-b541-8c739f21f69a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1329,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "0484dac6-9f30-41fb-849f-3e69b0ee6376",
          "title": "API Calculation Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite5_calculation.js",
          "file": "/test/suite5_calculation.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f4880f11-cab4-4e8d-aab0-e06f44add5ad",
              "title": "Get Calculate Payment",
              "fullFile": "/home/runner/work/flash/flash/test/suite5_calculation.js",
              "file": "/test/suite5_calculation.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: calucated in \"Get Calculate Payment\"",
                  "fullTitle": "API Calculation Service Get Calculate Payment \"before all\" hook: calucated in \"Get Calculate Payment\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "persenfee = datas.paymentOption.persenfee / 100\nfixfee = datas.paymentOption.fixfee\ntotalFeepersen = datas.calcu.contributeFee  * persenfee\ntotalFeefixfee = fixfee\ntotalpayment = datas.calcu.contributeFee + totalFeepersen\ntotalpayment1 = datas.calcu.contributeFee + totalFeefixfee",
                  "err": {},
                  "uuid": "749233eb-78de-4437-9344-02a73ac98517",
                  "parentUUID": "f4880f11-cab4-4e8d-aab0-e06f44add5ad",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "fullTitle": "API Calculation Service Get Calculate Payment when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 655,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await calcu.calcu(global.access_Tokens1, datas.calcu.contributeFee, global.ppoid)\nif(res.status !== 200) {\n    console.log(\"failed  : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(totalFeefixfee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(totalpayment1)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.calcu.contributeFee)\n//console.log(res.text);",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite5_calculation.js:24:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "73bd2801-efc5-4a68-b502-648f476964a1",
                  "parentUUID": "f4880f11-cab4-4e8d-aab0-e06f44add5ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "fullTitle": "API Calculation Service Get Calculate Payment when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 730,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await calcu.calcu(global.access_Tokens1, datas.calcu.contributeFee, datas.calcu.ppoidpersen)\nif(res.status !== 200) {\n    console.log(\"failed  : \"+res.text);\n}\n//console.log(res.text);\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(totalFeepersen)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(totalpayment)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.calcu.contributeFee)",
                  "err": {},
                  "uuid": "c199659b-97e9-4a52-91d2-545f0480e070",
                  "parentUUID": "f4880f11-cab4-4e8d-aab0-e06f44add5ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c199659b-97e9-4a52-91d2-545f0480e070"
              ],
              "failures": [
                "73bd2801-efc5-4a68-b502-648f476964a1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1385,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "0c8677bc-b9d0-4648-a8c1-e950c0f3be0a",
          "title": "API Checkout Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite6_checkout.js",
          "file": "/test/suite6_checkout.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4fccb81c-7ff0-40fd-9822-2da0da9cea16",
              "title": "Checkout/Capture Purchase",
              "fullFile": "/home/runner/work/flash/flash/test/suite6_checkout.js",
              "file": "/test/suite6_checkout.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: calucated in \"Checkout/Capture Purchase\"",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase \"before all\" hook: calucated in \"Checkout/Capture Purchase\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "ujrah = datas.service_Group.ujrah / 100\nujrah1 = datas.service_Group.ujrah1 / 100\npersenfee = datas.paymentOption.persenfee / 100\npersen_total_fee = datas.contribution.contriFee * persenfee\nfixfee_total_fee = datas.paymentOption.fixfee\ntotal_ujrah = ujrah * datas.contribution.contriFee\ntotal_ujrah1 = ujrah1 * datas.contribution.contriFee\ntotal_tabaru = datas.contribution.contriFee - total_ujrah\ntotal_tabaru1 = datas.contribution.contriFee - total_ujrah1\nP_total_payment = datas.contribution.contriFee + persen_total_fee\nF_total_payment = datas.contribution.contriFee + fixfee_total_fee",
                  "err": {},
                  "uuid": "464acd7b-cd05-4f36-910c-79e3febde2af",
                  "parentUUID": "4fccb81c-7ff0-40fd-9822-2da0da9cea16",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 662,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi, global.idpaoption, global.idpoc, global.idpurcahse, global.serviceids)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nglobal.ppids = res.body.data[0].id\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(datas.paymentOption.fixfee)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(fixfee_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(F_total_payment)\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"paid_at\")\nassert(res.body.data[0].actions[0]).to.have.property(\"name\").exist\nassert(res.body.data[0].actions[0]).to.have.property(\"method\").exist\nassert(res.body.data[0].actions[0]).to.have.property(\"url\").exist\nassert(res.body.data[0]).to.have.property(\"va_numbers\")\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite6_checkout.js:33:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "d3b95624-7542-42c3-af15-c99a212396d8",
                  "parentUUID": "4fccb81c-7ff0-40fd-9822-2da0da9cea16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "after(async function checkouts() {\n    this.timeout(5000); \n    const res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi1, global.idpaoption1, global.idpoc1, global.idpurcahse1, global.serviceids1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi1)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids1)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption1)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse1)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc1)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(datas.paymentOption.persenfee)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru1)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah1)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(persen_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(P_total_payment)\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"paid_at\")\nassert(res.body.data[0]).to.have.property(\"actions\")\nassert(res.body.data[0].va_numbers[0]).to.have.property(\"bank\").to.equal(\"permata\")\nassert(res.body.data[0].va_numbers[0]).to.have.property(\"va_number\").exist\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist\n\n\n\n\n});",
                  "err": {},
                  "uuid": "f2f24e03-8e89-44ab-aebd-77a9ef8f6783",
                  "parentUUID": "4fccb81c-7ff0-40fd-9822-2da0da9cea16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2f24e03-8e89-44ab-aebd-77a9ef8f6783"
              ],
              "failures": [
                "d3b95624-7542-42c3-af15-c99a212396d8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 663,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "dedcc9af-1787-406f-8694-91886dfce155",
          "title": "API Product Payment",
          "fullFile": "/home/runner/work/flash/flash/test/suite7_PayementCancel.js",
          "file": "/test/suite7_PayementCancel.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "044c4a9d-24c2-411e-b7c8-afae090672b9",
              "title": "Payment Cancel",
              "fullFile": "/home/runner/work/flash/flash/test/suite7_PayementCancel.js",
              "file": "/test/suite7_PayementCancel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api payment cancel, then status on table product payment will be cancel.",
                  "fullTitle": "API Product Payment Payment Cancel when user hit api payment cancel, then status on table product payment will be cancel.",
                  "timedOut": false,
                  "duration": 697,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cancel.canceled(global.access_Tokens1, global.ppids)\nassert(res.status).to.equal(200)\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(datas.paymentOption.fixfee)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(fixfee_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(F_total_payment)",
                  "err": {
                    "message": "AssertionError: expected 400 to equal 200",
                    "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (test/suite7_PayementCancel.js:10:35)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "dda7ab5c-5cd5-4f54-af79-129990620cac",
                  "parentUUID": "044c4a9d-24c2-411e-b7c8-afae090672b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api payment cancel using status expired, then got response error",
                  "fullTitle": "API Product Payment Payment Cancel when user hit api payment cancel using status expired, then got response error",
                  "timedOut": false,
                  "duration": 1853,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cancel.canceled(global.access_Tokens1, datas.status.ppid_expired)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "4e77029c-0a16-44dd-a985-83dd13bda043",
                  "parentUUID": "044c4a9d-24c2-411e-b7c8-afae090672b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api payment cancel using status paid, then got response error",
                  "fullTitle": "API Product Payment Payment Cancel when user hit api payment cancel using status paid, then got response error",
                  "timedOut": false,
                  "duration": 1318,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cancel.canceled(global.access_Tokens1, datas.status.ppid_paid)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "64156a37-fcd3-497d-8e7f-54b65eb19ab6",
                  "parentUUID": "044c4a9d-24c2-411e-b7c8-afae090672b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e77029c-0a16-44dd-a985-83dd13bda043",
                "64156a37-fcd3-497d-8e7f-54b65eb19ab6"
              ],
              "failures": [
                "dda7ab5c-5cd5-4f54-af79-129990620cac"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3868,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "19258e1b-7e31-44c1-b8cf-98d2843ba04d",
              "title": "Payment Status",
              "fullFile": "/home/runner/work/flash/flash/test/suite7_PayementCancel.js",
              "file": "/test/suite7_PayementCancel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api payment status, then user will be see sumarry payment",
                  "fullTitle": "API Product Payment Payment Status when user hit api payment status, then user will be see sumarry payment",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "after(async function statuspayment()  {\n    const res = await status.statuss(global.access_Tokens1, global.ppids)\n    assert(res.status).to.equal(200)\n    //console.log(res.text);\n    assert(res.body.data[0]).to.have.property(\"id\").exist\n    assert(res.body.data[0]).to.have.property(\"display_name\").exist\n    assert(res.body.data[0]).to.have.property(\"total_fee\").exist\n    assert(res.body.data[0]).to.have.property(\"total_payment\").exist\n    assert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\n    assert(res.body.data[0]).to.have.property(\"status\").exist\n    assert(res.body.data[0]).to.have.property(\"image_url\").exist\n    assert(res.body.data[0]).to.have.property(\"expired_at\").exist\n});",
                  "err": {},
                  "uuid": "7a38702a-50a0-4d5e-9c8e-149fa254e84e",
                  "parentUUID": "19258e1b-7e31-44c1-b8cf-98d2843ba04d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a38702a-50a0-4d5e-9c8e-149fa254e84e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-07-14-2022",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "test-07-14-2022"
      },
      "version": "6.2.0"
    }
  }
}