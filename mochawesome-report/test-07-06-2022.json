{
  "stats": {
    "suites": 59,
    "tests": 137,
    "passes": 2,
    "pending": 21,
    "failures": 114,
    "start": "2022-07-06T00:25:00.137Z",
    "end": "2022-07-06T00:56:28.357Z",
    "duration": 1888220,
    "testsRegistered": 137,
    "passPercent": 1.7241379310344827,
    "pendingPercent": 15.328467153284672,
    "other": 1,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0b68cf3c-0560-48d1-b2db-d3f3dfcd2ce3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after all\" hook: checkouts in \"{root}\"",
          "fullTitle": "\"after all\" hook: checkouts in \"{root}\"",
          "timedOut": false,
          "duration": 5006,
          "state": "failed",
          "speed": null,
          "pass": false,
          "fail": true,
          "pending": false,
          "context": null,
          "code": "this.timeout(5000); \nconst res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi1, global.idpaoption1, global.idpoc1, global.idpurcahse1, global.serviceids1)\n            if(res.status !== 200){\nconsole.log(\"failed : \"+res.text);\n            }\n            assert(res.status).to.equal(200)\n            //console.log(res.text);\n            assert(res.body.data[0]).to.have.property(\"id\").exist\n            assert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi1)\n            assert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids1)\n            assert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption1)\n            assert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse1)\n            assert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc1)\n            assert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(datas.paymentOption.persenfee)\n            assert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(0)\n            assert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\n            assert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru1)\n            assert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah1)\n            assert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(persen_total_fee)\n            assert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(P_total_payment)\n            assert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\n            assert(res.body.data[0]).to.have.property(\"status\").exist\n            assert(res.body.data[0]).to.have.property(\"paid_at\")\n            assert(res.body.data[0]).to.have.property(\"actions\")\n            assert(res.body.data[0].va_numbers[0]).to.have.property(\"bank\").to.equal(\"permata\")\n            assert(res.body.data[0].va_numbers[0]).to.have.property(\"va_number\").exist\n            assert(res.body.data[0]).to.have.property(\"expired_at\").exist",
          "err": {
            "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
            "diff": null
          },
          "uuid": "c530a20f-8ce4-4927-8ce9-35186f9edf39",
          "parentUUID": "0b68cf3c-0560-48d1-b2db-d3f3dfcd2ce3",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook: statuspayment",
          "fullTitle": "\"after all\" hook: statuspayment",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const res = await status.statuss(global.access_Tokens1, global.ppids)\nassert(res.status).to.equal(200)\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").exist\nassert(res.body.data[0]).to.have.property(\"total_payment\").exist\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"image_url\").exist\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist",
          "err": {},
          "uuid": "3b6a348d-7ac3-4ff0-8ee8-473c12b81575",
          "parentUUID": "0b68cf3c-0560-48d1-b2db-d3f3dfcd2ce3",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "9a80adcd-2b47-493f-b590-bb3d80798cba",
          "title": "Exchange Token API",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: pre_request in \"Exchange Token API\"",
              "fullTitle": "Exchange Token API \"before all\" hook: pre_request in \"Exchange Token API\"",
              "timedOut": false,
              "duration": 2269,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "username = ['ario16@gmail.com', 'ario10@gmail.com']\ntoken1 = []\ntoken2 = []\nfor (const user in username) {\n    const rd = await wong.wongAccount(username[user])\n    console.log('Status Code wong :', rd.status);\n    if (username[user] == `ario16@gmail.com`) {\n        const res = rd.body.data[0].token\n        token1.push(res)\n        global.token1 = token1\n    } else {\n        const res1 = rd.body.data[0].token\n        token2.push(res1)\n        global.token2 = token2\n    }\n}",
              "err": {},
              "uuid": "ba5abd4b-2bde-4318-a7cf-7a53e8358b0f",
              "parentUUID": "9a80adcd-2b47-493f-b590-bb3d80798cba",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "when user input valid token then user got response 200",
              "fullTitle": "Exchange Token API when user input valid token then user got response 200",
              "timedOut": true,
              "duration": 20003,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "tokens = [global.token1, global.token2]\ntokens1 = []\ntokens2 = []\nfor (const x in tokens) {\n    res = await exchange_token.exchangeTokenAccount(tokens[x]);\n    if (tokens[x] == global.token1) {\n        const res1 = res.body.data[0].access_token\n        tokens1.push(res1)\n        global.access_Tokens1 = tokens1\n    } else {\n        const res2 = res.body.data[0].access_token\n        tokens2.push(res2)\n        global.access_Tokens2 = tokens2\n    }\n    assert(res.status).to.equal(200);\n    assert(res.body.data[0]).to.have.property('access_token')\n    assert(res.body.data[0]).to.have.property('refresh_token')\n    assert(res.body.data[0]).to.have.property('expires_in')\n    \n}\n//console.log(global.access_Tokens1);",
              "err": {
                "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite1_accountService.js)",
                "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite1_accountService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "0dd2e5d2-5fd0-4baa-8df2-7d0e1653be91",
              "parentUUID": "9a80adcd-2b47-493f-b590-bb3d80798cba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when user input wrong token, then user got response error",
              "fullTitle": "Exchange Token API when user input wrong token, then user got response error",
              "timedOut": true,
              "duration": 20015,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1bXhfUFZiQ3lTV2o5SG5MRHJ0bEJ3X1BLTnlFcVJtWTNpQ3BSMTBlMFpvIn0.eyJleHAiOjE2NTI4OTEwNTEsImlhdCI6MTY1Mjg1NTA1MSwianRpIjoiYmMwMzhiZWUtYzNhNi00YjYxLTlkZjMtYmQ3NjExZWQwMTI0IiwiaXNzIjoiaHR0cDovL2tleWNsb2FrLnN0Zy5rdC5qZy9hdXRoL3JlYWxtcy9raXRhamFnYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNTY5ZjM5NS1iZWUxLTQxMzItOWYzZS1lZDM3ODAyMzY2ODMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrb25nIiwic2Vzc2lvbl9zdGF0ZSI6ImYwZWU1YzI3LTliODYtNDg1Mi1iYmE2LTI1M2ZkN2RlZDFkMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1raXRhamFnYSIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiJmMGVlNWMyNy05Yjg2LTQ4NTItYmJhNi0yNTNmZDdkZWQxZDAiLCJraXRhYmlzYV91c2VyX2lkIjoiNSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiS2l0YWphZ2EgVGVzdCBBamEiLCJraXRhYmlzYV9zZWNvbmRhcnlfaWQiOiI1NDk0ZTg3ODQ2MTJjMWY1ZDNhODI4ZjAyYWNkNzRmNSIsInBob25lX251bWJlciI6IjYyODEyMzQ1Njc4OTAiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJraXRhamFnYS10ZXN0QGtpdGFqYWdhLmlkIiwiZ2l2ZW5fbmFtZSI6IktpdGFqYWdhIiwiZmFtaWx5X')\nassert(res.status).to.equal(502)",
              "err": {
                "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite1_accountService.js)",
                "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite1_accountService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "82c8610b-cd72-41d3-890c-2ecde1718eee",
              "parentUUID": "9a80adcd-2b47-493f-b590-bb3d80798cba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when user input empty token, then user got response error",
              "fullTitle": "Exchange Token API when user input empty token, then user got response error",
              "timedOut": true,
              "duration": 20021,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('')\nassert(res.status).to.equal(401)",
              "err": {
                "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite1_accountService.js)",
                "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite1_accountService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "da1aa56f-9c82-4d76-b7f0-3015baf557ab",
              "parentUUID": "9a80adcd-2b47-493f-b590-bb3d80798cba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0dd2e5d2-5fd0-4baa-8df2-7d0e1653be91",
            "82c8610b-cd72-41d3-890c-2ecde1718eee",
            "da1aa56f-9c82-4d76-b7f0-3015baf557ab"
          ],
          "pending": [],
          "skipped": [],
          "duration": 60039,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "3693f15d-be29-4c9e-bd01-046bd27c3579",
          "title": "Get user info",
          "fullFile": "/home/runner/work/flash/flash/test/suite1_accountService.js",
          "file": "/test/suite1_accountService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": true,
              "duration": 20018,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)",
              "err": {
                "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite1_accountService.js)",
                "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite1_accountService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "f996b94b-8fa8-4533-ac4c-0362bd9645d2",
              "parentUUID": "3693f15d-be29-4c9e-bd01-046bd27c3579",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Data User Info",
              "fullTitle": "Get user info Get Data User Info",
              "timedOut": true,
              "duration": 20021,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await user_Info.userInfo(global.access_Tokens2)\nassert(res.status).to.equal(404)",
              "err": {
                "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite1_accountService.js)",
                "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite1_accountService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                "diff": null
              },
              "uuid": "db09673b-bd8d-46d5-9e03-6984baa098ae",
              "parentUUID": "3693f15d-be29-4c9e-bd01-046bd27c3579",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f996b94b-8fa8-4533-ac4c-0362bd9645d2",
            "db09673b-bd8d-46d5-9e03-6984baa098ae"
          ],
          "pending": [],
          "skipped": [],
          "duration": 40039,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "d6f545ad-323a-4e14-b972-1b7b7f15a68e",
          "title": "API Service Group",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a661ca1a-7896-4fb1-a6e1-536b2cf83596",
              "title": "Create Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.serviceids = res.body.data[0].id\nglobal.names = res.body.data[0].name\nglobal.desc = res.body.data[0].description\nglobal.codes = res.body.data[0].code\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\n//console.log(\"ini id sg : \"+global.serviceids);",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "1f5bd37e-500d-45c5-b516-a47ed82b088f",
                  "parentUUID": "a661ca1a-7896-4fb1-a6e1-536b2cf83596",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, datas.service_Group.code1, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah1)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.serviceids1 = res.body.data[0].id\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\n//console.log(\"ini id sg : \"+global.serviceids1);",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "43f835a1-d05f-4e98-a2ae-1f02a60ea86c",
                  "parentUUID": "a661ca1a-7896-4fb1-a6e1-536b2cf83596",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input existing data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input existing data, then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', 'Alda', 'this is triger from automation tools', datas.service_Group.ujrah)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "e52ff1d7-5837-41c1-8fd5-131c2a6fe5eb",
                  "parentUUID": "a661ca1a-7896-4fb1-a6e1-536b2cf83596",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input data using existing code data, then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(global.access_Tokens1, 'TEST66', datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "4bb88b48-9906-4d20-8ad3-eed96e5a48bc",
                  "parentUUID": "a661ca1a-7896-4fb1-a6e1-536b2cf83596",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1f5bd37e-500d-45c5-b516-a47ed82b088f",
                "43f835a1-d05f-4e98-a2ae-1f02a60ea86c",
                "e52ff1d7-5837-41c1-8fd5-131c2a6fe5eb",
                "4bb88b48-9906-4d20-8ad3-eed96e5a48bc"
              ],
              "pending": [],
              "skipped": [],
              "duration": 80041,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0e08501b-5500-4639-a9b2-c771c88cd6b8",
              "title": "Get All Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Service Group when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll.getallServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ids1 = res.body.data[1].id\nids2 = res.body.data[2].id\nglobal.idsgforppo = res.body.data[3].id\nglobal.idsgpuchase = res.body.data[4].id\nglobal.names1 = res.body.data[1].name\nglobal.desc1 = res.body.data[1].description\nglobal.codes1 = res.body.data[1].code",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "ebde8535-1ddd-41bb-90b3-fd1143386693",
                  "parentUUID": "0e08501b-5500-4639-a9b2-c771c88cd6b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ebde8535-1ddd-41bb-90b3-fd1143386693"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20010,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "6c5edb20-ceb6-48a2-864e-d1a27001e7e3",
              "title": "Get All Public Service Group ",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Public Service Group  when user hit api get all public then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20004,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAllpublic.getallpublicServiceGroup(global.access_Tokens1)\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "5de279b3-a8ca-407f-8903-8b207c7078b3",
                  "parentUUID": "6c5edb20-ceb6-48a2-864e-d1a27001e7e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5de279b3-a8ca-407f-8903-8b207c7078b3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20004,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "98dfe2bb-6d98-4e63-b61d-7cdd6c1b06bd",
              "title": "Get Detail Public Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, global.serviceids)\nif(res.status !==200){\n    console.log(\"getdetailpublic data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "5b0c8e6f-9636-4882-8748-2a8b2e6c5110",
                  "parentUUID": "98dfe2bb-6d98-4e63-b61d-7cdd6c1b06bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail public with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public with wrong id then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "7475453a-e443-48dd-9488-7dfeda45d3bf",
                  "parentUUID": "98dfe2bb-6d98-4e63-b61d-7cdd6c1b06bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5b0c8e6f-9636-4882-8748-2a8b2e6c5110",
                "7475453a-e443-48dd-9488-7dfeda45d3bf"
              ],
              "pending": [],
              "skipped": [],
              "duration": 40021,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "098e24ff-5e38-490a-8d01-2cd02614a28c",
              "title": "Get Detail Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, global.serviceids)\nif(res.status !==200){\n    console.log(\"getdetail data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "11724c40-546d-4583-a3ec-25db4708c835",
                  "parentUUID": "098e24ff-5e38-490a-8d01-2cd02614a28c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail with wrong id then user got response error",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "c3598f96-2687-47f3-bfdd-d3a14b1a06ca",
                  "parentUUID": "098e24ff-5e38-490a-8d01-2cd02614a28c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "11724c40-546d-4583-a3ec-25db4708c835",
                "c3598f96-2687-47f3-bfdd-d3a14b1a06ca"
              ],
              "pending": [],
              "skipped": [],
              "duration": 40019,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "cc2c0abc-bbb6-49a3-87fd-f762849144e7",
              "title": "Update Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input corect data then user got response 200",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "fb4b6990-9019-4d56-93e1-cf64293c58b0",
                  "parentUUID": "cc2c0abc-bbb6-49a3-87fd-f762849144e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different code and same description and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different code and same description and same name then user got response 200",
                  "timedOut": true,
                  "duration": 20002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, datas.service_Group.code, global.names, global.desc, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "84583f9d-3b31-463a-a06d-4e356f590d75",
                  "parentUUID": "cc2c0abc-bbb6-49a3-87fd-f762849144e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different name and same code then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different name and same code then user got response 200",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes, datas.service_Group.name, global.desc, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "e5f2e77d-f9ee-4a4d-8c43-00d9776db2a8",
                  "parentUUID": "cc2c0abc-bbb6-49a3-87fd-f762849144e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different description and same code and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different description and same code and same name then user got response 200",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes, global.names, datas.service_Group.description, datas.service_Group.ujrah)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "318315fd-d907-4c38-af51-8f55f259eaf5",
                  "parentUUID": "cc2c0abc-bbb6-49a3-87fd-f762849144e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input same data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input same data, then user got response error",
                  "timedOut": true,
                  "duration": 20005,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.serviceids, global.codes1, global.names1, global.desc1, datas.service_Group.ujrah)   \nassert(res.status).to.equal(500)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "b912c1f5-3f92-4984-8c92-0be29988810e",
                  "parentUUID": "cc2c0abc-bbb6-49a3-87fd-f762849144e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input data using existing code data, then user got response error",
                  "timedOut": true,
                  "duration": 20000,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.access_Tokens1, global.ids1, global.codes, datas.service_Group.name, datas.service_Group.description, datas.service_Group.ujrah)   \nassert(res.status).to.equal(500)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "eb320bd1-b8e5-43b8-97eb-34c78011a197",
                  "parentUUID": "cc2c0abc-bbb6-49a3-87fd-f762849144e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "fb4b6990-9019-4d56-93e1-cf64293c58b0",
                "84583f9d-3b31-463a-a06d-4e356f590d75",
                "e5f2e77d-f9ee-4a4d-8c43-00d9776db2a8",
                "318315fd-d907-4c38-af51-8f55f259eaf5",
                "b912c1f5-3f92-4984-8c92-0be29988810e",
                "eb320bd1-b8e5-43b8-97eb-34c78011a197"
              ],
              "pending": [],
              "skipped": [],
              "duration": 120037,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d187043d-28aa-4dc1-ab94-a347eb6245dc",
              "title": "Delete data Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "90f9b407-b90f-405b-9b85-7d2d4f55bf0c",
                  "parentUUID": "d187043d-28aa-4dc1-ab94-a347eb6245dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5ecbbd47-3b46-4f68-9670-4c850fb8197c",
                  "parentUUID": "d187043d-28aa-4dc1-ab94-a347eb6245dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "90f9b407-b90f-405b-9b85-7d2d4f55bf0c",
                "5ecbbd47-3b46-4f68-9670-4c850fb8197c"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "f8a4a91b-d470-49e6-95f8-a3ab0d6dbf20",
          "title": "API Extension Clause",
          "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
          "file": "/test/suite2_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a08b8b96-4255-4c78-a75f-2733f076987f",
              "title": "Create ExtensionClause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Create ExtensionClause when user input corect data then user got response 200",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_create.createExtensionClause(global.access_Tokens1, datas.Extension_clause.code, datas.service_Group.name, datas.service_Group.description, global.codes)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(true)\nglobal.ECids = res.body.data[0].id",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "a7331427-a028-4f77-9767-3a164caf0f9d",
                  "parentUUID": "a08b8b96-4255-4c78-a75f-2733f076987f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a7331427-a028-4f77-9767-3a164caf0f9d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20009,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "54d946a4-1278-48e8-8c67-8b7b89b81100",
              "title": "Get all data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Extension Clause when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20004,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getall.getallExtensionClause(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ECids1 = res.body.data[1].id\nglobal.ECserviceCode1 = res.body.data[1].service_group_code\nglobal.code1 = res.body.data[1].code\nglobal.name1 = res.body.data[1].name\nglobal.code2 = res.body.data[0].code\nglobal.name2 = res.body.data[0].name\nglobal.ECserviceCode2 = res.body.data[0].service_group_code\nglobal.desc2 = res.body.data[0].description",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "23d28c95-c632-43d2-a650-50bb1a5cc58d",
                  "parentUUID": "54d946a4-1278-48e8-8c67-8b7b89b81100",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "23d28c95-c632-43d2-a650-50bb1a5cc58d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20004,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7dfe1255-ceb7-4bdc-bf97-20f62eb68879",
              "title": "Delete data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "6f25f8e4-bf96-4211-9c51-13e60101c855",
                  "parentUUID": "7dfe1255-ceb7-4bdc-bf97-20f62eb68879",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "32c1f653-a54a-4b45-a825-aa28e3550c1b",
                  "parentUUID": "7dfe1255-ceb7-4bdc-bf97-20f62eb68879",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "6f25f8e4-bf96-4211-9c51-13e60101c855",
                "32c1f653-a54a-4b45-a825-aa28e3550c1b"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ec937902-5a43-4bd6-9ba6-cec09228eb3d",
              "title": "Get Detail Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, global.ECids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").to.equal(global.ECids)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(true)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "049504e7-aa10-43a2-a03e-d10fc6b3e620",
                  "parentUUID": "ec937902-5a43-4bd6-9ba6-cec09228eb3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail with wrong id then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.access_Tokens1, datas.Extension_clause.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc.id).to.equal('error data tidak ditemukan')",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "68b0ff04-eace-4118-af50-fc11488bb9e6",
                  "parentUUID": "ec937902-5a43-4bd6-9ba6-cec09228eb3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "049504e7-aa10-43a2-a03e-d10fc6b3e620",
                "68b0ff04-eace-4118-af50-fc11488bb9e6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 40019,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "34395f17-a5d6-4fec-be76-860f2fb25bc7",
              "title": "update data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause update data Extension Clause when user input corect data then user got response 200",
                  "timedOut": true,
                  "duration": 20007,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Update.updateExtensionClause(global.access_Tokens1, global.ECids, global.code1, global.name1, datas.Extension_clause.description, global.ECserviceCode1)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "f17c33d0-af06-45ab-a644-9e57149566bf",
                  "parentUUID": "34395f17-a5d6-4fec-be76-860f2fb25bc7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f17c33d0-af06-45ab-a644-9e57149566bf"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20007,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "fb1f0b75-2423-4595-94c2-c2739f02bbd5",
              "title": "Search data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input corect data then user got response 200",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name1)\nif(res.status !== 200){\n    console.log(\"error search EC\" +res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "05c649ae-12b7-4737-94f4-c92c26752928",
                  "parentUUID": "fb1f0b75-2423-4595-94c2-c2739f02bbd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid service group, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using invalid service group, then user got response error",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, datas.Extension_clause.invalid_service_group_code, global.code1, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Search Extension Clause Data Tidak Ditemukan')",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "2ed7f9b3-7b73-46e3-9a25-d40b043b97d4",
                  "parentUUID": "fb1f0b75-2423-4595-94c2-c2739f02bbd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_code and with same service group and same name, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_code and with same service group and same name, then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code2, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Search Extension Clause Data Tidak Ditemukan')",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "1c2c73c3-40e9-421b-9851-920cccca9a6b",
                  "parentUUID": "fb1f0b75-2423-4595-94c2-c2739f02bbd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_name and with same service group and same code, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_name and with same service group and same code, then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.access_Tokens1, global.ECserviceCode1, global.code1, global.name2)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Search Extension Clause Data Tidak Ditemukan')",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "cf1a20dd-3b2c-409d-a25d-aca4e06fdd2f",
                  "parentUUID": "fb1f0b75-2423-4595-94c2-c2739f02bbd5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "05c649ae-12b7-4737-94f4-c92c26752928",
                "2ed7f9b3-7b73-46e3-9a25-d40b043b97d4",
                "1c2c73c3-40e9-421b-9851-920cccca9a6b",
                "cf1a20dd-3b2c-409d-a25d-aca4e06fdd2f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 80038,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "2affdca9-609a-4506-8c5f-dea8e7c3bde6",
              "title": "Create Deductible API",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Deductible API when user input correct data then user got response 200",
                  "timedOut": true,
                  "duration": 20008,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.deducids = res.body.data[0].id",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "c47fdf58-9c0e-4f1d-ba34-3ed1582910c8",
                  "parentUUID": "2affdca9-609a-4506-8c5f-dea8e7c3bde6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong service group, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong service group, then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, datas.Deductible.service_code, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Service Group Code Tidak Ditemukan\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "b00e67be-9eb4-4803-9a22-fcf0444df050",
                  "parentUUID": "2affdca9-609a-4506-8c5f-dea8e7c3bde6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong calculate method, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong calculate method, then user got response error",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "3962f5f8-5939-415b-a903-ad108f9bf0d4",
                  "parentUUID": "2affdca9-609a-4506-8c5f-dea8e7c3bde6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input deduction value with string, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input deduction value with string, then user got response error",
                  "timedOut": true,
                  "duration": 20006,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "57270b5b-f45b-443b-b3ae-735c0675772f",
                  "parentUUID": "2affdca9-609a-4506-8c5f-dea8e7c3bde6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c47fdf58-9c0e-4f1d-ba34-3ed1582910c8",
                "b00e67be-9eb4-4803-9a22-fcf0444df050",
                "3962f5f8-5939-415b-a903-ad108f9bf0d4",
                "57270b5b-f45b-443b-b3ae-735c0675772f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 80035,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "fd28b0f3-72de-430b-8921-568c0745a506",
              "title": "Get all Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all Deduction when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getall.getDeductible(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "40de0fc9-806a-40b1-9e62-01fa6eb4ebd5",
                  "parentUUID": "fd28b0f3-72de-430b-8921-568c0745a506",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "40de0fc9-806a-40b1-9e62-01fa6eb4ebd5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20009,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "930415ba-9406-48a9-9d08-0eb1b3f9ed4d",
              "title": "Get Detail Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(global.deducids, global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "228bf1b5-b792-4550-af1b-0ce122190b41",
                  "parentUUID": "930415ba-9406-48a9-9d08-0eb1b3f9ed4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail with wrong id then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(datas.Deductible.wrong_idDeduc, global.access_Tokens1)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "838ee2be-d4d5-4a52-999a-6f7dddc83176",
                  "parentUUID": "930415ba-9406-48a9-9d08-0eb1b3f9ed4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "228bf1b5-b792-4550-af1b-0ce122190b41",
                "838ee2be-d4d5-4a52-999a-6f7dddc83176"
              ],
              "pending": [],
              "skipped": [],
              "duration": 40021,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "792e96a9-c47d-426f-9e76-57128fa0d189",
              "title": "Update Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input corect data then user got response 200",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method1, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "52323a65-231e-46d7-9483-d52fc69959b5",
                  "parentUUID": "792e96a9-c47d-426f-9e76-57128fa0d189",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid Deduction id, then user got response error",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input data using invalid Deduction id, then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, datas.Deductible.wrong_idDeduc, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Deductible ID Tidak Ditemukan\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "bbf84a32-1da0-48ee-89ec-d7ba7b20a556",
                  "parentUUID": "792e96a9-c47d-426f-9e76-57128fa0d189",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu Method then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu Method then user got response 200",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "3ca9903b-df79-4294-8565-c42513bdce6f",
                  "parentUUID": "792e96a9-c47d-426f-9e76-57128fa0d189",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu value with string, then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu value with string, then user got response 200",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.access_Tokens1, global.deducids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "4f393149-01c1-41e6-ad3f-5b441caf6e7f",
                  "parentUUID": "792e96a9-c47d-426f-9e76-57128fa0d189",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "52323a65-231e-46d7-9483-d52fc69959b5",
                "bbf84a32-1da0-48ee-89ec-d7ba7b20a556",
                "3ca9903b-df79-4294-8565-c42513bdce6f",
                "4f393149-01c1-41e6-ad3f-5b441caf6e7f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 80039,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "de4363e7-84cd-48ed-8436-ef62a1150e54",
              "title": "Search Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search Deduction Api when user input corect data then user got response 200",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Search.searchDeductible(global.access_Tokens1, global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "3c354a77-ab1f-456e-b24e-7de160ea8819",
                  "parentUUID": "de4363e7-84cd-48ed-8436-ef62a1150e54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3c354a77-ab1f-456e-b24e-7de160ea8819"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20011,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "353743d6-ad8f-4a84-9d09-bf1411a2091a",
              "title": "Deleted Deduction APi",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "048124e9-3739-4b9a-bf1c-f7c5ced2ee5d",
                  "parentUUID": "353743d6-ad8f-4a84-9d09-bf1411a2091a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "8e505ade-e369-46ce-9f03-eeaaf424f21d",
                  "parentUUID": "353743d6-ad8f-4a84-9d09-bf1411a2091a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "048124e9-3739-4b9a-bf1c-f7c5ced2ee5d",
                "8e505ade-e369-46ce-9f03-eeaaf424f21d"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7e26307b-a69c-44a7-8c30-0a798c6eb7fa",
              "title": "Create Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\nglobal.idpoc = res.body.data[0].id\n//console.log(\"ini poc : \"+global.idpoc);",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "20173db8-ce50-4fb1-ae8b-367763a53ee7",
                  "parentUUID": "7e26307b-a69c-44a7-8c30-0a798c6eb7fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input correct data then user got response 200",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids1, datas.contribution.strikeFee)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\nglobal.idpoc1 = res.body.data[0].id\n//console.log(\"ini poc : \"+global.idpoc);",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "95eb992c-5461-4bfd-9729-c1d86beb3fd4",
                  "parentUUID": "7e26307b-a69c-44a7-8c30-0a798c6eb7fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": true,
                  "duration": 20007,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "615bd360-cb98-4470-adea-f79cc54da7cc",
                  "parentUUID": "7e26307b-a69c-44a7-8c30-0a798c6eb7fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "4a46e8b9-d92c-4619-b706-62fa1ae32ed5",
                  "parentUUID": "7e26307b-a69c-44a7-8c30-0a798c6eb7fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Create Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "fc068bc9-b673-4d52-bf1d-9225b4950789",
                  "parentUUID": "7e26307b-a69c-44a7-8c30-0a798c6eb7fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "20173db8-ce50-4fb1-ae8b-367763a53ee7",
                "95eb992c-5461-4bfd-9729-c1d86beb3fd4",
                "615bd360-cb98-4470-adea-f79cc54da7cc",
                "4a46e8b9-d92c-4619-b706-62fa1ae32ed5",
                "fc068bc9-b673-4d52-bf1d-9225b4950789"
              ],
              "pending": [],
              "skipped": [],
              "duration": 100049,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e6a1d92f-427e-4d5a-bec3-81e4ece902f9",
              "title": "Get all data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Product Contribution when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getall.getContribution(global.access_Tokens1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")\ncontriId = res.body.data[0].id\nglobal.contripurchase = res.body.data[1].id",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "17be1d59-3757-402d-8f51-8d9a64409466",
                  "parentUUID": "e6a1d92f-427e-4d5a-bec3-81e4ece902f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "17be1d59-3757-402d-8f51-8d9a64409466"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20010,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e1d5f3f6-9885-41af-8ae0-58d8efd78773",
              "title": "Get detail Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20006,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, global.serviceids)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "92f42761-d622-4eca-a9f6-0cf12f92bf64",
                  "parentUUID": "e1d5f3f6-9885-41af-8ae0-58d8efd78773",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get detail Product Contribution when user hit api get detail with wrong id then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Getdetail.getdetailContribution(global.access_Tokens1, datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "ebdb1b73-dc14-4067-b980-77d601196bc9",
                  "parentUUID": "e1d5f3f6-9885-41af-8ae0-58d8efd78773",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "92f42761-d622-4eca-a9f6-0cf12f92bf64",
                "ebdb1b73-dc14-4067-b980-77d601196bc9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 40016,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c92fe9a4-ecb6-486c-b3a1-acd3bc338010",
              "title": "Update data Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_Update.updateContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.contribution.isPopular.false, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee, contriId)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"contribution_fee\")\nassert(res.body.data[0]).to.have.property(\"contribution_month\")\nassert(res.body.data[0]).to.have.property(\"display_name\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nassert(res.body.data[0]).to.have.property(\"is_popular\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"ord_position\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"strikethrough_contribution_fee\")",
                  "err": {
                    "message": "ReferenceError: contriId is not defined",
                    "estack": "ReferenceError: contriId is not defined\n    at Context.<anonymous> (test/suite2_productService.js:589:379)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "a81c15aa-88e5-44d1-9d62-4ee9c4eb6ef5",
                  "parentUUID": "c92fe9a4-ecb6-486c-b3a1-acd3bc338010",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri fee with string, then user got response error}",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, 'seratus', datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "10a95909-8297-4497-98bb-b52054cb220d",
                  "parentUUID": "c92fe9a4-ecb6-486c-b3a1-acd3bc338010",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input contri month with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input contri month with string, then user got response error}",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, 'datas.contribution.contriMonth', datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, datas.contribution.strikeFee)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "9cf15c76-16ee-4828-9eae-ddb534938b7f",
                  "parentUUID": "c92fe9a4-ecb6-486c-b3a1-acd3bc338010",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input strike fee with string, then user got response error}",
                  "fullTitle": "API Extension Clause Update data Product Contribution when user input strike fee with string, then user got response error}",
                  "timedOut": true,
                  "duration": 20004,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await contri_create.createContribution(global.access_Tokens1, datas.contribution.contriFee, datas.contribution.contriMonth, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.contribution.isPopular.true, datas.paymentOption.name, datas.productpaymentOption.oder_opt, global.serviceids, 'datas.contribution.strikeFee')\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite2_productService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "6b00fc51-c9e5-43fa-a2db-ab1f7469ceec",
                  "parentUUID": "c92fe9a4-ecb6-486c-b3a1-acd3bc338010",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a81c15aa-88e5-44d1-9d62-4ee9c4eb6ef5",
                "10a95909-8297-4497-98bb-b52054cb220d",
                "9cf15c76-16ee-4828-9eae-ddb534938b7f",
                "6b00fc51-c9e5-43fa-a2db-ab1f7469ceec"
              ],
              "pending": [],
              "skipped": [],
              "duration": 60025,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5303b9f4-df19-4706-baf4-1d3d1978b030",
              "title": "Delete Product Contribution",
              "fullFile": "/home/runner/work/flash/flash/test/suite2_productService.js",
              "file": "/test/suite2_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "0d7ce512-33ed-48de-b99b-e806cddecb73",
                  "parentUUID": "5303b9f4-df19-4706-baf4-1d3d1978b030",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete Product Contribution when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5ce7f47f-c0f3-447c-b5a2-c8c2030fdbc6",
                  "parentUUID": "5303b9f4-df19-4706-baf4-1d3d1978b030",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "0d7ce512-33ed-48de-b99b-e806cddecb73",
                "5ce7f47f-c0f3-447c-b5a2-c8c2030fdbc6"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "bbc3445f-7c98-4457-8b56-618475436611",
          "title": "Payment Api Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
          "file": "/test/suite3_paymentService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cd94b759-9e14-4939-a566-ba2b79a5a2ff",
              "title": "Create Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Provider when user input correct data then user got response 200",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Provider.createPaymentProvider(global.access_Tokens1, datas.paymentProvider.callback_url, datas.paymentProvider.code, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"code\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"callback_url\").to.equal(datas.paymentProvider.callback_url)\nproviderids = res.body.data[0].id",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "9d224bd7-cf28-4fc5-8c96-3c6346d68b5e",
                  "parentUUID": "cd94b759-9e14-4939-a566-ba2b79a5a2ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9d224bd7-cf28-4fc5-8c96-3c6346d68b5e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20010,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "827a98f3-7123-4a5f-beac-a78ff882c929",
              "title": "Get all Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Payment Provider when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20006,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Provider.getPaymentProvider(global.access_Tokens1)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"code\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"callback_url\").exist\nid1 = res.body.data[1].id",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "ca253f09-2907-4a77-8d61-d29dec454309",
                  "parentUUID": "827a98f3-7123-4a5f-beac-a78ff882c929",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ca253f09-2907-4a77-8d61-d29dec454309"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20006,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "de391c45-e816-49f7-8ff8-0b62e8b0281d",
              "title": "Get detail payment provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, providerids)\nif(res.status !==200){\nconsole.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "ReferenceError: providerids is not defined",
                    "estack": "ReferenceError: providerids is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:71:98)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "784d5024-1ba1-4bde-a5c2-4e315c287c78",
                  "parentUUID": "de391c45-e816-49f7-8ff8-0b62e8b0281d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail payment provider when user hit api get detail with wrong id then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Provider.getdetailPaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID)\nassert(res.status).to.equal(500)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "40e50c88-b26b-492f-9b33-f54ce8fa2342",
                  "parentUUID": "de391c45-e816-49f7-8ff8-0b62e8b0281d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "784d5024-1ba1-4bde-a5c2-4e315c287c78",
                "40e50c88-b26b-492f-9b33-f54ce8fa2342"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20011,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ebd0b786-2880-4993-a1c0-4ee73bc4ded0",
              "title": "Update Payment Provider",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, providerids, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nif(res.status !==200){\nconsole.log(\"Failed :\"+res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "ReferenceError: providerids is not defined",
                    "estack": "ReferenceError: providerids is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:84:92)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "d6048bd0-6a99-49fe-a1f6-7badcdf1dd3d",
                  "parentUUID": "ebd0b786-2880-4993-a1c0-4ee73bc4ded0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid payment provider id, then user got response error",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, datas.paymentProvider.wrongID, datas.paymentProvider.callback_url, datas.paymentProvider.wrongCode, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "2d4f3ba2-97da-41a2-8fb8-9166cd6382a7",
                  "parentUUID": "ebd0b786-2880-4993-a1c0-4ee73bc4ded0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using existing code, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(global.access_Tokens1, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:95:92)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "78071ee5-ebda-4d91-bee5-138e16f01ab6",
                  "parentUUID": "ebd0b786-2880-4993-a1c0-4ee73bc4ded0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid authorization, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Provider when user input data using invalid authorization, then user got response error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Provider.updatePaymentProvider(datas.paymentProvider.invalid_auth, id1, datas.paymentProvider.callback_url, datas.paymentProvider.code1, datas.service_Group.description, datas.paymentProvider.name)\nassert(res.status).to.equal(401)",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:99:105)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "cbfa536f-757b-4b57-8e13-39e0d9d8db9f",
                  "parentUUID": "ebd0b786-2880-4993-a1c0-4ee73bc4ded0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d6048bd0-6a99-49fe-a1f6-7badcdf1dd3d",
                "2d4f3ba2-97da-41a2-8fb8-9166cd6382a7",
                "78071ee5-ebda-4d91-bee5-138e16f01ab6",
                "cbfa536f-757b-4b57-8e13-39e0d9d8db9f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20011,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "8433e3cd-bf53-4415-9889-322bb2f6c25f",
              "title": "Delete payment Provider API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4b5741bf-4ba9-4f5a-a048-3f17326635c9",
                  "parentUUID": "8433e3cd-bf53-4415-9889-322bb2f6c25f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4084f971-18a1-4cb3-bddd-ca15afa072a9",
                  "parentUUID": "8433e3cd-bf53-4415-9889-322bb2f6c25f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete payment Provider API when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c5b51f47-b234-4127-9b79-846dcc0a07d2",
                  "parentUUID": "8433e3cd-bf53-4415-9889-322bb2f6c25f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "4b5741bf-4ba9-4f5a-a048-3f17326635c9",
                "4084f971-18a1-4cb3-bddd-ca15afa072a9",
                "c5b51f47-b234-4127-9b79-846dcc0a07d2"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "336b3b92-8272-40c0-abb0-6e79718af76b",
              "title": "Create Payment Option API",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const bankName =  [\"shopeepay\", \"qris\", \"gopay\"]\nfor (let x in bankName) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, 'EWALLET', datas.Deductible.description, datas.paymentOption.fixfee, bankName[x], 0, providerids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(bankName[x])\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nglobal.idpaoption = res.body.data[0].id\nidpaoption3 = res.body.data[0].name\n\n}",
                  "err": {
                    "message": "ReferenceError: providerids is not defined",
                    "estack": "ReferenceError: providerids is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:127:173)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "1256df8c-7e65-4e3f-9689-e0956b228409",
                  "parentUUID": "336b3b92-8272-40c0-abb0-6e79718af76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const bankName =  [\"mandiri\", \"cimb\", \"mega\", \"bni\", \"bca\", \"permata\", \"bri\", \"maybank\"]\nfor (let x in bankName) {\nconst res = await create_Option.createPaymentOption(global.access_Tokens1, \"BANK_TRANSFER\", datas.Deductible.description, 0 , bankName[x] , datas.paymentOption.persenfee , id1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(bankName[x])\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nglobal.idpaoption1 = res.body.data[0].id\nglobal.bankname = res.body.data[0].name\n}",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:146:185)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "765564e1-010e-458b-a04e-54f59c03741d",
                  "parentUUID": "336b3b92-8272-40c0-abb0-6e79718af76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong category, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input wrong category, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, datas.paymentOption.wrong_category, datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,0 , id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"kategori tidak valid\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:160:212)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "45907ed8-dc52-49d0-99b4-c3d6575fc380",
                  "parentUUID": "336b3b92-8272-40c0-abb0-6e79718af76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input provider id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input provider id with invalid id, then user got response error",
                  "timedOut": true,
                  "duration": 20006,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "9a055016-6532-43d4-acef-096f25074157",
                  "parentUUID": "336b3b92-8272-40c0-abb0-6e79718af76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input persen fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:170:214)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "466e8f64-07a4-4ac6-b41d-9854d753f814",
                  "parentUUID": "336b3b92-8272-40c0-abb0-6e79718af76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee with string, then user got response error",
                  "fullTitle": "Payment Api Service Create Payment Option API when user input fix fee with string, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_Option.createPaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:175:214)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "0797dc13-dbd9-4ce9-98df-142be0b46b7f",
                  "parentUUID": "336b3b92-8272-40c0-abb0-6e79718af76b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1256df8c-7e65-4e3f-9689-e0956b228409",
                "765564e1-010e-458b-a04e-54f59c03741d",
                "45907ed8-dc52-49d0-99b4-c3d6575fc380",
                "9a055016-6532-43d4-acef-096f25074157",
                "466e8f64-07a4-4ac6-b41d-9854d753f814",
                "0797dc13-dbd9-4ce9-98df-142be0b46b7f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20007,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "6b4b42a1-c3c0-4369-968e-50915ac83f16",
              "title": "Get all payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all payment option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_Option.getPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist\nidpo = res.body.data[0].id\nidpo1 = res.body.data[1].id\nidpo2 = res.body.data[2].id\nidpo3 = res.body.data[3].id\n//console.log(idpo);\n//console.log(idpo1);\n//console.log(idpo2);",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "f7d77ea4-d8e5-4bd6-a68e-198e9919a945",
                  "parentUUID": "6b4b42a1-c3c0-4369-968e-50915ac83f16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f7d77ea4-d8e5-4bd6-a68e-198e9919a945"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20009,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0e6de66f-9ca0-47c4-9000-74cd164ebd5b",
              "title": "Get Detail payment option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, idpo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"provider_id\").exist\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").exist\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0]).to.have.property(\"category\").exist",
                  "err": {
                    "message": "ReferenceError: idpo is not defined",
                    "estack": "ReferenceError: idpo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:203:94)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "01f4a5a7-d9b0-4230-84f9-58c7a6e51a2a",
                  "parentUUID": "0e6de66f-9ca0-47c4-9000-74cd164ebd5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get Detail payment option when user hit api get detail with wrong id then user got response error",
                  "timedOut": true,
                  "duration": 20008,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_Option.getdetailPaymentOption(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "f4d626cd-73af-4184-b1bc-0c386d8e4513",
                  "parentUUID": "0e6de66f-9ca0-47c4-9000-74cd164ebd5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "01f4a5a7-d9b0-4230-84f9-58c7a6e51a2a",
                "f4d626cd-73af-4184-b1bc-0c386d8e4513"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20008,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d3ca7598-a89f-4315-82be-876839af7fa2",
              "title": "Update Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"EWALLET\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:220:190)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "434a509f-e8db-463f-813c-d64557c2c86c",
                  "parentUUID": "d3ca7598-a89f-4315-82be-876839af7fa2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Payment Option when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"BANK_TRANSFER\", datas.Deductible.description, datas.paymentOption.fixfee , datas.paymentOption.name , 0 , id1, idpo)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:224:195)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "32c3a6b7-d3aa-48d1-b548-f6079df00972",
                  "parentUUID": "d3ca7598-a89f-4315-82be-876839af7fa2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment provider id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment provider id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, 0 , datas.paymentOption.name ,datas.paymentOption.persenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"id payment provider tidak ada\")",
                  "err": {
                    "message": "ReferenceError: idpo is not defined",
                    "estack": "ReferenceError: idpo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:228:214)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "c72ee958-51c7-409b-8a05-6cd62a349ecf",
                  "parentUUID": "d3ca7598-a89f-4315-82be-876839af7fa2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input persen fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input persen fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name ,datas.paymentOption.wrongpersenfee, datas.paymentOption.wrongID, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {
                    "message": "ReferenceError: idpo is not defined",
                    "estack": "ReferenceError: idpo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:233:243)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "6188e7b3-c365-41c1-8bb5-0990fac00363",
                  "parentUUID": "d3ca7598-a89f-4315-82be-876839af7fa2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input fix fee using string, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input fix fee using string, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.wrongfixfee, datas.paymentOption.name ,datas.paymentOption.persenfee, id1, idpo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"invalid/incomplete request payload\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:238:214)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "2c6ee3e9-ea1b-43a9-8faa-0dcd96d43a73",
                  "parentUUID": "d3ca7598-a89f-4315-82be-876839af7fa2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Update Payment Option when user input data using invalid payment option id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_Option.updatePaymentOption(global.access_Tokens1, \"VA\", datas.Deductible.description, datas.paymentOption.fixfee, datas.paymentOption.name , 0 , id1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {
                    "message": "ReferenceError: id1 is not defined",
                    "estack": "ReferenceError: id1 is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:243:183)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "cb782fed-803b-419d-a939-ad4bfb30e79c",
                  "parentUUID": "d3ca7598-a89f-4315-82be-876839af7fa2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "434a509f-e8db-463f-813c-d64557c2c86c",
                "32c3a6b7-d3aa-48d1-b548-f6079df00972",
                "c72ee958-51c7-409b-8a05-6cd62a349ecf",
                "6188e7b3-c365-41c1-8bb5-0990fac00363",
                "2c6ee3e9-ea1b-43a9-8faa-0dcd96d43a73",
                "cb782fed-803b-419d-a939-ad4bfb30e79c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "b1762c36-ba03-4369-b92f-b9f1cde2e16e",
              "title": "Delete Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "caff359a-c334-4706-948d-52f865e2f33d",
                  "parentUUID": "b1762c36-ba03-4369-b92f-b9f1cde2e16e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "cd1e9475-1463-4d05-9bda-f168a52a308e",
                  "parentUUID": "b1762c36-ba03-4369-b92f-b9f1cde2e16e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d66374a6-f6d7-46bb-965b-49aae47cba9e",
                  "parentUUID": "b1762c36-ba03-4369-b92f-b9f1cde2e16e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "dac27741-884e-4e76-ae16-a795cc7746b9",
                  "parentUUID": "b1762c36-ba03-4369-b92f-b9f1cde2e16e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "caff359a-c334-4706-948d-52f865e2f33d",
                "cd1e9475-1463-4d05-9bda-f168a52a308e",
                "d66374a6-f6d7-46bb-965b-49aae47cba9e",
                "dac27741-884e-4e76-ae16-a795cc7746b9"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "edd6fa53-844d-4db3-a235-9df189b1c979",
              "title": "Create Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": true,
                  "duration": 20006,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.idpaoption, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nglobal.ppoid = res.body.data[0].id\nglobal.payment_option_id = res.body.data[0].payment_option_id\nglobal.service_group_id = res.body.data[0].service_group_id\n//console.log(\"ini ppoids : \"+global.ppoid);\n//console.log(\"ini payment_option_id : \"+global.payment_option_id);\n//console.log(\"ini service_group_id : \"+global.service_group_id);",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "a1c19a29-9026-401f-a9b8-db74a3b13e75",
                  "parentUUID": "edd6fa53-844d-4db3-a235-9df189b1c979",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input correct data then user got response 200",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.idpaoption1, global.serviceids1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nglobal.ppoid1 = res.body.data[0].id\nglobal.payment_option_id1 = res.body.data[0].payment_option_id\nglobal.service_group_id1 = res.body.data[0].service_group_id\n//console.log(\"ini ppoids : \"+global.ppoid);\n//console.log(\"ini payment_option_id : \"+global.payment_option_id);\n//console.log(\"ini service_group_id : \"+global.service_group_id);",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "08e8a0d9-89b3-4289-9ef6-c60448c5f1de",
                  "parentUUID": "edd6fa53-844d-4db3-a235-9df189b1c979",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input service group id with invalid id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input service group id with invalid id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "838cc36a-d17c-4f3c-aa51-071e6ae744ca",
                  "parentUUID": "edd6fa53-844d-4db3-a235-9df189b1c979",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid payment option id, then user got response error",
                  "fullTitle": "Payment Api Service Create Product Payment Option when user input invalid payment option id, then user got response error",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create_PPO.createProductPaymentOption(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, global.idsgforppo)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "b1f7f881-ea4c-4631-9140-d49f325a4e2f",
                  "parentUUID": "edd6fa53-844d-4db3-a235-9df189b1c979",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a1c19a29-9026-401f-a9b8-db74a3b13e75",
                "08e8a0d9-89b3-4289-9ef6-c60448c5f1de",
                "b1f7f881-ea4c-4631-9140-d49f325a4e2f"
              ],
              "pending": [
                "838cc36a-d17c-4f3c-aa51-071e6ae744ca"
              ],
              "skipped": [],
              "duration": 60025,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "fbef0343-d3bf-408a-a0a0-bbf5ee2c39d9",
              "title": "Get all Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20012,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPO.getProductPaymentOption(global.access_Tokens1)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nidppo0 = res.body.data[0].id\nidppo1 = res.body.data[1].id\nidppo2 = res.body.data[2].id",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "c4eb6989-bde4-4f72-a5d5-88043c0662b9",
                  "parentUUID": "fbef0343-d3bf-408a-a0a0-bbf5ee2c39d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c4eb6989-bde4-4f72-a5d5-88043c0662b9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20012,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5bb71489-5746-4d21-a620-6f17e483a30a",
              "title": "Get all Product Payment Option with Service Group Id",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nidppo = res.body.data[0].id",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "cdf0c6af-7a82-4027-9759-c4b3e52e86d4",
                  "parentUUID": "5bb71489-5746-4d21-a620-6f17e483a30a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input invalid sg id, then user got response error",
                  "fullTitle": "Payment Api Service Get all Product Payment Option with Service Group Id when user input invalid sg id, then user got response error",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll_PPOsgid.getProductPaymentOptionsgid(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(200)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "4dc2f442-915e-46c8-a356-d639464f838b",
                  "parentUUID": "5bb71489-5746-4d21-a620-6f17e483a30a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "cdf0c6af-7a82-4027-9759-c4b3e52e86d4",
                "4dc2f442-915e-46c8-a356-d639464f838b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 40021,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "37082e30-f005-4ae3-a16f-f5fb9a217093",
              "title": "Get detail Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, idppo)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {
                    "message": "ReferenceError: idppo is not defined",
                    "estack": "ReferenceError: idppo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:351:98)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "1053a689-67f7-4555-a86d-ae5e42ef6e62",
                  "parentUUID": "37082e30-f005-4ae3-a16f-f5fb9a217093",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Get detail Product Payment Option when user hit api get detail with wrong id then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getDetail_PPO.getdetailProductPaymentOption(global.access_Tokens1, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "31f921c5-1547-4fd7-bac1-55b8494fb187",
                  "parentUUID": "37082e30-f005-4ae3-a16f-f5fb9a217093",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1053a689-67f7-4555-a86d-ae5e42ef6e62",
                "31f921c5-1547-4fd7-bac1-55b8494fb187"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20010,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7963f7aa-644b-4f1d-b08a-dc2d8f92713c",
              "title": "Update Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, global.payment_option_id, global.service_group_id, global.ppoid)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "094d320c-2155-430f-b214-d68c5da8f813",
                  "parentUUID": "7963f7aa-644b-4f1d-b08a-dc2d8f92713c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input corect data then user got response 200",
                  "timedOut": true,
                  "duration": 20007,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.true, datas.productpaymentOption.oder_opt, global.payment_option_id, global.service_group_id, global.ppoid)\nif (res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"is_active\").exist\nassert(res.body.data[0]).to.have.property(\"ord_position\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "bd732dbf-f957-483e-a5f0-930f88c01d32",
                  "parentUUID": "7963f7aa-644b-4f1d-b08a-dc2d8f92713c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PPO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PPO id, then user got response error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, idpo, idsgforppo, datas.productpaymentOption.wrongID)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"data tidak ditemukan\")",
                  "err": {
                    "message": "ReferenceError: idpo is not defined",
                    "estack": "ReferenceError: idpo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:399:243)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "48788198-56a4-4ba8-96a7-bdee74ea142f",
                  "parentUUID": "7963f7aa-644b-4f1d-b08a-dc2d8f92713c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid SG id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid SG id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ca43f97b-cc8f-4325-8c99-452d2151200d",
                  "parentUUID": "7963f7aa-644b-4f1d-b08a-dc2d8f92713c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid PO id, then user got response error",
                  "fullTitle": "Payment Api Service Update Product Payment Option when user input data using invalid PO id, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update_PPO.updateProductPaymentProvider(global.access_Tokens1, datas.Deductible.description, datas.productpaymentOption.displayNme, datas.productpaymentOption.isactive.false, datas.productpaymentOption.oder_opt, datas.paymentOption.wrongID, idsgforppo, idppo)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "ReferenceError: idsgforppo is not defined",
                    "estack": "ReferenceError: idsgforppo is not defined\n    at Context.<anonymous> (test/suite3_paymentService.js:409:272)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "ba478427-1842-43e7-9cb5-002a9e28f5be",
                  "parentUUID": "7963f7aa-644b-4f1d-b08a-dc2d8f92713c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "094d320c-2155-430f-b214-d68c5da8f813",
                "bd732dbf-f957-483e-a5f0-930f88c01d32",
                "48788198-56a4-4ba8-96a7-bdee74ea142f",
                "ba478427-1842-43e7-9cb5-002a9e28f5be"
              ],
              "pending": [
                "ca43f97b-cc8f-4325-8c99-452d2151200d"
              ],
              "skipped": [],
              "duration": 40018,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e8820238-d397-4b03-a762-4d3860e0834d",
              "title": "Get Payment Option Page",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get page payment with valid token and service group, then user got response 200/OK",
                  "fullTitle": "Payment Api Service Get Payment Option Page when user hit api get page payment with valid token and service group, then user got response 200/OK",
                  "timedOut": true,
                  "duration": 20007,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getaPage.getPaymentOptionPage(global.access_Tokens1, global.serviceids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"category\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"description\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"image_url\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"fixed_fee\").exist\nassert(res.body.data[0].options[0]).to.have.property(\"percentage_fee\").exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite3_paymentService.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "a876df44-8a68-40bb-9437-cf5d0cc00dff",
                  "parentUUID": "e8820238-d397-4b03-a762-4d3860e0834d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a876df44-8a68-40bb-9437-cf5d0cc00dff"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20007,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1fa165d2-d735-4674-a987-6d36e19edf10",
              "title": "Delete Product Payment Option",
              "fullFile": "/home/runner/work/flash/flash/test/suite3_paymentService.js",
              "file": "/test/suite3_paymentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and delete_at will be update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "8e0b269c-22e2-4cf5-9eea-512c88dc94d3",
                  "parentUUID": "1fa165d2-d735-4674-a987-6d36e19edf10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "06fd6bd3-797a-44ec-a842-07e88007e6bf",
                  "parentUUID": "1fa165d2-d735-4674-a987-6d36e19edf10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "fb5ce964-d3dc-4b43-8d50-e772da7989bb",
                  "parentUUID": "1fa165d2-d735-4674-a987-6d36e19edf10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid type, then user got response error",
                  "fullTitle": "Payment Api Service Delete Product Payment Option when user input data using invalid type, then user got response error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "167d8561-d298-40c6-b5cf-a07f1d94120e",
                  "parentUUID": "1fa165d2-d735-4674-a987-6d36e19edf10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "8e0b269c-22e2-4cf5-9eea-512c88dc94d3",
                "06fd6bd3-797a-44ec-a842-07e88007e6bf",
                "fb5ce964-d3dc-4b43-8d50-e772da7989bb",
                "167d8561-d298-40c6-b5cf-a07f1d94120e"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "a079ea91-28b6-48ac-b969-9d9c32babcf3",
          "title": "Purchase Service API",
          "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
          "file": "/test/suite4_purchase.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a1f4c684-1850-4a70-9e61-885fc4071294",
              "title": "Create Health Declaration",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create HD using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD using valid data, then user got response 200/ok",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.true, global.serviceids, datas.purchase.type)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('type').to.equal('FIRST_TIME')\nassert(res.body.data[0]).to.have.property('status').to.equal('DRAFT_HEALTH_DECLARATION')\nassert(res.body.data[0].health_declaration_json).to.have.property('age').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('medical').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('job').exist\nglobal.idpurcahse = res.body.data[0].purchase_id\n//console.log(\"ini purchase id : \"+global.idpurcahse",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "7e4c892c-1483-4776-81e0-791d6b7ea3d5",
                  "parentUUID": "a1f4c684-1850-4a70-9e61-885fc4071294",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD using valid data, then user got response 200/ok",
                  "timedOut": true,
                  "duration": 20003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.true, global.serviceids1, datas.purchase.type)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('type').to.equal('FIRST_TIME')\nassert(res.body.data[0]).to.have.property('status').to.equal('DRAFT_HEALTH_DECLARATION')\nassert(res.body.data[0].health_declaration_json).to.have.property('age').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('medical').exist\nassert(res.body.data[0].health_declaration_json).to.have.property('job').exist\nglobal.idpurcahse1 = res.body.data[0].purchase_id\n//console.log(\"ini purchase id : \"+global.idpurcahse",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "db4eda28-ffc4-4738-a59e-c708e629e669",
                  "parentUUID": "a1f4c684-1850-4a70-9e61-885fc4071294",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD with value age = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD with value age = false, then user got response error",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.false, datas.purchase.job.true, datas.purchase.medical.true, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "6af66fa1-426e-4f5c-b654-2a23d78c09a9",
                  "parentUUID": "a1f4c684-1850-4a70-9e61-885fc4071294",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD  with value job = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD  with value job = false, then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.false, datas.purchase.medical.true, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "b170b5c2-20ce-4162-b03d-e37173dfd8f2",
                  "parentUUID": "a1f4c684-1850-4a70-9e61-885fc4071294",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create HD  with value medical = false, then user got response error",
                  "fullTitle": "Purchase Service API Create Health Declaration when user input data api create HD  with value medical = false, then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createHD.createHD(global.access_Tokens1, global.contripurchase, datas.purchase.age.true, datas.purchase.job.true, datas.purchase.medical.false, global.idsgpuchase, datas.purchase.type)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "161d000c-b033-45d6-8097-25461a3e2414",
                  "parentUUID": "a1f4c684-1850-4a70-9e61-885fc4071294",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7e4c892c-1483-4776-81e0-791d6b7ea3d5",
                "db4eda28-ffc4-4738-a59e-c708e629e669",
                "6af66fa1-426e-4f5c-b654-2a23d78c09a9",
                "b170b5c2-20ce-4162-b03d-e37173dfd8f2",
                "161d000c-b033-45d6-8097-25461a3e2414"
              ],
              "pending": [],
              "skipped": [],
              "duration": 100043,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "3a013417-228a-4642-9add-579ef6ade205",
              "title": "Create KYC",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create kyc using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using valid data, then user got response 200/ok",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.validdobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "1992ba49-ce08-49b2-a173-5081084cb2be",
                  "parentUUID": "3a013417-228a-4642-9add-579ef6ade205",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using valid data, then user got response 200/ok",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.validdobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "919da97f-318f-4344-a759-526a1f21f7c5",
                  "parentUUID": "3a013417-228a-4642-9add-579ef6ade205",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using min dob(17th 180hr), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using min dob(17th 180hr), then user got response error",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.minDobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Kamu harus berusia 18 - 55 tahun untuk jadi anggota\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "5c8b9aaa-4617-4616-ad0c-deb9d0578787",
                  "parentUUID": "3a013417-228a-4642-9add-579ef6ade205",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using max dob(55th 181hr), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using max dob(55th 181hr), then user got response error",
                  "timedOut": true,
                  "duration": 20008,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, date.maxDobs, datas.KYC.email, datas.KYC.fullname, datas.KYC.ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Kamu harus berusia 18 - 55 tahun untuk jadi anggota\")",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "36877b40-5942-4826-88b0-cc7fdcb58438",
                  "parentUUID": "3a013417-228a-4642-9add-579ef6ade205",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using max dob(more than 16 digit), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using max dob(more than 16 digit), then user got response error",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.valid_dob, datas.KYC.email, datas.KYC.fullname, datas.KYC.max_ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "de1c10b1-4ef5-4e56-b5c1-a4afec41961c",
                  "parentUUID": "3a013417-228a-4642-9add-579ef6ade205",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create kyc using min dob(less than 16 digit), then user got response error",
                  "fullTitle": "Purchase Service API Create KYC when user input data api create kyc using min dob(less than 16 digit), then user got response error",
                  "timedOut": true,
                  "duration": 20012,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createkyc.createKYC(global.access_Tokens1, datas.KYC.valid_dob, datas.KYC.email, datas.KYC.fullname, datas.KYC.min_ktp, datas.KYC.phone, global.idpurcahse)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "a23ff404-1390-4074-86a7-5e009590504c",
                  "parentUUID": "3a013417-228a-4642-9add-579ef6ade205",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1992ba49-ce08-49b2-a173-5081084cb2be",
                "919da97f-318f-4344-a759-526a1f21f7c5",
                "5c8b9aaa-4617-4616-ad0c-deb9d0578787",
                "36877b40-5942-4826-88b0-cc7fdcb58438",
                "de1c10b1-4ef5-4e56-b5c1-a4afec41961c",
                "a23ff404-1390-4074-86a7-5e009590504c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 120062,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "9940b84a-953d-45a9-ad86-6fd7729b086b",
              "title": "Create Beneficiary",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Beneficiary when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createbenef.createBeneficiary(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.benef.inform.true, datas.KYC.ktp, datas.KYC.phone, datas.benef.relation, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "feb3a7b9-da58-498e-908a-0ccefd0b95dd",
                  "parentUUID": "9940b84a-953d-45a9-ad86-6fd7729b086b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Beneficiary when user input data api create beneficiary using valid data, then user got response 200/ok",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createbenef.createBeneficiary(global.access_Tokens1, datas.KYC.dob, datas.KYC.fullname, datas.benef.inform.true, datas.KYC.ktp, datas.KYC.phone, datas.benef.relation, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('dob').exist\nassert(res.body.data[0]).to.have.property('fullname').exist\nassert(res.body.data[0]).to.have.property('ktp').exist\nassert(res.body.data[0]).to.have.property('phone_number').exist\nassert(res.body.data[0]).to.have.property('purchase_id').exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "c21995b4-dc9d-40f1-bdaf-e9b7005e5f15",
                  "parentUUID": "9940b84a-953d-45a9-ad86-6fd7729b086b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "feb3a7b9-da58-498e-908a-0ccefd0b95dd",
                "c21995b4-dc9d-40f1-bdaf-e9b7005e5f15"
              ],
              "pending": [],
              "skipped": [],
              "duration": 40020,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "3d5655d8-d947-45ab-9709-36baf32e1eb2",
              "title": "Create Payment",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input data api create payment using donation true, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation true, then user got response 200/ok",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, true, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('status').to.equal('PURCHASED')\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "6654f42c-4890-4a19-b915-6165540b7c4c",
                  "parentUUID": "3d5655d8-d947-45ab-9709-36baf32e1eb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create payment using donation true, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation true, then user got response 200/ok",
                  "timedOut": true,
                  "duration": 20012,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, true, global.idpurcahse1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('status').to.equal('PURCHASED')\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "716ac538-0a83-4f18-950a-df542652572e",
                  "parentUUID": "3d5655d8-d947-45ab-9709-36baf32e1eb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data api create payment using donation False, then user got response error",
                  "fullTitle": "Purchase Service API Create Payment when user input data api create payment using donation False, then user got response error",
                  "timedOut": true,
                  "duration": 20003,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await createnewPurchase.createnewpurchase(global.access_Tokens1, false, global.idpurcahse)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "85652995-d0fe-4b15-b39d-76a5033dba7b",
                  "parentUUID": "3d5655d8-d947-45ab-9709-36baf32e1eb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6654f42c-4890-4a19-b915-6165540b7c4c",
                "716ac538-0a83-4f18-950a-df542652572e",
                "85652995-d0fe-4b15-b39d-76a5033dba7b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 60025,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d4ccf4ac-a201-49d2-818d-e54cfbbc0110",
              "title": "Get Data Summary",
              "fullFile": "/home/runner/work/flash/flash/test/suite4_purchase.js",
              "file": "/test/suite4_purchase.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user get data api get summary using valid purchase id, then user got response 200/ok",
                  "fullTitle": "Purchase Service API Get Data Summary when user get data api get summary using valid purchase id, then user got response 200/ok",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getSummary.getSummary(global.access_Tokens1, global.idpurcahse)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property('id').exist\nassert(res.body.data[0]).to.have.property('service_group_id').exist\nassert(res.body.data[0]).to.have.property('user_id').exist\nassert(res.body.data[0]).to.have.property('contribution_id').exist\nassert(res.body.data[0]).to.have.property('status').exist\nassert(res.body.data[0]).to.have.property('type').exist\nassert(res.body.data[0]).to.have.property('donate_excess_contribution').exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "73098b5c-1e01-4e75-a092-4dfe6ea75ba7",
                  "parentUUID": "d4ccf4ac-a201-49d2-818d-e54cfbbc0110",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user get data api get summary using invalid purchase id, then user got response error",
                  "fullTitle": "Purchase Service API Get Data Summary when user get data api get summary using invalid purchase id, then user got response error",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getSummary.getSummary(global.access_Tokens1, datas.paymentOption.wrongID)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite4_purchase.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "93bed7f6-a4dc-48ab-86c5-dedcae6bffd2",
                  "parentUUID": "d4ccf4ac-a201-49d2-818d-e54cfbbc0110",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "73098b5c-1e01-4e75-a092-4dfe6ea75ba7",
                "93bed7f6-a4dc-48ab-86c5-dedcae6bffd2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 40020,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "e46065f9-7343-4d65-8d67-39cd053e8a05",
          "title": "API Calculation Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite5_calculation.js",
          "file": "/test/suite5_calculation.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "60a22a35-7642-4965-942c-2b43bd7c61f4",
              "title": "Get Calculate Payment",
              "fullFile": "/home/runner/work/flash/flash/test/suite5_calculation.js",
              "file": "/test/suite5_calculation.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: calucated in \"Get Calculate Payment\"",
                  "fullTitle": "API Calculation Service Get Calculate Payment \"before all\" hook: calucated in \"Get Calculate Payment\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "persenfee = datas.paymentOption.persenfee / 100\nfixfee = datas.paymentOption.fixfee\ntotalFeepersen = datas.calcu.contributeFee  * persenfee\ntotalFeefixfee = fixfee\ntotalpayment = datas.calcu.contributeFee + totalFeepersen\ntotalpayment1 = datas.calcu.contributeFee + totalFeefixfee",
                  "err": {},
                  "uuid": "fa5eac80-102a-4136-a1aa-c5e3b3e1c718",
                  "parentUUID": "60a22a35-7642-4965-942c-2b43bd7c61f4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "fullTitle": "API Calculation Service Get Calculate Payment when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await calcu.calcu(global.access_Tokens1, datas.calcu.contributeFee, global.ppoid)\nif(res.status !== 200) {\n    console.log(\"failed  : \"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(totalFeefixfee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(totalpayment1)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.calcu.contributeFee)\n//console.log(res.text);",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite5_calculation.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite5_calculation.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "e610772d-0371-48f3-a67a-a270e87ea21f",
                  "parentUUID": "60a22a35-7642-4965-942c-2b43bd7c61f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "fullTitle": "API Calculation Service Get Calculate Payment when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "timedOut": true,
                  "duration": 20011,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await calcu.calcu(global.access_Tokens1, datas.calcu.contributeFee, datas.calcu.ppoidpersen)\nif(res.status !== 200) {\n    console.log(\"failed  : \"+res.text);\n}\n//console.log(res.text);\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").exist\nassert(res.body.data[0]).to.have.property(\"service_group_id\").exist\nassert(res.body.data[0]).to.have.property(\"display_name\").exist\nassert(res.body.data[0]).to.have.property(\"description\").exist\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(totalFeepersen)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(totalpayment)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.calcu.contributeFee)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite5_calculation.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite5_calculation.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "cddb6700-a34b-4272-bbaf-a35bf8912965",
                  "parentUUID": "60a22a35-7642-4965-942c-2b43bd7c61f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e610772d-0371-48f3-a67a-a270e87ea21f",
                "cddb6700-a34b-4272-bbaf-a35bf8912965"
              ],
              "pending": [],
              "skipped": [],
              "duration": 40020,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "cccd8e14-df5c-4f0a-9777-16d0903438d9",
          "title": "API Checkout Service",
          "fullFile": "/home/runner/work/flash/flash/test/suite6_checkout.js",
          "file": "/test/suite6_checkout.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "947c55f7-eb68-43f9-a5c3-e049f7b1a619",
              "title": "Checkout/Capture Purchase",
              "fullFile": "/home/runner/work/flash/flash/test/suite6_checkout.js",
              "file": "/test/suite6_checkout.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: calucated in \"Checkout/Capture Purchase\"",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase \"before all\" hook: calucated in \"Checkout/Capture Purchase\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "ujrah = datas.service_Group.ujrah / 100\nujrah1 = datas.service_Group.ujrah1 / 100\npersenfee = datas.paymentOption.persenfee / 100\npersen_total_fee = datas.contribution.contriFee * persenfee\nfixfee_total_fee = datas.paymentOption.fixfee\ntotal_ujrah = ujrah * datas.contribution.contriFee\ntotal_ujrah1 = ujrah1 * datas.contribution.contriFee\ntotal_tabaru = datas.contribution.contriFee - total_ujrah\ntotal_tabaru1 = datas.contribution.contriFee - total_ujrah1\nP_total_payment = datas.contribution.contriFee + persen_total_fee\nF_total_payment = datas.contribution.contriFee + fixfee_total_fee",
                  "err": {},
                  "uuid": "bafb8cb2-58f6-424a-85b6-61eaee6fe91d",
                  "parentUUID": "947c55f7-eb68-43f9-a5c3-e049f7b1a619",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase when user hit api calculate then user can make sure totalfee = fixfee and got response 200/ok",
                  "timedOut": true,
                  "duration": 20010,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi, global.idpaoption, global.idpoc, global.idpurcahse, global.serviceids)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\nglobal.ppids = res.body.data[0].id\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(datas.paymentOption.fixfee)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(fixfee_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(F_total_payment)\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"paid_at\")\nassert(res.body.data[0].actions[0]).to.have.property(\"name\").exist\nassert(res.body.data[0].actions[0]).to.have.property(\"method\").exist\nassert(res.body.data[0].actions[0]).to.have.property(\"url\").exist\nassert(res.body.data[0]).to.have.property(\"va_numbers\")\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite6_checkout.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite6_checkout.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "187bae59-d656-4565-98e3-2ef563262a81",
                  "parentUUID": "947c55f7-eb68-43f9-a5c3-e049f7b1a619",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "fullTitle": "API Checkout Service Checkout/Capture Purchase when user hit api calculate then user can make sure totalfee = contri fee * persenfee and got response 200/ok",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "after(async function checkouts() {\n    this.timeout(5000); \n    const res = await cekout.checkout(global.access_Tokens1, datas.checkout.idempotensi1, global.idpaoption1, global.idpoc1, global.idpurcahse1, global.serviceids1)\nif(res.status !== 200){\n    console.log(\"failed : \"+res.text);\n}\nassert(res.status).to.equal(200)\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi1)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids1)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption1)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse1)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc1)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(datas.paymentOption.persenfee)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru1)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah1)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(persen_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(P_total_payment)\nassert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\nassert(res.body.data[0]).to.have.property(\"status\").exist\nassert(res.body.data[0]).to.have.property(\"paid_at\")\nassert(res.body.data[0]).to.have.property(\"actions\")\nassert(res.body.data[0].va_numbers[0]).to.have.property(\"bank\").to.equal(\"permata\")\nassert(res.body.data[0].va_numbers[0]).to.have.property(\"va_number\").exist\nassert(res.body.data[0]).to.have.property(\"expired_at\").exist\n\n\n\n\n});",
                  "err": {},
                  "uuid": "cec13f12-5805-4dee-a924-88d5515810a1",
                  "parentUUID": "947c55f7-eb68-43f9-a5c3-e049f7b1a619",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cec13f12-5805-4dee-a924-88d5515810a1"
              ],
              "failures": [
                "187bae59-d656-4565-98e3-2ef563262a81"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20011,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "07c7573c-89cf-4f6c-b8f5-fa379f8737b7",
          "title": "API Product Payment",
          "fullFile": "/home/runner/work/flash/flash/test/suite7_PayementCancel.js",
          "file": "/test/suite7_PayementCancel.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "377d008e-e2fe-40f0-98e1-6b6a73e5db22",
              "title": "Payment Cancel",
              "fullFile": "/home/runner/work/flash/flash/test/suite7_PayementCancel.js",
              "file": "/test/suite7_PayementCancel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api payment cancel, then status on table product payment will be cancel.",
                  "fullTitle": "API Product Payment Payment Cancel when user hit api payment cancel, then status on table product payment will be cancel.",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cancel.canceled(global.access_Tokens1, global.ppids)\nassert(res.status).to.equal(200)\n//console.log(res.text);\nassert(res.body.data[0]).to.have.property(\"id\").exist\nassert(res.body.data[0]).to.have.property(\"idempotency_key\").to.equal(datas.checkout.idempotensi)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.serviceids)\nassert(res.body.data[0]).to.have.property(\"payment_option_id\").to.equal(global.idpaoption)\nassert(res.body.data[0]).to.have.property(\"product_purchase_id\").to.equal(global.idpurcahse)\nassert(res.body.data[0]).to.have.property(\"product_contribution_id\").to.equal(global.idpoc)\nassert(res.body.data[0]).to.have.property(\"percentage_fee\").to.equal(0)\nassert(res.body.data[0]).to.have.property(\"fixed_fee\").to.equal(datas.paymentOption.fixfee)\nassert(res.body.data[0]).to.have.property(\"contribution_fee\").to.equal(datas.contribution.contriFee)\nassert(res.body.data[0]).to.have.property(\"total_tabarru\").to.equal(total_tabaru)\nassert(res.body.data[0]).to.have.property(\"total_ujrah\").to.equal(total_ujrah)\nassert(res.body.data[0]).to.have.property(\"total_fee\").to.equal(fixfee_total_fee)\nassert(res.body.data[0]).to.have.property(\"total_payment\").to.equal(F_total_payment)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite7_PayementCancel.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite7_PayementCancel.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "333d4656-53ee-491f-bac6-f9cbef554ec3",
                  "parentUUID": "377d008e-e2fe-40f0-98e1-6b6a73e5db22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api payment cancel using status expired, then got response error",
                  "fullTitle": "API Product Payment Payment Cancel when user hit api payment cancel using status expired, then got response error",
                  "timedOut": true,
                  "duration": 20009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cancel.canceled(global.access_Tokens1, datas.status.ppid_expired)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite7_PayementCancel.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite7_PayementCancel.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "116d2a2a-df3b-4482-af4b-58abd9d7b905",
                  "parentUUID": "377d008e-e2fe-40f0-98e1-6b6a73e5db22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api payment cancel using status paid, then got response error",
                  "fullTitle": "API Product Payment Payment Cancel when user hit api payment cancel using status paid, then got response error",
                  "timedOut": true,
                  "duration": 20001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await cancel.canceled(global.access_Tokens1, datas.status.ppid_paid)\nassert(res.status).to.equal(400)",
                  "err": {
                    "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite7_PayementCancel.js)",
                    "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/flash/flash/test/suite7_PayementCancel.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "f9779cdc-7273-4df1-b6ea-2b51a5d57f73",
                  "parentUUID": "377d008e-e2fe-40f0-98e1-6b6a73e5db22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "333d4656-53ee-491f-bac6-f9cbef554ec3",
                "116d2a2a-df3b-4482-af4b-58abd9d7b905",
                "f9779cdc-7273-4df1-b6ea-2b51a5d57f73"
              ],
              "pending": [],
              "skipped": [],
              "duration": 60019,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "264787e2-5ed4-42de-83ae-4c5cde004396",
              "title": "Payment Status",
              "fullFile": "/home/runner/work/flash/flash/test/suite7_PayementCancel.js",
              "file": "/test/suite7_PayementCancel.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api payment status, then user will be see sumarry payment",
                  "fullTitle": "API Product Payment Payment Status when user hit api payment status, then user will be see sumarry payment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "after(async function statuspayment()  {\n    const res = await status.statuss(global.access_Tokens1, global.ppids)\n    assert(res.status).to.equal(200)\n    //console.log(res.text);\n    assert(res.body.data[0]).to.have.property(\"id\").exist\n    assert(res.body.data[0]).to.have.property(\"display_name\").exist\n    assert(res.body.data[0]).to.have.property(\"total_fee\").exist\n    assert(res.body.data[0]).to.have.property(\"total_payment\").exist\n    assert(res.body.data[0]).to.have.property(\"external_reference_id\").exist\n    assert(res.body.data[0]).to.have.property(\"status\").exist\n    assert(res.body.data[0]).to.have.property(\"image_url\").exist\n    assert(res.body.data[0]).to.have.property(\"expired_at\").exist\n});",
                  "err": {},
                  "uuid": "a04713aa-c85f-4982-b916-a18755e0d780",
                  "parentUUID": "264787e2-5ed4-42de-83ae-4c5cde004396",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a04713aa-c85f-4982-b916-a18755e0d780"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-07-06-2022",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "test-07-06-2022"
      },
      "version": "6.2.0"
    }
  }
}