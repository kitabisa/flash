{
  "stats": {
    "suites": 22,
    "tests": 45,
    "passes": 45,
    "pending": 0,
    "failures": 0,
    "start": "2022-05-23T10:32:24.937Z",
    "end": "2022-05-23T10:32:58.780Z",
    "duration": 33843,
    "testsRegistered": 45,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0bfd575a-7fc3-4e15-8458-4bf0b6f6374b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1672f157-bd1d-4b04-83ef-361d9501e9c6",
          "title": "Exchange Token API",
          "fullFile": "/home/runner/work/flash/flash/test/suite_accountService.js",
          "file": "/test/suite_accountService.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: pre_request in \"Exchange Token API\"",
              "fullTitle": "Exchange Token API \"before all\" hook: pre_request in \"Exchange Token API\"",
              "timedOut": false,
              "duration": 1011,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rd = await wong.wongAccount()\nconsole.log('Status Code:', rd.status);\nconst res = rd.body.data[0]\nglobal.ktbs_token = res.token",
              "err": {},
              "uuid": "6476b518-30c9-44e3-b0e5-f031977a0333",
              "parentUUID": "1672f157-bd1d-4b04-83ef-361d9501e9c6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "when user input valid token then user got response 200",
              "fullTitle": "Exchange Token API when user input valid token then user got response 200",
              "timedOut": false,
              "duration": 790,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount(global.ktbs_token);\nif(res.status !== 200){\n    console.log(\"exchange_token: \" + res.status + \"||\" + res.text)\n}\nassert(res.status).to.equal(200);\nassert(res.body.data[0]).to.have.property('access_token')\nassert(res.body.data[0]).to.have.property('refresh_token')\nassert(res.body.data[0]).to.have.property('expires_in')",
              "err": {},
              "uuid": "cbfe9654-8e71-4f77-8c4b-aad1f64a1dc8",
              "parentUUID": "1672f157-bd1d-4b04-83ef-361d9501e9c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when user input wrong token, then user got response error",
              "fullTitle": "Exchange Token API when user input wrong token, then user got response error",
              "timedOut": false,
              "duration": 927,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1bXhfUFZiQ3lTV2o5SG5MRHJ0bEJ3X1BLTnlFcVJtWTNpQ3BSMTBlMFpvIn0.eyJleHAiOjE2NTI4OTEwNTEsImlhdCI6MTY1Mjg1NTA1MSwianRpIjoiYmMwMzhiZWUtYzNhNi00YjYxLTlkZjMtYmQ3NjExZWQwMTI0IiwiaXNzIjoiaHR0cDovL2tleWNsb2FrLnN0Zy5rdC5qZy9hdXRoL3JlYWxtcy9raXRhamFnYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNTY5ZjM5NS1iZWUxLTQxMzItOWYzZS1lZDM3ODAyMzY2ODMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrb25nIiwic2Vzc2lvbl9zdGF0ZSI6ImYwZWU1YzI3LTliODYtNDg1Mi1iYmE2LTI1M2ZkN2RlZDFkMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1raXRhamFnYSIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJzaWQiOiJmMGVlNWMyNy05Yjg2LTQ4NTItYmJhNi0yNTNmZDdkZWQxZDAiLCJraXRhYmlzYV91c2VyX2lkIjoiNSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiS2l0YWphZ2EgVGVzdCBBamEiLCJraXRhYmlzYV9zZWNvbmRhcnlfaWQiOiI1NDk0ZTg3ODQ2MTJjMWY1ZDNhODI4ZjAyYWNkNzRmNSIsInBob25lX251bWJlciI6IjYyODEyMzQ1Njc4OTAiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJraXRhamFnYS10ZXN0QGtpdGFqYWdhLmlkIiwiZ2l2ZW5fbmFtZSI6IktpdGFqYWdhIiwiZmFtaWx5X')\nassert(res.status).to.equal(502)",
              "err": {},
              "uuid": "fea3e544-fbfb-479f-9979-4aa98a670390",
              "parentUUID": "1672f157-bd1d-4b04-83ef-361d9501e9c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when user input empty token, then user got response error",
              "fullTitle": "Exchange Token API when user input empty token, then user got response error",
              "timedOut": false,
              "duration": 697,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await exchange_token.exchangeTokenAccount('')\nassert(res.status).to.equal(401)",
              "err": {},
              "uuid": "dcfbaf33-fd48-4e7b-9e26-0b9269a7e4fd",
              "parentUUID": "1672f157-bd1d-4b04-83ef-361d9501e9c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cbfe9654-8e71-4f77-8c4b-aad1f64a1dc8",
            "fea3e544-fbfb-479f-9979-4aa98a670390",
            "dcfbaf33-fd48-4e7b-9e26-0b9269a7e4fd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2414,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "787c599d-cbdd-4114-aa29-ce4709ba75fd",
          "title": "API Service Group",
          "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
          "file": "/test/suite_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "104581cb-2afe-430f-9166-676a8fbb0500",
              "title": "Create Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Create Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 651,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup(datas.service_Group.code, datas.service_Group.name, datas.service_Group.description)   \nif(res.status !==200){\n    console.log(\"create data : \"+res.status+\"||\" +res.text)\n}         \nassert(res.status).to.equal(200)\nglobal.ids = res.body.data[0].id\nglobal.names = res.body.data[0].name\nglobal.desc = res.body.data[0].description\nglobal.codes = res.body.data[0].code\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "34bb12b8-111b-43a1-9c09-0d3a11f6ca98",
                  "parentUUID": "104581cb-2afe-430f-9166-676a8fbb0500",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input existing data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input existing data, then user got response error",
                  "timedOut": false,
                  "duration": 704,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup('TEST66', 'Alda', 'this is triger from automation tools')\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "8a0f64c0-a229-4885-acc9-48fc01dd571e",
                  "parentUUID": "104581cb-2afe-430f-9166-676a8fbb0500",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Create Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 711,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await create.createServiceGroup('TEST66', datas.service_Group.name, datas.service_Group.description)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "3c2fa7b0-8121-4944-8303-34943aad1062",
                  "parentUUID": "104581cb-2afe-430f-9166-676a8fbb0500",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34bb12b8-111b-43a1-9c09-0d3a11f6ca98",
                "8a0f64c0-a229-4885-acc9-48fc01dd571e",
                "3c2fa7b0-8121-4944-8303-34943aad1062"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2066,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "b66b389a-29b2-4e90-b1c7-88a02fcbdcca",
              "title": "Get All Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Service Group when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1462,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAll.getallServiceGroup()\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.body.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ids1 = res.body.data[1].id\nglobal.names1 = res.body.data[1].name\nglobal.desc1 = res.body.data[1].description\nglobal.codes1 = res.body.data[1].code",
                  "err": {},
                  "uuid": "08537c8d-9495-4de3-94b0-e6c3dd02d450",
                  "parentUUID": "b66b389a-29b2-4e90-b1c7-88a02fcbdcca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08537c8d-9495-4de3-94b0-e6c3dd02d450"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1462,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "e05db871-0e85-44bb-bfc1-398549f1f654",
              "title": "Get All Public Service Group ",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get All Public Service Group  when user hit api get all public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 647,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getAllpublic.getallpublicServiceGroup()\nif(res.status !==200){\n    console.log(\"getall data : \"+res.status+\"||\" +res.body.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "bae2be80-1529-462f-8b41-674589f15809",
                  "parentUUID": "e05db871-0e85-44bb-bfc1-398549f1f654",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bae2be80-1529-462f-8b41-674589f15809"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 647,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "e2f6fdb7-0323-4bd0-98c2-e41881b29d1e",
              "title": "Get Detail Public Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail public then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 713,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(global.ids)\nif(res.status !==200){\n    console.log(\"getdetailpublic data : \"+res.status+\"||\" +res.body.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "89671616-ac3e-4655-8ab6-0582d5015c19",
                  "parentUUID": "e2f6fdb7-0323-4bd0-98c2-e41881b29d1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail public with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Public Service Group when user hit api get detail public with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 656,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetailpublic.getdetailpublicServiceGroup(datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {},
                  "uuid": "0f14946e-d1e9-4c06-8ef5-a5c6b1a257c6",
                  "parentUUID": "e2f6fdb7-0323-4bd0-98c2-e41881b29d1e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89671616-ac3e-4655-8ab6-0582d5015c19",
                "0f14946e-d1e9-4c06-8ef5-a5c6b1a257c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1369,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "8b4fd535-61c5-446a-867f-524188abbdf3",
              "title": "Get Detail Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 689,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(global.ids)\nif(res.status !==200){\n    console.log(\"getdetail data : \"+res.status+\"||\" +res.body.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "18430c1a-63ba-440d-9790-3ee30e7bb823",
                  "parentUUID": "8b4fd535-61c5-446a-867f-524188abbdf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Service Group Get Detail Service Group when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 641,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getdetail.getdetailServiceGroup(datas.service_Group.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")\nassert(res.body.response_desc).to.have.property(\"en\")",
                  "err": {},
                  "uuid": "c71a6f9e-288d-4cf9-86d2-e506a8c31d3a",
                  "parentUUID": "8b4fd535-61c5-446a-867f-524188abbdf3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18430c1a-63ba-440d-9790-3ee30e7bb823",
                "c71a6f9e-288d-4cf9-86d2-e506a8c31d3a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1330,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "3e04ee73-0f79-4458-8e09-b9934cf14101",
              "title": "Update Service Product",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 730,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.ids, datas.service_Group.code, datas.service_Group.name, datas.service_Group.description)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.body.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "644e7bd8-d86e-4784-bcc0-d630e8b45e8a",
                  "parentUUID": "3e04ee73-0f79-4458-8e09-b9934cf14101",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different code and same description and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different code and same description and same name then user got response 200",
                  "timedOut": false,
                  "duration": 644,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.ids, datas.service_Group.code, global.names, global.desc)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.body.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "04c36356-12b2-44f4-bb79-f12fa10b5598",
                  "parentUUID": "3e04ee73-0f79-4458-8e09-b9934cf14101",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different name and same code then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different name and same code then user got response 200",
                  "timedOut": false,
                  "duration": 645,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.ids, global.codes, datas.service_Group.name, global.desc)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.body.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "e40160e4-5829-415a-a52f-3f6b8ef1eb38",
                  "parentUUID": "3e04ee73-0f79-4458-8e09-b9934cf14101",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input different description and same code and same name then user got response 200",
                  "fullTitle": "API Service Group Update Service Product when user input different description and same code and same name then user got response 200",
                  "timedOut": false,
                  "duration": 641,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.ids, global.codes, global.names, datas.service_Group.description)   \nif(res.status !==200){\n    console.log(\"update data : \"+res.status+\"||\" +res.body.text)\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "86248fd4-e6ce-4a08-b3a0-5cbf0020b7ed",
                  "parentUUID": "3e04ee73-0f79-4458-8e09-b9934cf14101",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input same data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input same data, then user got response error",
                  "timedOut": false,
                  "duration": 672,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.ids, global.codes1, global.names1, global.desc1)   \nassert(res.status).to.equal(500)",
                  "err": {},
                  "uuid": "55cd67fe-b8f0-4c05-8d4d-0a1f427cbd63",
                  "parentUUID": "3e04ee73-0f79-4458-8e09-b9934cf14101",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using existing code data, then user got response error",
                  "fullTitle": "API Service Group Update Service Product when user input data using existing code data, then user got response error",
                  "timedOut": false,
                  "duration": 648,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await update.updateServiceGroup(global.ids1, global.codes, datas.service_Group.name, datas.service_Group.description)   \nassert(res.status).to.equal(500)",
                  "err": {},
                  "uuid": "222db575-fff8-40ee-9861-ee5eb4f52b88",
                  "parentUUID": "3e04ee73-0f79-4458-8e09-b9934cf14101",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "644e7bd8-d86e-4784-bcc0-d630e8b45e8a",
                "04c36356-12b2-44f4-bb79-f12fa10b5598",
                "e40160e4-5829-415a-a52f-3f6b8ef1eb38",
                "86248fd4-e6ce-4a08-b3a0-5cbf0020b7ed",
                "55cd67fe-b8f0-4c05-8d4d-0a1f427cbd63",
                "222db575-fff8-40ee-9861-ee5eb4f52b88"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3980,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "afe9f84b-eaee-4dfb-9deb-ed2daa4031bf",
              "title": "Delete data Service Group",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 652,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await deleted.deleteServiceGroup(global.ids)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "51eaa0dd-2425-49d6-be49-ad166e38fbe7",
                  "parentUUID": "afe9f84b-eaee-4dfb-9deb-ed2daa4031bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Service Group Delete data Service Group when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 717,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await deleted.deleteServiceGroup(datas.service_Group.wrongid)\nassert(res.status).to.equal(404)",
                  "err": {},
                  "uuid": "c7a09fe3-98e3-4480-bb7d-6f2dd2e5233f",
                  "parentUUID": "afe9f84b-eaee-4dfb-9deb-ed2daa4031bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51eaa0dd-2425-49d6-be49-ad166e38fbe7",
                "c7a09fe3-98e3-4480-bb7d-6f2dd2e5233f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1369,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "ed8c8673-5442-4b08-9839-6a6ca7e7da67",
          "title": "API Extension Clause",
          "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
          "file": "/test/suite_productService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "063269a7-5f1b-4c74-963d-5217e1df6330",
              "title": "Create ExtensionClause",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Create ExtensionClause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 652,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_create.createExtensionClause(datas.Extension_clause.code, datas.service_Group.name, datas.service_Group.description, global.codes)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.ids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(true)\nglobal.ECids = res.body.data[0].id",
                  "err": {},
                  "uuid": "c46c7862-6a42-4e06-888d-7e9f12809cef",
                  "parentUUID": "063269a7-5f1b-4c74-963d-5217e1df6330",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c46c7862-6a42-4e06-888d-7e9f12809cef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 652,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "5c6f3f15-7b3f-477b-8855-3f4a7ad0f6dd",
              "title": "Get all data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all data Extension Clause when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1967,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getall.getallExtensionClause()\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ECids1 = res.body.data[1].id\nglobal.ECserviceCode1 = res.body.data[1].service_group_code\nglobal.code1 = res.body.data[1].code\nglobal.name1 = res.body.data[1].name\nglobal.code2 = res.body.data[0].code\nglobal.name2 = res.body.data[0].name\nglobal.ECserviceCode2 = res.body.data[0].service_group_code\nglobal.desc2 = res.body.data[0].description",
                  "err": {},
                  "uuid": "b2ab3350-f43b-4f85-9828-712fb774cf38",
                  "parentUUID": "5c6f3f15-7b3f-477b-8855-3f4a7ad0f6dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2ab3350-f43b-4f85-9828-712fb774cf38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1967,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "b4a9c2e0-3173-44c0-b78f-11739274366f",
              "title": "Delete data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 698,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Delete.deleteExtensionClause(global.ECids)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "370ff70f-25b9-4a94-92d7-33f18c3fa516",
                  "parentUUID": "b4a9c2e0-3173-44c0-b78f-11739274366f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Delete data Extension Clause when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 655,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Delete.deleteExtensionClause(datas.Extension_clause.wrongid)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc.id).to.equal('Product Extension Clause ID Tidak Ditemukan')",
                  "err": {},
                  "uuid": "438d1e73-5a7a-4505-9aed-1a1284c63427",
                  "parentUUID": "b4a9c2e0-3173-44c0-b78f-11739274366f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "370ff70f-25b9-4a94-92d7-33f18c3fa516",
                "438d1e73-5a7a-4505-9aed-1a1284c63427"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1353,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "1cc01946-0510-4bd7-9ecf-a7fa7e3d0552",
              "title": "Get Detail Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 646,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(global.ECids)\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\").to.equal(global.ECids)\nassert(res.body.data[0]).to.have.property(\"service_group_id\").to.equal(global.ids)\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.codes)\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\").to.equal(false)",
                  "err": {},
                  "uuid": "f2b31043-efe2-496d-ada5-3c14a8e19779",
                  "parentUUID": "1cc01946-0510-4bd7-9ecf-a7fa7e3d0552",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Extension Clause when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 652,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await EC_Getdetail.getdetailExtensionClause(datas.Extension_clause.wrongid)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc.id).to.equal('error data tidak ditemukan')",
                  "err": {},
                  "uuid": "a46296b4-63d3-41d5-9e61-71f9ca7d8e5b",
                  "parentUUID": "1cc01946-0510-4bd7-9ecf-a7fa7e3d0552",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2b31043-efe2-496d-ada5-3c14a8e19779",
                "a46296b4-63d3-41d5-9e61-71f9ca7d8e5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1298,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "52edbcad-7c46-4ae6-8835-858b0c1ae595",
              "title": "update data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause update data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 651,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Update.updateExtensionClause(global.ECids, global.code1, global.name1, datas.Extension_clause.description, global.ECserviceCode1)\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "4ed53b1b-4f0d-4c07-9581-3cb480ead2b8",
                  "parentUUID": "52edbcad-7c46-4ae6-8835-858b0c1ae595",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ed53b1b-4f0d-4c07-9581-3cb480ead2b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 651,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "f172f94a-d84f-4f6e-8fb5-a9d13479b593",
              "title": "Search data Extension Clause",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 673,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.ECserviceCode1, global.code1, global.name1)\nif(res.status !== 200){\n    console.log(\"error search EC\" +res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"description\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "36185fd0-bf9c-4575-a5a4-9cb3f42c5ca0",
                  "parentUUID": "f172f94a-d84f-4f6e-8fb5-a9d13479b593",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid service group, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using invalid service group, then user got response error",
                  "timedOut": false,
                  "duration": 684,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(datas.Extension_clause.invalid_service_group_code, global.code1, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Product Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "7f72b893-45ea-4e41-827b-6acd6791efbc",
                  "parentUUID": "f172f94a-d84f-4f6e-8fb5-a9d13479b593",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_code and with same service group and same name, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_code and with same service group and same name, then user got response error",
                  "timedOut": false,
                  "duration": 649,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.ECserviceCode1, global.code2, global.name1)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Product Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "d85e8538-037f-4c2e-a02b-5cb0e579d916",
                  "parentUUID": "f172f94a-d84f-4f6e-8fb5-a9d13479b593",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using different_name and with same service group and same code, then user got response error",
                  "fullTitle": "API Extension Clause Search data Extension Clause when user input data using different_name and with same service group and same code, then user got response error",
                  "timedOut": false,
                  "duration": 654,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res =  await EC_Search.searchExtensionClause(global.ECserviceCode1, global.code1, global.name2)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property('id').to.equal('Product Search Extension Clause Data Tidak Ditemukan')",
                  "err": {},
                  "uuid": "8577482e-38de-4e33-be52-974d0f9caa5e",
                  "parentUUID": "f172f94a-d84f-4f6e-8fb5-a9d13479b593",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "36185fd0-bf9c-4575-a5a4-9cb3f42c5ca0",
                "7f72b893-45ea-4e41-827b-6acd6791efbc",
                "d85e8538-037f-4c2e-a02b-5cb0e579d916",
                "8577482e-38de-4e33-be52-974d0f9caa5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2660,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "b7dcd7cb-7895-45a9-858b-16954c3f513a",
              "title": "Create Deductible API",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input correct data then user got response 200",
                  "fullTitle": "API Extension Clause Create Deductible API when user input correct data then user got response 200",
                  "timedOut": false,
                  "duration": 646,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")\nglobal.ids = res.body.data[0].id",
                  "err": {},
                  "uuid": "2e6cabe9-b4af-4c53-bc52-a85e2d27ae86",
                  "parentUUID": "b7dcd7cb-7895-45a9-858b-16954c3f513a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong service group, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong service group, then user got response error",
                  "timedOut": false,
                  "duration": 644,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.code2, global.name2, global.desc2, datas.Deductible.service_code, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Service Group Code Tidak Ditemukan\")",
                  "err": {},
                  "uuid": "dc640a09-1d70-4ac7-9b73-fc424a7b3fd4",
                  "parentUUID": "b7dcd7cb-7895-45a9-858b-16954c3f513a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input wrong calculate method, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input wrong calculate method, then user got response error",
                  "timedOut": false,
                  "duration": 652,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {},
                  "uuid": "6e6ca6d2-3455-4e15-beb1-c762be549955",
                  "parentUUID": "b7dcd7cb-7895-45a9-858b-16954c3f513a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input deduction value with string, then user got response error",
                  "fullTitle": "API Extension Clause Create Deductible API when user input deduction value with string, then user got response error",
                  "timedOut": false,
                  "duration": 646,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_create.createDeductible(global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {},
                  "uuid": "41022fe7-508f-4966-971c-a00a34bd6591",
                  "parentUUID": "b7dcd7cb-7895-45a9-858b-16954c3f513a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e6cabe9-b4af-4c53-bc52-a85e2d27ae86",
                "dc640a09-1d70-4ac7-9b73-fc424a7b3fd4",
                "6e6ca6d2-3455-4e15-beb1-c762be549955",
                "41022fe7-508f-4966-971c-a00a34bd6591"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2588,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "ee5d4650-96de-4015-bdbf-abe774a5392e",
              "title": "Get all Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get all then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get all Deduction when user hit api get all then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 1087,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getall.getDeductible()\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "782830e3-9e98-43de-9f39-55ce83265d63",
                  "parentUUID": "ee5d4650-96de-4015-bdbf-abe774a5392e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "782830e3-9e98-43de-9f39-55ce83265d63"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1087,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "dad0e025-fb47-4094-8568-6e9f3f94f4d1",
              "title": "Get Detail Deduction",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api get detail then user got response 200 and all data will be appears",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail then user got response 200 and all data will be appears",
                  "timedOut": false,
                  "duration": 644,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(global.ids)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "26d4b142-426b-487e-acdf-921973549779",
                  "parentUUID": "dad0e025-fb47-4094-8568-6e9f3f94f4d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api get detail with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Get Detail Deduction when user hit api get detail with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 657,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Getdetail.getdetailDeductible(datas.Deductible.wrong_idDeduc)\nassert(res.status).to.equal(404)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"error data tidak ditemukan\")",
                  "err": {},
                  "uuid": "3b553923-22b7-440f-95d4-c09d9d661946",
                  "parentUUID": "dad0e025-fb47-4094-8568-6e9f3f94f4d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26d4b142-426b-487e-acdf-921973549779",
                "3b553923-22b7-440f-95d4-c09d9d661946"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1301,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "dc9bb22b-83ec-4f03-bd8b-62681793dfe4",
              "title": "Update Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 646,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.ids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method1, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\")\nassert(res.body.data[0]).to.have.property(\"code\")\nassert(res.body.data[0]).to.have.property(\"name\")\nassert(res.body.data[0]).to.have.property(\"calculation_method\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "f737f3f3-302f-4ab7-aa3e-866501e3091e",
                  "parentUUID": "dc9bb22b-83ec-4f03-bd8b-62681793dfe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input data using invalid Deduction id, then user got response error",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input data using invalid Deduction id, then user got response error",
                  "timedOut": false,
                  "duration": 639,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(datas.Deductible.wrong_idDeduc, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Product Deductible ID Tidak Ditemukan\")",
                  "err": {},
                  "uuid": "fc651c1e-b4c1-41d1-b5ee-0a55365941a3",
                  "parentUUID": "dc9bb22b-83ec-4f03-bd8b-62681793dfe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu Method then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu Method then user got response 200",
                  "timedOut": false,
                  "duration": 726,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.ids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.wrong_calcu_method, datas.Deductible.calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"Calculation Method Salah\")",
                  "err": {},
                  "uuid": "2df1c1a1-2dea-4e60-a91b-8415460594fa",
                  "parentUUID": "dc9bb22b-83ec-4f03-bd8b-62681793dfe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user input calcu value with string, then user got response 200",
                  "fullTitle": "API Extension Clause Update Deduction Api when user input calcu value with string, then user got response 200",
                  "timedOut": false,
                  "duration": 658,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Update.updateDeductible(global.ids, datas.Deductible.code, datas.Deductible.name, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.invalid_calcu_value)\nassert(res.status).to.equal(400)\nassert(res.body.response_desc).to.have.property(\"id\").to.equal(\"payload tidak valid\")",
                  "err": {},
                  "uuid": "6d18b9f9-dcd5-4761-be25-a8393dff4eae",
                  "parentUUID": "dc9bb22b-83ec-4f03-bd8b-62681793dfe4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f737f3f3-302f-4ab7-aa3e-866501e3091e",
                "fc651c1e-b4c1-41d1-b5ee-0a55365941a3",
                "2df1c1a1-2dea-4e60-a91b-8415460594fa",
                "6d18b9f9-dcd5-4761-be25-a8393dff4eae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2669,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "47a94e07-be36-47da-82ff-187ca3169002",
              "title": "Search Deduction Api",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user input corect data then user got response 200",
                  "fullTitle": "API Extension Clause Search Deduction Api when user input corect data then user got response 200",
                  "timedOut": false,
                  "duration": 645,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Search.searchDeductible(global.code2, global.name2, global.desc2, global.ECserviceCode2, datas.Deductible.calcu_method, datas.Deductible.calcu_value)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)\nassert(res.body.data[0]).to.have.property(\"id\")\nassert(res.body.data[0]).to.have.property(\"service_group_id\")\nassert(res.body.data[0]).to.have.property(\"service_group_code\").to.equal(global.ECserviceCode2)\nassert(res.body.data[0]).to.have.property(\"code\").to.equal(global.code2)\nassert(res.body.data[0]).to.have.property(\"name\").to.equal(global.name2)\nassert(res.body.data[0]).to.have.property(\"calculation_method\").to.equal(\"percentage\")\nassert(res.body.data[0]).to.have.property(\"calculation_value\").to.equal(\"400000.00\")\nassert(res.body.data[0]).to.have.property(\"is_active\")",
                  "err": {},
                  "uuid": "a0182463-1a74-4ced-b794-68388bbad503",
                  "parentUUID": "47a94e07-be36-47da-82ff-187ca3169002",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0182463-1a74-4ced-b794-68388bbad503"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 645,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "229a0b4e-14f4-4083-8baf-00c49c372d24",
              "title": "Deleted Deduction APi",
              "fullFile": "/home/runner/work/flash/flash/test/suite_productService.js",
              "file": "/test/suite_productService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with correct id then user got response 200 and data will be deleted",
                  "timedOut": false,
                  "duration": 639,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Delete.deleteDeductible(global.ids)\nif(res.status !== 200){\n    console.log(\"failed :\"+ res.text);\n}\nassert(res.status).to.equal(200)",
                  "err": {},
                  "uuid": "133d604f-7c38-421c-9810-b2bb2b82efd8",
                  "parentUUID": "229a0b4e-14f4-4083-8baf-00c49c372d24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "when user hit api delete with wrong id then user got response error",
                  "fullTitle": "API Extension Clause Deleted Deduction APi when user hit api delete with wrong id then user got response error",
                  "timedOut": false,
                  "duration": 641,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await DC_Delete.deleteDeductible(datas.Deductible.wrong_idDeduc)\nassert(res.status).to.equal(400)",
                  "err": {},
                  "uuid": "cdccae91-6270-4f54-b8dc-c81df5641c53",
                  "parentUUID": "229a0b4e-14f4-4083-8baf-00c49c372d24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "133d604f-7c38-421c-9810-b2bb2b82efd8",
                "cdccae91-6270-4f54-b8dc-c81df5641c53"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1280,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome/"
      },
      "version": "6.2.0"
    }
  }
}